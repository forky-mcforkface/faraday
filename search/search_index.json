{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rethink Vulnerability Management for your Network Security \u00b6 Security has two difficult tasks: designing smart ways of getting new information, and keeping track of findings to improve remediation efforts. With Faraday, you may focus on discovering vulnerabilities while we help you with the rest. Just use it in your terminal and get your work organized on the run. Faraday was made to let you take advantage of the available tools in the community in a truly multiuser way. Faraday aggregates and normalyzses the data you load, allowing exploring it into different visualizations that are useful to managers and analyst alike. Designed to optimize Vulnerability Management, Faraday normalizes, tracks, and identifies Assets and Vulnerability data coming from more than +90 security tools. To read about the latest features check out the release notes ! Getting Started \u00b6 Learn about Faraday holistic approach and rethink vulnerability management. Centralize your vulnerability data Automate the scanners you need Integrating faraday in your CI/CD \u00b6 Setup Bandit and OWASP ZAP in your pipeline - GitHub [PDF] - Jenkins [PDF] - TravisCI [PDF] Setup Bandit, OWASP ZAP and SonarQube in your pipeline - Gitlab [PDF] Faraday Cli \u00b6 Faraday-cli is our command line client, providing easy access to the console tools, work in faraday directly from the terminal! This is a great way to automate scans , integrate it to CI/CD pipeline or just get metrics from a workspace $ pip3 install faraday-cli Check our faraday-cli repo Check out the documentation here . Faraday Agents \u00b6 Faraday Agents Dispatcher is a tool that gives Faraday the ability to run scanners or tools remotely from the platform and get the results. Actionable reporting and Vulnerability templates \u00b6 Every company has a different approach to reporting. Faraday provides a way for companies to export their data into their own compliance-ready formats. Plugins \u00b6 Connect you favorite tools through our plugins . Right now there are more than 80+ supported tools , among which you will find: Missing your favorite one? Create a Pull Request ! There are two Plugin types: Console plugins which interpret the output of the tools you execute. $ faraday-cli tool run \\\" nmap www.exampledomain.com \\\" \ud83d\udcbb Processing Nmap command Starting Nmap 7 .80 ( https://nmap.org ) at 2021 -02-22 14 :13 -03 Nmap scan report for www.exampledomain.com ( 10 .196.205.130 ) Host is up ( 0 .17s latency ) . rDNS record for 10 .196.205.130: 10 .196.205.130.bc.example.com Not shown: 996 filtered ports PORT STATE SERVICE 80 /tcp open http 443 /tcp open https 2222 /tcp open EtherNetIP-1 3306 /tcp closed mysql Nmap done : 1 IP address ( 1 host up ) scanned in 11 .12 seconds \u2b06 Sending data to workspace: test \u2714 Done Report plugins which allows you to import previously generated artifacts like XMLs, JSONs. faraday-cli tool report burp.xml Creating custom plugins is super easy, Read more about Plugins . Vulnerability Templates Quickly fill out the gaps in your vulnerability data with Templates from your personalized Knowledge Base. Reduce and Prioritize An interface built around collaboration and simplicity: manage, tag, prioritize with ease. Faraday Client Our Shell allows you to upload results while pentesting actively. Custom Workflows and seamless Deduplication \u00b6 Trigger any action with custom events built to avoid repetitive tasks. Import all your data and never worry about duplicates, as Faraday automatically identifies and merges duplicated issues. Easily schedule scanners and jobs with Agents \u00b6 Agents are a lightweight, highly-scalable way to automate repetitive scheduled scans or triggered jobs that unnecessarily take up team resources. Jira, GitLab, ServiceNow, SolarWinds, 2 nd Factor Authentication (2FA) and LDAP \u00b6 Synchronize your favorite ticketing systems (JIRA, GitLab, ServiceNow, SolarWinds) and integrate with your existing Direct Access Protocol (LDAP). We are continuously adding new integrations based on customer requests. Easy-to-use REST API \u00b6 Leverage our REST API to scale your own strategy by directly accessing integrations, analytics capabilities, and reporting depending on your needs. Presentations \u00b6 Some of the leading Security Conferences we present Faraday Ekoparty : 2010 - 2014 - 2017 - 2018 Black Hat: USA : 2011 - 2015 - 2016 - 2017 - 2018 Asia : 2016 - 2017 - 2018 Europe : 2015 - 2016 RSA USA : 2015 HITBSecConf Dubai : 2018 SecurityWeekly : 2016 Zero Nights : 2016 AVTokyo : 2016 - 2018 Tel Aviv-Yafo : 2018 SECCON : 2018 PyConAr : 2018 8.8 Chile : 2018 CharruaCon : 2018 NotPinkCon : 2018 plusCODE : 2018 BSides LATAM : 2016 Links \u00b6 Homepage: faradaysec.com Documentation: Faraday Docs Download: Download .deb/.rpm from releases page Issue tracker and feedback: Github issue tracker Frequently Asked Questions: FaradaySEC FAQ Twitter: @faradaysec Try one of our Demos","title":"Home"},{"location":"#rethink-vulnerability-management-for-your-network-security","text":"Security has two difficult tasks: designing smart ways of getting new information, and keeping track of findings to improve remediation efforts. With Faraday, you may focus on discovering vulnerabilities while we help you with the rest. Just use it in your terminal and get your work organized on the run. Faraday was made to let you take advantage of the available tools in the community in a truly multiuser way. Faraday aggregates and normalyzses the data you load, allowing exploring it into different visualizations that are useful to managers and analyst alike. Designed to optimize Vulnerability Management, Faraday normalizes, tracks, and identifies Assets and Vulnerability data coming from more than +90 security tools. To read about the latest features check out the release notes !","title":"Rethink Vulnerability Management for your Network Security"},{"location":"#getting-started","text":"Learn about Faraday holistic approach and rethink vulnerability management. Centralize your vulnerability data Automate the scanners you need","title":"Getting Started"},{"location":"#integrating-faraday-in-your-cicd","text":"Setup Bandit and OWASP ZAP in your pipeline - GitHub [PDF] - Jenkins [PDF] - TravisCI [PDF] Setup Bandit, OWASP ZAP and SonarQube in your pipeline - Gitlab [PDF]","title":"Integrating faraday in your CI/CD"},{"location":"#faraday-cli","text":"Faraday-cli is our command line client, providing easy access to the console tools, work in faraday directly from the terminal! This is a great way to automate scans , integrate it to CI/CD pipeline or just get metrics from a workspace $ pip3 install faraday-cli Check our faraday-cli repo Check out the documentation here .","title":"Faraday Cli"},{"location":"#faraday-agents","text":"Faraday Agents Dispatcher is a tool that gives Faraday the ability to run scanners or tools remotely from the platform and get the results.","title":"Faraday Agents"},{"location":"#actionable-reporting-and-vulnerability-templates","text":"Every company has a different approach to reporting. Faraday provides a way for companies to export their data into their own compliance-ready formats.","title":"Actionable reporting and Vulnerability templates"},{"location":"#plugins","text":"Connect you favorite tools through our plugins . Right now there are more than 80+ supported tools , among which you will find: Missing your favorite one? Create a Pull Request ! There are two Plugin types: Console plugins which interpret the output of the tools you execute. $ faraday-cli tool run \\\" nmap www.exampledomain.com \\\" \ud83d\udcbb Processing Nmap command Starting Nmap 7 .80 ( https://nmap.org ) at 2021 -02-22 14 :13 -03 Nmap scan report for www.exampledomain.com ( 10 .196.205.130 ) Host is up ( 0 .17s latency ) . rDNS record for 10 .196.205.130: 10 .196.205.130.bc.example.com Not shown: 996 filtered ports PORT STATE SERVICE 80 /tcp open http 443 /tcp open https 2222 /tcp open EtherNetIP-1 3306 /tcp closed mysql Nmap done : 1 IP address ( 1 host up ) scanned in 11 .12 seconds \u2b06 Sending data to workspace: test \u2714 Done Report plugins which allows you to import previously generated artifacts like XMLs, JSONs. faraday-cli tool report burp.xml Creating custom plugins is super easy, Read more about Plugins . Vulnerability Templates Quickly fill out the gaps in your vulnerability data with Templates from your personalized Knowledge Base. Reduce and Prioritize An interface built around collaboration and simplicity: manage, tag, prioritize with ease. Faraday Client Our Shell allows you to upload results while pentesting actively.","title":"Plugins"},{"location":"#custom-workflows-and-seamless-deduplication","text":"Trigger any action with custom events built to avoid repetitive tasks. Import all your data and never worry about duplicates, as Faraday automatically identifies and merges duplicated issues.","title":"Custom Workflows and seamless Deduplication"},{"location":"#easily-schedule-scanners-and-jobs-with-agents","text":"Agents are a lightweight, highly-scalable way to automate repetitive scheduled scans or triggered jobs that unnecessarily take up team resources.","title":"Easily schedule scanners and jobs with Agents"},{"location":"#jira-gitlab-servicenow-solarwinds-2nd-factor-authentication-2fa-and-ldap","text":"Synchronize your favorite ticketing systems (JIRA, GitLab, ServiceNow, SolarWinds) and integrate with your existing Direct Access Protocol (LDAP). We are continuously adding new integrations based on customer requests.","title":"Jira, GitLab, ServiceNow, SolarWinds, 2nd Factor Authentication (2FA) and LDAP"},{"location":"#easy-to-use-rest-api","text":"Leverage our REST API to scale your own strategy by directly accessing integrations, analytics capabilities, and reporting depending on your needs.","title":"Easy-to-use REST API"},{"location":"#presentations","text":"Some of the leading Security Conferences we present Faraday Ekoparty : 2010 - 2014 - 2017 - 2018 Black Hat: USA : 2011 - 2015 - 2016 - 2017 - 2018 Asia : 2016 - 2017 - 2018 Europe : 2015 - 2016 RSA USA : 2015 HITBSecConf Dubai : 2018 SecurityWeekly : 2016 Zero Nights : 2016 AVTokyo : 2016 - 2018 Tel Aviv-Yafo : 2018 SECCON : 2018 PyConAr : 2018 8.8 Chile : 2018 CharruaCon : 2018 NotPinkCon : 2018 plusCODE : 2018 BSides LATAM : 2016","title":"Presentations"},{"location":"#links","text":"Homepage: faradaysec.com Documentation: Faraday Docs Download: Download .deb/.rpm from releases page Issue tracker and feedback: Github issue tracker Frequently Asked Questions: FaradaySEC FAQ Twitter: @faradaysec Try one of our Demos","title":"Links"},{"location":"2-Factor-Authentication/","text":"Faraday supports 2 nd Factor Authentication. We support any apps, e.g: (V3 Deprecated) \u00b6 Google Authenticator Android Google Authenticator iOS Authy Android Authy iOS OTP Authenticator Android, Open Source Activate 2FA \u00b6 Click on the Faraday slider menu on the top right of the screen, select Account and go to the Two Factor Authentication tab. * Once you enable 2FA, Faraday will show you a QR code and thus you can scan it with your chosen app. As with every app using 2FA, the time on your phone and on your machine must be synchronized.","title":"2nd Factor"},{"location":"2-Factor-Authentication/#faraday-supports-2nd-factor-authentication-we-support-any-apps-eg-v3-deprecated","text":"Google Authenticator Android Google Authenticator iOS Authy Android Authy iOS OTP Authenticator Android, Open Source","title":"Faraday supports 2nd Factor Authentication. We support any apps, e.g: (V3 Deprecated)"},{"location":"2-Factor-Authentication/#activate-2fa","text":"Click on the Faraday slider menu on the top right of the screen, select Account and go to the Two Factor Authentication tab. * Once you enable 2FA, Faraday will show you a QR code and thus you can scan it with your chosen app. As with every app using 2FA, the time on your phone and on your machine must be synchronized.","title":"Activate 2FA"},{"location":"API-Server/","text":"Faraday Server API \u00b6 Faraday has a RESTful API under _api url prefix where the server is configured (example: https://server.faradaysec.com:5985/_api/v3/ ) The Faraday REST API enables you to interact with our server. Use this API to interact or integrate with Faraday server. This page documents the REST API, with HTTP response codes and example requests and responses. We have a Swagger page to explore the api here: Faraday Server API Description \u00b6 Faraday has a Server RESTful API by default running on 127.0.0.1:5985. INFO: On cloud, you have to replace this with \" https://yourdomain.faradaysec.com/ \" You can check all API endpoints with the command: $ faraday-manage show-urls Methods \u00b6 POST: creates objects GET: get a list of objects or get one object given its object_id PUT: update object DELETE: delete object Headers \u00b6 Our API endpoints support JSON and you must always include the header: Content-Type: application/json Authentication \u00b6 The server API requires authentication. Currently, we support cookie authentication. The endpoint for login is /_api/login and the json payload is: {\"email\": \"USERNAME\", \"password\": \"SECRET_PASSWORD\"} Endpoints Faraday Config: Here are the list of API endpoints for license, users, workspace and authentication: (HEAD, POST, OPTIONS, GET) -> '/login' (HEAD, OPTIONS, GET) -> '/logout' (HEAD, OPTIONS, GET) -> '/session' (HEAD, POST, OPTIONS, GET) -> '/change' (HEAD, OPTIONS, GET) -> '/config' (HEAD, OPTIONS, GET) -> '/_api/v3/licenses/' (POST, OPTIONS) -> '/_api/v3/licenses/' (OPTIONS, DELETE) -> '/_api/v3/licenses/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/licenses/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/licenses/<object_id>/' (OPTIONS, DELETE) -> '/_api/v3/users/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/users/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/users/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/users/' (POST, OPTIONS) -> '/_api/v3/users/' (HEAD, OPTIONS, GET) -> '/_api/v3/in' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/' (POST, OPTIONS) -> '/_api/v3/ws/' (OPTIONS, DELETE) -> '/_api/v3/ws/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<object_id>/' Host \u00b6 This API endpoint allows you to change the Host objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/hosts/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/count/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/countVulns/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/hosts/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/hosts/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/<host_id>/services/' (DELETE, OPTIONS) -> '/_api/v3/ws/<workspace_name>/hosts/bulk_delete/' JSON Body of the Host object: { \"ip\":\"test\", \"hostnames\": [], \"mac\":\"00:00:00:00:00:00\", \"description\":\"\", \"default_gateway\":\"None\", \"os\":\"\", \"owned\":false, \"owner\":\"\" } Services This API endpoint allows you to change the Service objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/services/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/services/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/services/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/services/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/services/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/services/<object_id>/' JSON Body of the Service object: { \"name\":\"test\", \"description\":\"\", \"owned\":false, \"owner\":\"\", \"ports\":[8080], \"protocol\":\"tcp\", \"parent\":1156, \"status\":\"open\", \"version\":\"\", \"type\":\"Service\" } Vulnerability This API endpoint allows you to change the Vulnerability objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/vulns/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/count/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/timeline/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/vulns/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/vulns/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/<vuln_id>/attachment/<attachment_filename>/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace>/upload_report' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/tags/' JSON Body of the Vulnerability object: INFO : key named type can be: \u00b6 vulnerability: Normal vulnerability, the parent could be a service or a host. vulnerability_web: Web vulnerability, the parent can only be a service. { \"owner\":\"faraday\", \"parent\":1156, \"parent_type\":\"Host\", \"type\":\"Vulnerability\", \"ws\":\"api\", \"confirmed\":true, \"data\":\"\", \"desc\":\"Testing API\", \"impact\": { \"accountability\":false, \"availability\":false, \"confidentiality\":false, \"integrity\":false }, \"name\":\"test\", \"owned\":false, \"policyviolations\":[], \"refs\":[], \"resolution\":\"\", \"severity\":\"high\", \"issuetracker\":\"\", \"status\":\"opened\", \"_attachments\":{}, \"description\":\"\", \"protocol\":\"\", \"version\":\"\" } Tasks \u00b6 This API endpoint allows you to change the Task objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/tasks/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/tasks/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/tasks/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/tasks/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/tasks/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/tasks/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/taskGroups/manualimport/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/taskGroups/import/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/taskGroups/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/taskGroups/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/taskGroups/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/taskGroups/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/taskGroups/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/taskGroups/' (HEAD, OPTIONS, GET) -> '/_api/v3/task_template/' (POST, OPTIONS) -> '/_api/v3/task_template/' (OPTIONS, DELETE) -> '/_api/v3/task_template/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/task_template/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/task_template/<object_id>/' (OPTIONS, DELETE) -> '/_api/v3/methodology_template/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/methodology_template/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/methodology_template/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/methodology_template/' (POST, OPTIONS) -> '/_api/v3/methodology_template/' JSON Body of the Task object: { \"name\":\"test\", \"type\":\"TaskGroup\", \"group_type\":\"instance\", \"instance_of\":\"\", \"tCompletedtasks\":0, \"totaltasks\":0 } Reports This API endpoint allows you to create reports from the API and download them: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/reports/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/count/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/countVulns/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/listTemplates/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/reports/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/reports/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/<report_id>/download/' JSON Body of the Reports object: { \"name\":\"Testing-API\", \"tags\":[], \"title\":\"Network XYZ\", \"enterprise\":\"ACMEINC\", \"scope\":\"Scope\", \"objectives\":\"Objetives\", \"summary\":\"Summ\", \"confirmed\":false, \"conclusions\":\"Conclusions\", \"recommendations\":\"Recommendations\", \"vuln_count\":4, \"template_name\":\"generic_default.docx\", \"grouped\":false } Vulnerability Template \u00b6 This API endpoint allows you to change the Vulnerability Template (VulnDB) objects: (HEAD, OPTIONS, GET) -> '/_api/v3/vulnerability_template/' (POST, OPTIONS) -> '/_api/v3/vulnerability_template/' (OPTIONS, DELETE) -> '/_api/v3/vulnerability_template/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/vulnerability_template/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/vulnerability_template/<object_id>/' JSON Body of the Vulnerability Template object: { \"cwe\":\"\", \"description\":\"Test\", \"desc\":\"\", \"exploitation\":\"high\", \"name\":\"Testing API\", \"references\":[], \"refs\":[], \"resolution\":\"\", \"type\":\"vulnerability_template\" } Credentials This API endpoint allows you to change the Credential objects: (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/credential/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/credential/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/credential/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/credential/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/credential/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/credential/count/' JSON Body of the Credentials object: { \"name\":\"Test\", \"username\":\"faraday\", \"password\":\"changeme\", \"type\":\"Cred\", \"parent_type\":\"Host\", \"parent\":\"1147\", \"owner\":\"\", \"description\":\"\" } Activity Feed \u00b6 This API endpoint allows you to change the Activity Feed (from Dashboard) objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/activities/count/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/commands/activity_feed/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/activities/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/activities/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/activities/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/activities/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/activities/' Comments \u00b6 This API endpoint allows you to change the Comment objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/comment/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/comment/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/comment/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/comment/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/comment/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/comment/' Commands \u00b6 This API endpoint allows you to change the Commands objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/commands/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/commands/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/commands/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/commands/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/commands/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/commands/' Others: \u00b6 (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/comment_unique/' Examples \u00b6 Assuming that our credentials are: username: faraday password: changeme Login: in order to be able to login through the API, you must supply your credentials and store them in a cookie file just as the following example: curl -s 'http://127.0.0.1:5985/_api/login' \\ -H 'Origin: http://127.0.0.1:5985/' -H 'Accept-Encoding: gzip, deflate, br' \\ -H 'Accept-Language: en-US,en;q=0.9' \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json, text/javascript, */*; q=0.01' \\ -H 'Referer: http://127.0.0.1:5985/' -H 'X-Requested-With: XMLHttpRequest' \\ -H 'Connection: keep-alive' \\ --data-binary '{\"email\":\"faraday\",\"password\": \"changeme\"}' \\ --compressed -c cookie.txt > /dev/null Creating a host: assuming our workspace name is test: \u00b6 curl -X POST http://127.0.0.1:5985/_api/v3/ws/test/hosts/ \\ -d '{\"ip\":\"127.0.0.1\",\"hostnames\":[\"testing\"], \"mac\":\"00:00:00:00:00:00\",\"description\":\"Testing API\", \"default_gateway\":\"None\", \"os\":\"Linux\", \"owned\":true, \"owner\":\"\"}' \\ -b cookie.txt \\ -H 'Content-Type: application/json' Getting a list of hosts: \u00b6 curl -X GET http://127.0.0.1:5985/_api/v3/ws/test/hosts/ -b cookie.txt Creating a service: \u00b6 curl -X POST http://127.0.0.1:5985/_api/v3/ws/test/services/ \\ -d '{\"name\":\"Test\",\"description\":\"Testing API\", \"owned\":true, \"owner\":\"\",\"ports\":[8080],\"protocol\":\"tcp\",\"parent\":1157,\"status\":\"open\",\"version\":\"\",\"metadata\":{\"update_time\":1533152663.994,\"update_user\":\"\",\"update_action\":0,\"creator\":\"\",\"create_time\":1533152663.994,\"update_controller_action\":\"UI Web New\",\"owner\":\"\"},\"type\":\"Service\"}' \\ -b cookie.txt \\ -H 'Content-Type: application/json' Creating a vuln: \u00b6 curl -X POST http://127.0.0.1:5985/_api/v3/ws/test/vulns/ \\ -d '{\"metadata\":{\"update_time\":1533152883.927, \"update_user\":\"\", \"update_action\":0,\"creator\":\"UI Web\", \"create_time\":1533152883.927, \"update_controller_action\":\"UI Web New\", \"owner\":\"faraday\"}, \"obj_id\":\"\", \"owner\":\"faraday\", \"parent\":1157, \"parent_type\":\"Host\",\"type\":\"Vulnerability\",\"ws\":\"test\",\"confirmed\":true,\"data\":\"\",\"desc\":\"New vulnerability created for API purposes\",\"easeofresolution\":\"simple\",\"impact\":{\"accountability\":false, \"availability\":false, \"confidentiality\":false, \"integrity\":false},\"name\":\"New Vuln - Testing API\",\"owned\":false,\"policyviolations\":[],\"refs\":[], \"resolution\":\"\", \"severity\":\"critical\", \"issuetracker\":\"\", \"status\":\"opened\",\"_attachments\":{},\"description\":\"\",\"protocol\":\"\",\"version\":\"\"}' \\ -b cookie.txt \\ -H 'Content-Type: application/json' Creating a user: \u00b6 curl -X POST http://127.0.0.1:5985/_api/v3/users/ \\ -d '{\"name\":\"faraday\", \"password\":\"changeme\", \"roles\":[\"admin\"], \"type\":\"user\", \"role\":\"admin\"}' \\ -b cookie.txt \\ -H 'Content-Type: application/json' Generating a report: \u00b6 curl -X POST http://127.0.0.1:5985/_api/v3/ws/test/reports/ \\ -d '{\"name\":\"Testing-API\",\"tags\":[], \"title\":\"\", \"enterprise\":\"\", \"scope\":\"\", \"objectives\":\"\", \"summary\":\"\", \"confirmed\":false, \"conclusions\":\"\", \"recommendations\":\"\", \"vuln_count\":2, \"template_name\":\"generic_default.docx\", \"grouped\":false}' \\ -b cookie.txt \\ -H 'Content-Type: application/json' Uploading a report: \u00b6 In order to be able to upload a report, you need the CSRF token and session's cookies. To get session's cookie, go to the Status Report and take it from RequestHeaders section of the console. And to get the CSRF token, in the same console, go to the tab Response. On the first --form parameter,put the path of the file that you want to upload. curl -X POST http://127.0.0.1:5985/_api/v3/ws/api/upload_report \\ -H 'Content-Type: multipart/form-data' \\ --cookie \"session=.eJw90M2KwjAQB_BXWXL2YGu9CB6UlGJhpgSCZeZS2FpNJ2YXqkI24rtv18O-wO__8VTdeRpuTm3u02NYqG48qc1TfXyqjWK9SyyUYVsWmMrUWDei9Etsj4FaDKydw-Qj5KZo9CWSNUu2uzXktQM5XSnxyJVZgTaRrYkk-xEt5ZQfVmT3DmcfKvrhcBQUKMgeIoQysb0knjMh-QIEliyQQzJZ0-IV_kx7DWDZY1WPmNCD9Fv1Wqj-Np27-7cfvv4noNTSVCZjXSaYK2KgiLqMTTtX1H7daMpmPnLFgtpHSk7YbN_c4zZM7ztUoV6_3rRiDA.DkoypQ.q7eGzh1oof8dKnbF4q6xD_n1d6o\" \\ --form \"file=@PATH/TO/FILE\" \\ --form \"csrf_token=IjYyYzhkNWQxMzA4MTZmMTQxMTliYTA5OTg2NWYzMWRmYzQ5MWM4Y2Ui.Dko4Zw.sZ-LLdGoxaNFUaySFFQMvyLecxc\" \\ --compressed Using the API to create a workspace \u00b6 Here we provide a Python script using requests to create a new workspace: # -*- coding: utf-8 -*- import click from requests import Session @click . command () @click . option ( '--username' , prompt = True ) @click . option ( '--password' , prompt = True ) @click . option ( '--server_address' , prompt = True , help = 'Faraday server url' , default = 'http://localhost:5985/' ) @click . option ( '--workspace_name' , prompt = True ) def create_workspace ( username , password , server_address , workspace_name ): print ( 'Authentication to server {0} ' . format ( server_address )) session = Session () # authentication to faraday server session . post ( server_address + '/_api/login' , json = { 'email' : 'faraday' , 'password' : 'Password123' }) # create new workspace ws_payload = { \"customer\" : \"\" , \"name\" : workspace_name , \"type\" : \"Workspace\" , \"users\" :[ \"faraday\" ], \"public\" : False , \"children\" :[], \"duration\" :{ \"start_date\" : \"\" , \"end_date\" : \"\" }, \"scope\" :[], \"description\" : \"\" } res = session . post ( server_address + '/_api/v3/ws/' , json = ws_payload ) assert res . status_code == 201 print ( 'Workspace {0} created' . format ( workspace_name )) create_workspace () Using the API to create users in bulk \u00b6 curl -s 'http://127.0.0.1:5985/_api/login' \\ -H 'Origin: http://127.0.0.1:5985/' -H 'Accept-Encoding: gzip, deflate, br' \\ -H 'Accept-Language: en-US,en;q=0.9' \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json, text/javascript, */*; q=0.01' \\ -H 'Referer: http://127.0.0.1:5985/' -H 'X-Requested-With: XMLHttpRequest' \\ -H 'Connection: keep-alive' \\ --data-binary '{\"email\":\"faraday\",\"password\": \"changeme\"}' \\ --compressed -c cookie.txt while read -r line ; do curl -X POST http://127.0.0.1:5985/_api/v3/users/ \\ -d '{\"name\":\"' $line '\",\"password\":\"Password123\",\"roles\":[\"client\"],\"type\":\"user\",\"role\":\"client\"}' \\ -H 'Content-Type: application/json' \\ -b cookie.txt done < \"users.txt\" Using the API to delete hosts in bulk \u00b6 curl -X DELETE http://127.0.0.1:5985/_api/v3/ws/test/hosts/bulk_delete/ \\ -d '{\"hosts_ids\": [ 1, 2, 3, 4]}' \\ -b cookie.txt \\ -H 'Content-Type: application/json' Upload evidence to a Vulnerability \u00b6 Remember to change the workspace name in the urls and vuln id to attach evidence. curl -s 'http://127.0.0.1:5985/_api/login' \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json, text/javascript, */*; q=0.01' \\ -H 'Referer: http://127.0.0.1:5985/' -H 'X-Requested-With: XMLHttpRequest' \\ -H 'Connection: keep-alive' \\ --data-binary '{\"email\":\"faraday\",\"password\": \"changeme\"}' \\ --compressed -c cookie.txt obtain csrf token to upload files \u00b6 csrf_token=$(curl -s -X GET http://127.0.0.1:5985/_api/session -b cookie.txt -c csrf_cookie.txt| python -c \"import sys, json; print json.load(sys.stdin)['csrf_token']\") Upload the file evidence.png \u00b6 curl 'http://localhost:5985/_api/v3/ws/demo_workspace/vulns/251/attachment/' \\ -H 'Connection: keep-alive' --data-binary $'------WebKitFormBoundary4RCsZGBu1aaCqyxT\\r\\nContent-Disposition: form-data;name=\"csrf_token\"\\r\\n\\r\\$csrf_token\\r\\n------WebKitFormBoundary4RCsZGBu1aaCqyxT\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"evidence.png\"\\r\\nContent-Type: image/png\\r\\n\\r\\n\\r\\n------WebKitFormBoundary4RCsZGBu1aaCqyxT--\\r\\n' \\ --compressed -c csrf_cookie.txt Upload reports (XML results from tools) using curl \u00b6 Please check the URLs and use the correct workspace name! curl -s 'http://127.0.0.1:5985/_api/login' \\ -H 'Origin: http://127.0.0.1:5985/' -H 'Accept-Encoding: gzip, deflate, br' \\ -H 'Accept-Language: en-US,en;q=0.9' \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json, text/javascript, */*; q=0.01' \\ -H 'Referer: http://127.0.0.1:5985/' -H 'X-Requested-With: XMLHttpRequest' \\ -H 'Connection: keep-alive' \\ --data-binary '{\"email\":\"faraday\",\"password\": \"changeme\"}' \\ --compressed -c cookie.txt csrf_token = $( curl -s -X GET http://127.0.0.1:5985/_api/session -b cookie.txt -c csrf_cookie.txt | python -c \"import sys, json; print json.load(sys.stdin)['csrf_token']\" ) echo $csrf_token echo \";currentUrl=%2Fstatus%2Fws%2Ftest1; currentComponent=status\" >> cookie.txt curl -i -v http://127.0.0.1:5985/_api/v3/ws/test1/upload_report \\ -H \"Connection: keep-alive\" \\ -H \"Pragma: no-cache\" \\ -H \"Cache-Control: no-cache\" \\ -H \"Accept: application/json, text/plain, */*\" \\ -H \"Origin: http://127.0.0.1:5985/\" \\ -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36\" \\ -H \"Content-Type: multipart/form-data\" \\ -H \"Referer: http://127.0.0.1:5985/\" \\ -H \"Accept-Encoding: gzip, deflate, br\" \\ -H \"Accept-Language: en-US,en;q=0.9,es;q=0.8\" \\ --form \"csrf_token= $csrf_token \" \\ --form \"file=@/PATH/TO/FILE\" \\ -b csrf_cookie.txt","title":"API Server"},{"location":"API-Server/#faraday-server-api","text":"Faraday has a RESTful API under _api url prefix where the server is configured (example: https://server.faradaysec.com:5985/_api/v3/ ) The Faraday REST API enables you to interact with our server. Use this API to interact or integrate with Faraday server. This page documents the REST API, with HTTP response codes and example requests and responses. We have a Swagger page to explore the api here:","title":"Faraday Server API"},{"location":"API-Server/#faraday-server-api-description","text":"Faraday has a Server RESTful API by default running on 127.0.0.1:5985. INFO: On cloud, you have to replace this with \" https://yourdomain.faradaysec.com/ \" You can check all API endpoints with the command: $ faraday-manage show-urls","title":"Faraday Server API Description"},{"location":"API-Server/#methods","text":"POST: creates objects GET: get a list of objects or get one object given its object_id PUT: update object DELETE: delete object","title":"Methods"},{"location":"API-Server/#headers","text":"Our API endpoints support JSON and you must always include the header: Content-Type: application/json","title":"Headers"},{"location":"API-Server/#authentication","text":"The server API requires authentication. Currently, we support cookie authentication. The endpoint for login is /_api/login and the json payload is: {\"email\": \"USERNAME\", \"password\": \"SECRET_PASSWORD\"} Endpoints Faraday Config: Here are the list of API endpoints for license, users, workspace and authentication: (HEAD, POST, OPTIONS, GET) -> '/login' (HEAD, OPTIONS, GET) -> '/logout' (HEAD, OPTIONS, GET) -> '/session' (HEAD, POST, OPTIONS, GET) -> '/change' (HEAD, OPTIONS, GET) -> '/config' (HEAD, OPTIONS, GET) -> '/_api/v3/licenses/' (POST, OPTIONS) -> '/_api/v3/licenses/' (OPTIONS, DELETE) -> '/_api/v3/licenses/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/licenses/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/licenses/<object_id>/' (OPTIONS, DELETE) -> '/_api/v3/users/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/users/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/users/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/users/' (POST, OPTIONS) -> '/_api/v3/users/' (HEAD, OPTIONS, GET) -> '/_api/v3/in' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/' (POST, OPTIONS) -> '/_api/v3/ws/' (OPTIONS, DELETE) -> '/_api/v3/ws/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<object_id>/'","title":"Authentication"},{"location":"API-Server/#host","text":"This API endpoint allows you to change the Host objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/hosts/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/count/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/countVulns/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/hosts/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/hosts/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/hosts/<host_id>/services/' (DELETE, OPTIONS) -> '/_api/v3/ws/<workspace_name>/hosts/bulk_delete/' JSON Body of the Host object: { \"ip\":\"test\", \"hostnames\": [], \"mac\":\"00:00:00:00:00:00\", \"description\":\"\", \"default_gateway\":\"None\", \"os\":\"\", \"owned\":false, \"owner\":\"\" } Services This API endpoint allows you to change the Service objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/services/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/services/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/services/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/services/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/services/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/services/<object_id>/' JSON Body of the Service object: { \"name\":\"test\", \"description\":\"\", \"owned\":false, \"owner\":\"\", \"ports\":[8080], \"protocol\":\"tcp\", \"parent\":1156, \"status\":\"open\", \"version\":\"\", \"type\":\"Service\" } Vulnerability This API endpoint allows you to change the Vulnerability objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/vulns/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/count/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/timeline/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/vulns/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/vulns/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/vulns/<vuln_id>/attachment/<attachment_filename>/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace>/upload_report' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/tags/' JSON Body of the Vulnerability object:","title":"Host"},{"location":"API-Server/#info-key-named-type-can-be","text":"vulnerability: Normal vulnerability, the parent could be a service or a host. vulnerability_web: Web vulnerability, the parent can only be a service. { \"owner\":\"faraday\", \"parent\":1156, \"parent_type\":\"Host\", \"type\":\"Vulnerability\", \"ws\":\"api\", \"confirmed\":true, \"data\":\"\", \"desc\":\"Testing API\", \"impact\": { \"accountability\":false, \"availability\":false, \"confidentiality\":false, \"integrity\":false }, \"name\":\"test\", \"owned\":false, \"policyviolations\":[], \"refs\":[], \"resolution\":\"\", \"severity\":\"high\", \"issuetracker\":\"\", \"status\":\"opened\", \"_attachments\":{}, \"description\":\"\", \"protocol\":\"\", \"version\":\"\" }","title":"INFO: key named type can be:"},{"location":"API-Server/#tasks","text":"This API endpoint allows you to change the Task objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/tasks/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/tasks/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/tasks/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/tasks/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/tasks/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/tasks/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/taskGroups/manualimport/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/taskGroups/import/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/taskGroups/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/taskGroups/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/taskGroups/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/taskGroups/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/taskGroups/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/taskGroups/' (HEAD, OPTIONS, GET) -> '/_api/v3/task_template/' (POST, OPTIONS) -> '/_api/v3/task_template/' (OPTIONS, DELETE) -> '/_api/v3/task_template/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/task_template/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/task_template/<object_id>/' (OPTIONS, DELETE) -> '/_api/v3/methodology_template/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/methodology_template/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/methodology_template/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/methodology_template/' (POST, OPTIONS) -> '/_api/v3/methodology_template/' JSON Body of the Task object: { \"name\":\"test\", \"type\":\"TaskGroup\", \"group_type\":\"instance\", \"instance_of\":\"\", \"tCompletedtasks\":0, \"totaltasks\":0 } Reports This API endpoint allows you to create reports from the API and download them: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/reports/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/count/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/countVulns/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/listTemplates/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/reports/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/reports/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/reports/<report_id>/download/' JSON Body of the Reports object: { \"name\":\"Testing-API\", \"tags\":[], \"title\":\"Network XYZ\", \"enterprise\":\"ACMEINC\", \"scope\":\"Scope\", \"objectives\":\"Objetives\", \"summary\":\"Summ\", \"confirmed\":false, \"conclusions\":\"Conclusions\", \"recommendations\":\"Recommendations\", \"vuln_count\":4, \"template_name\":\"generic_default.docx\", \"grouped\":false }","title":"Tasks"},{"location":"API-Server/#vulnerability-template","text":"This API endpoint allows you to change the Vulnerability Template (VulnDB) objects: (HEAD, OPTIONS, GET) -> '/_api/v3/vulnerability_template/' (POST, OPTIONS) -> '/_api/v3/vulnerability_template/' (OPTIONS, DELETE) -> '/_api/v3/vulnerability_template/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/vulnerability_template/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/vulnerability_template/<object_id>/' JSON Body of the Vulnerability Template object: { \"cwe\":\"\", \"description\":\"Test\", \"desc\":\"\", \"exploitation\":\"high\", \"name\":\"Testing API\", \"references\":[], \"refs\":[], \"resolution\":\"\", \"type\":\"vulnerability_template\" } Credentials This API endpoint allows you to change the Credential objects: (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/credential/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/credential/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/credential/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/credential/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/credential/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/credential/count/' JSON Body of the Credentials object: { \"name\":\"Test\", \"username\":\"faraday\", \"password\":\"changeme\", \"type\":\"Cred\", \"parent_type\":\"Host\", \"parent\":\"1147\", \"owner\":\"\", \"description\":\"\" }","title":"Vulnerability Template"},{"location":"API-Server/#activity-feed","text":"This API endpoint allows you to change the Activity Feed (from Dashboard) objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/activities/count/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/commands/activity_feed/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/activities/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/activities/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/activities/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/activities/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/activities/'","title":"Activity Feed"},{"location":"API-Server/#comments","text":"This API endpoint allows you to change the Comment objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/comment/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/comment/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/comment/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/comment/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/comment/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/comment/'","title":"Comments"},{"location":"API-Server/#commands","text":"This API endpoint allows you to change the Commands objects: (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/commands/count/' (OPTIONS, DELETE) -> '/_api/v3/ws/<workspace_name>/commands/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/commands/<object_id>/' (PUT, OPTIONS) -> '/_api/v3/ws/<workspace_name>/commands/<object_id>/' (HEAD, OPTIONS, GET) -> '/_api/v3/ws/<workspace_name>/commands/' (POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/commands/'","title":"Commands"},{"location":"API-Server/#others","text":"(POST, OPTIONS) -> '/_api/v3/ws/<workspace_name>/comment_unique/'","title":"Others:"},{"location":"API-Server/#examples","text":"Assuming that our credentials are: username: faraday password: changeme Login: in order to be able to login through the API, you must supply your credentials and store them in a cookie file just as the following example: curl -s 'http://127.0.0.1:5985/_api/login' \\ -H 'Origin: http://127.0.0.1:5985/' -H 'Accept-Encoding: gzip, deflate, br' \\ -H 'Accept-Language: en-US,en;q=0.9' \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json, text/javascript, */*; q=0.01' \\ -H 'Referer: http://127.0.0.1:5985/' -H 'X-Requested-With: XMLHttpRequest' \\ -H 'Connection: keep-alive' \\ --data-binary '{\"email\":\"faraday\",\"password\": \"changeme\"}' \\ --compressed -c cookie.txt > /dev/null","title":"Examples"},{"location":"API-Server/#creating-a-host-assuming-our-workspace-name-is-test","text":"curl -X POST http://127.0.0.1:5985/_api/v3/ws/test/hosts/ \\ -d '{\"ip\":\"127.0.0.1\",\"hostnames\":[\"testing\"], \"mac\":\"00:00:00:00:00:00\",\"description\":\"Testing API\", \"default_gateway\":\"None\", \"os\":\"Linux\", \"owned\":true, \"owner\":\"\"}' \\ -b cookie.txt \\ -H 'Content-Type: application/json'","title":"Creating a host: assuming our workspace name is test:"},{"location":"API-Server/#getting-a-list-of-hosts","text":"curl -X GET http://127.0.0.1:5985/_api/v3/ws/test/hosts/ -b cookie.txt","title":"Getting a list of hosts:"},{"location":"API-Server/#creating-a-service","text":"curl -X POST http://127.0.0.1:5985/_api/v3/ws/test/services/ \\ -d '{\"name\":\"Test\",\"description\":\"Testing API\", \"owned\":true, \"owner\":\"\",\"ports\":[8080],\"protocol\":\"tcp\",\"parent\":1157,\"status\":\"open\",\"version\":\"\",\"metadata\":{\"update_time\":1533152663.994,\"update_user\":\"\",\"update_action\":0,\"creator\":\"\",\"create_time\":1533152663.994,\"update_controller_action\":\"UI Web New\",\"owner\":\"\"},\"type\":\"Service\"}' \\ -b cookie.txt \\ -H 'Content-Type: application/json'","title":"Creating a service:"},{"location":"API-Server/#creating-a-vuln","text":"curl -X POST http://127.0.0.1:5985/_api/v3/ws/test/vulns/ \\ -d '{\"metadata\":{\"update_time\":1533152883.927, \"update_user\":\"\", \"update_action\":0,\"creator\":\"UI Web\", \"create_time\":1533152883.927, \"update_controller_action\":\"UI Web New\", \"owner\":\"faraday\"}, \"obj_id\":\"\", \"owner\":\"faraday\", \"parent\":1157, \"parent_type\":\"Host\",\"type\":\"Vulnerability\",\"ws\":\"test\",\"confirmed\":true,\"data\":\"\",\"desc\":\"New vulnerability created for API purposes\",\"easeofresolution\":\"simple\",\"impact\":{\"accountability\":false, \"availability\":false, \"confidentiality\":false, \"integrity\":false},\"name\":\"New Vuln - Testing API\",\"owned\":false,\"policyviolations\":[],\"refs\":[], \"resolution\":\"\", \"severity\":\"critical\", \"issuetracker\":\"\", \"status\":\"opened\",\"_attachments\":{},\"description\":\"\",\"protocol\":\"\",\"version\":\"\"}' \\ -b cookie.txt \\ -H 'Content-Type: application/json'","title":"Creating a vuln:"},{"location":"API-Server/#creating-a-user","text":"curl -X POST http://127.0.0.1:5985/_api/v3/users/ \\ -d '{\"name\":\"faraday\", \"password\":\"changeme\", \"roles\":[\"admin\"], \"type\":\"user\", \"role\":\"admin\"}' \\ -b cookie.txt \\ -H 'Content-Type: application/json'","title":"Creating a user:"},{"location":"API-Server/#generating-a-report","text":"curl -X POST http://127.0.0.1:5985/_api/v3/ws/test/reports/ \\ -d '{\"name\":\"Testing-API\",\"tags\":[], \"title\":\"\", \"enterprise\":\"\", \"scope\":\"\", \"objectives\":\"\", \"summary\":\"\", \"confirmed\":false, \"conclusions\":\"\", \"recommendations\":\"\", \"vuln_count\":2, \"template_name\":\"generic_default.docx\", \"grouped\":false}' \\ -b cookie.txt \\ -H 'Content-Type: application/json'","title":"Generating a report:"},{"location":"API-Server/#uploading-a-report","text":"In order to be able to upload a report, you need the CSRF token and session's cookies. To get session's cookie, go to the Status Report and take it from RequestHeaders section of the console. And to get the CSRF token, in the same console, go to the tab Response. On the first --form parameter,put the path of the file that you want to upload. curl -X POST http://127.0.0.1:5985/_api/v3/ws/api/upload_report \\ -H 'Content-Type: multipart/form-data' \\ --cookie \"session=.eJw90M2KwjAQB_BXWXL2YGu9CB6UlGJhpgSCZeZS2FpNJ2YXqkI24rtv18O-wO__8VTdeRpuTm3u02NYqG48qc1TfXyqjWK9SyyUYVsWmMrUWDei9Etsj4FaDKydw-Qj5KZo9CWSNUu2uzXktQM5XSnxyJVZgTaRrYkk-xEt5ZQfVmT3DmcfKvrhcBQUKMgeIoQysb0knjMh-QIEliyQQzJZ0-IV_kx7DWDZY1WPmNCD9Fv1Wqj-Np27-7cfvv4noNTSVCZjXSaYK2KgiLqMTTtX1H7daMpmPnLFgtpHSk7YbN_c4zZM7ztUoV6_3rRiDA.DkoypQ.q7eGzh1oof8dKnbF4q6xD_n1d6o\" \\ --form \"file=@PATH/TO/FILE\" \\ --form \"csrf_token=IjYyYzhkNWQxMzA4MTZmMTQxMTliYTA5OTg2NWYzMWRmYzQ5MWM4Y2Ui.Dko4Zw.sZ-LLdGoxaNFUaySFFQMvyLecxc\" \\ --compressed","title":"Uploading a report:"},{"location":"API-Server/#using-the-api-to-create-a-workspace","text":"Here we provide a Python script using requests to create a new workspace: # -*- coding: utf-8 -*- import click from requests import Session @click . command () @click . option ( '--username' , prompt = True ) @click . option ( '--password' , prompt = True ) @click . option ( '--server_address' , prompt = True , help = 'Faraday server url' , default = 'http://localhost:5985/' ) @click . option ( '--workspace_name' , prompt = True ) def create_workspace ( username , password , server_address , workspace_name ): print ( 'Authentication to server {0} ' . format ( server_address )) session = Session () # authentication to faraday server session . post ( server_address + '/_api/login' , json = { 'email' : 'faraday' , 'password' : 'Password123' }) # create new workspace ws_payload = { \"customer\" : \"\" , \"name\" : workspace_name , \"type\" : \"Workspace\" , \"users\" :[ \"faraday\" ], \"public\" : False , \"children\" :[], \"duration\" :{ \"start_date\" : \"\" , \"end_date\" : \"\" }, \"scope\" :[], \"description\" : \"\" } res = session . post ( server_address + '/_api/v3/ws/' , json = ws_payload ) assert res . status_code == 201 print ( 'Workspace {0} created' . format ( workspace_name )) create_workspace ()","title":"Using the API to create a workspace"},{"location":"API-Server/#using-the-api-to-create-users-in-bulk","text":"curl -s 'http://127.0.0.1:5985/_api/login' \\ -H 'Origin: http://127.0.0.1:5985/' -H 'Accept-Encoding: gzip, deflate, br' \\ -H 'Accept-Language: en-US,en;q=0.9' \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json, text/javascript, */*; q=0.01' \\ -H 'Referer: http://127.0.0.1:5985/' -H 'X-Requested-With: XMLHttpRequest' \\ -H 'Connection: keep-alive' \\ --data-binary '{\"email\":\"faraday\",\"password\": \"changeme\"}' \\ --compressed -c cookie.txt while read -r line ; do curl -X POST http://127.0.0.1:5985/_api/v3/users/ \\ -d '{\"name\":\"' $line '\",\"password\":\"Password123\",\"roles\":[\"client\"],\"type\":\"user\",\"role\":\"client\"}' \\ -H 'Content-Type: application/json' \\ -b cookie.txt done < \"users.txt\"","title":"Using the API to create users in bulk"},{"location":"API-Server/#using-the-api-to-delete-hosts-in-bulk","text":"curl -X DELETE http://127.0.0.1:5985/_api/v3/ws/test/hosts/bulk_delete/ \\ -d '{\"hosts_ids\": [ 1, 2, 3, 4]}' \\ -b cookie.txt \\ -H 'Content-Type: application/json'","title":"Using the API to delete hosts in bulk"},{"location":"API-Server/#upload-evidence-to-a-vulnerability","text":"Remember to change the workspace name in the urls and vuln id to attach evidence. curl -s 'http://127.0.0.1:5985/_api/login' \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json, text/javascript, */*; q=0.01' \\ -H 'Referer: http://127.0.0.1:5985/' -H 'X-Requested-With: XMLHttpRequest' \\ -H 'Connection: keep-alive' \\ --data-binary '{\"email\":\"faraday\",\"password\": \"changeme\"}' \\ --compressed -c cookie.txt","title":"Upload evidence to a Vulnerability"},{"location":"API-Server/#obtain-csrf-token-to-upload-files","text":"csrf_token=$(curl -s -X GET http://127.0.0.1:5985/_api/session -b cookie.txt -c csrf_cookie.txt| python -c \"import sys, json; print json.load(sys.stdin)['csrf_token']\")","title":"obtain csrf token to upload files"},{"location":"API-Server/#upload-the-file-evidencepng","text":"curl 'http://localhost:5985/_api/v3/ws/demo_workspace/vulns/251/attachment/' \\ -H 'Connection: keep-alive' --data-binary $'------WebKitFormBoundary4RCsZGBu1aaCqyxT\\r\\nContent-Disposition: form-data;name=\"csrf_token\"\\r\\n\\r\\$csrf_token\\r\\n------WebKitFormBoundary4RCsZGBu1aaCqyxT\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"evidence.png\"\\r\\nContent-Type: image/png\\r\\n\\r\\n\\r\\n------WebKitFormBoundary4RCsZGBu1aaCqyxT--\\r\\n' \\ --compressed -c csrf_cookie.txt","title":"Upload the file evidence.png"},{"location":"API-Server/#upload-reports-xml-results-from-tools-using-curl","text":"Please check the URLs and use the correct workspace name! curl -s 'http://127.0.0.1:5985/_api/login' \\ -H 'Origin: http://127.0.0.1:5985/' -H 'Accept-Encoding: gzip, deflate, br' \\ -H 'Accept-Language: en-US,en;q=0.9' \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json, text/javascript, */*; q=0.01' \\ -H 'Referer: http://127.0.0.1:5985/' -H 'X-Requested-With: XMLHttpRequest' \\ -H 'Connection: keep-alive' \\ --data-binary '{\"email\":\"faraday\",\"password\": \"changeme\"}' \\ --compressed -c cookie.txt csrf_token = $( curl -s -X GET http://127.0.0.1:5985/_api/session -b cookie.txt -c csrf_cookie.txt | python -c \"import sys, json; print json.load(sys.stdin)['csrf_token']\" ) echo $csrf_token echo \";currentUrl=%2Fstatus%2Fws%2Ftest1; currentComponent=status\" >> cookie.txt curl -i -v http://127.0.0.1:5985/_api/v3/ws/test1/upload_report \\ -H \"Connection: keep-alive\" \\ -H \"Pragma: no-cache\" \\ -H \"Cache-Control: no-cache\" \\ -H \"Accept: application/json, text/plain, */*\" \\ -H \"Origin: http://127.0.0.1:5985/\" \\ -H \"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36\" \\ -H \"Content-Type: multipart/form-data\" \\ -H \"Referer: http://127.0.0.1:5985/\" \\ -H \"Accept-Encoding: gzip, deflate, br\" \\ -H \"Accept-Language: en-US,en;q=0.9,es;q=0.8\" \\ --form \"csrf_token= $csrf_token \" \\ --form \"file=@/PATH/TO/FILE\" \\ -b csrf_cookie.txt","title":"Upload reports (XML results from tools) using curl"},{"location":"API-Token/","text":"Upon faraday v3.9 we included an API Token for our api. The token for the API will expire when the user changes the password. You can configure token expiration in the [server] section of the configuration with the option api_token_expiration expressed in seconds. Token expires by timeout or when the user changes the password. Each token is associated to the user who requests the token. This is a example request of how to obtain a token curl --user USER:PASSWORD http://localhost:5985/_api/v3/token/ \"eyJhbGciOiJIUzUxMiIsImlhdCI6MTYxOTAzMTU3OCwiZXhwIjoxNjIxNjIxNzc4fQ.eyJ1c2VyX2lkIjoiZjNjYTUyNjYtOWU2ZS00NzQwLWI0NWItN2Y2M2JkZWMzN2UwIiwidmFsaWRhdGlvbl9jaGVjayI6IiQ1JHJvdW5kcz01MzUwMDAkVDZ3cy9ZMGFHUW10UnEzSSRpRS5OSG1oaDNWR0h4VXIudVpRNGRnaEVVUXFiS09pWGg5VGdrTURtQXIwIn0.gu6AgQ-iIvdnrHBphBfzWopn5B21D_RvTFvltcoMnksAj0eHhfh7dkJW4GfjhZPQd02RBAsb3vvUUCA0fORvfw\" Now that you got the auth token you can start using it on every request to the api: curl 'http://localhost:5985/_api/v3/ws/' -H 'Authorization:Token AUTH_TOKEN' -H 'Content-Type: application/json' import requests session = requests . Session () user = 'faraday' password = 'yourpassword' session . auth = ( user , password ) auth = session . post ( 'https://localhost:5985/_api/v3/token' ) response = session . get ( 'https://localhost5985/_api/v3/token' ) print ( response . text ) ## now the token is in response","title":"API Token"},{"location":"Activity-Dashboard/","text":"Activity Dashboard \u00b6 Activity dashboard provides a quick view with graphics and an Activity Feed that will display in an effective view all the changes and stats for the workspace. The Central view Vulnerabilities by Severities provides a New Filter that will allow to display confirmed or not closed Vulnerabilities, to show an overall but modifying the scope. There are new Latest tags also linked to the vuln view to quickly access to some tag from the activity dashboard. Comments will show all the latest comments in a selected Workspace","title":"Activity Dashboard"},{"location":"Activity-Dashboard/#activity-dashboard","text":"Activity dashboard provides a quick view with graphics and an Activity Feed that will display in an effective view all the changes and stats for the workspace. The Central view Vulnerabilities by Severities provides a New Filter that will allow to display confirmed or not closed Vulnerabilities, to show an overall but modifying the scope. There are new Latest tags also linked to the vuln view to quickly access to some tag from the activity dashboard. Comments will show all the latest comments in a selected Workspace","title":"Activity Dashboard"},{"location":"Analysis/","text":"Analysis (V3 Deprecated) \u00b6 As Faraday allows you to keep all of your pentests in one place, we thought it would be interesting to add the possibility to see your assessments come to life. These charts allow you to find new relations between your data and clarify the state of an assessment. We will also add new charts in the future, and the possibility to customize them as well! As an example, this is how some of the current reports look: Tools findings by severity and targets. Vulnerability severity cluster. Severity timeline. Service vulnerability timeline. Target severity pie charts. OS severity pie charts. Severity by tool boxplot. Total vulnerability correlation with price by each OS. Vulnerability by type chart, ease of resolution and os. Vulnerability by year tree. You can also download the charts as PNG or SVG format to include them in your custom reports. Some Example charts:","title":"Analysis (V3 Deprecated)"},{"location":"Analysis/#analysis-v3-deprecated","text":"As Faraday allows you to keep all of your pentests in one place, we thought it would be interesting to add the possibility to see your assessments come to life. These charts allow you to find new relations between your data and clarify the state of an assessment. We will also add new charts in the future, and the possibility to customize them as well! As an example, this is how some of the current reports look: Tools findings by severity and targets. Vulnerability severity cluster. Severity timeline. Service vulnerability timeline. Target severity pie charts. OS severity pie charts. Severity by tool boxplot. Total vulnerability correlation with price by each OS. Vulnerability by type chart, ease of resolution and os. Vulnerability by year tree. You can also download the charts as PNG or SVG format to include them in your custom reports. Some Example charts:","title":"Analysis (V3 Deprecated)"},{"location":"Architecture/","text":"Technical introduction \u00b6 Faraday is a web application, the Server is made with python using Flask and the frontend is made with AngularJS ( we are moving to ReactJS ). It is deployed as a standard WSGI application. Its possible to interact with the Server using Faraday CLI and you can automatize tool usage with Faraday agent . The data is persisted within a PostgreSQL database, processed with python libraries as SQLAlchemy and Marshmallow. The server has other main components as the Report Processor , or the Websocket Server. The latter provides information to the CLI and the Agents. Faraday CLI \u00b6 Faraday CLI provides an interface for interacting with a terminal that allows the user to execute commands which results will be loaded inside Faraday Server. The CLI also allows the user to upload tool reports, create workspaces and configure your instance. Faraday Agent \u00b6 The Faraday Agents allows to automate the upload of different data to the server, such as integration with other applications or services; or execute some tools that the Faraday plugins can process. Moreover, the Agents can be executed on any remote computer and its Executors can be written in any language. Burp / Zap Addons \u00b6 Faraday has Burp / Zap Extensions that run inside the third party application. Using Faraday addons provides flexibility to ingress information inside Faraday Server from other applications. Appendix \u00b6 Database schema \u00b6 Faraday manage command can generate the current database schema with: faraday-manage database-schema frontend server faraday_client faraday_agent_dispatcher faraday_agent_parameters_types api_docs faraday_plugins burp_addon zap_addon","title":"Arch"},{"location":"Architecture/#technical-introduction","text":"Faraday is a web application, the Server is made with python using Flask and the frontend is made with AngularJS ( we are moving to ReactJS ). It is deployed as a standard WSGI application. Its possible to interact with the Server using Faraday CLI and you can automatize tool usage with Faraday agent . The data is persisted within a PostgreSQL database, processed with python libraries as SQLAlchemy and Marshmallow. The server has other main components as the Report Processor , or the Websocket Server. The latter provides information to the CLI and the Agents.","title":"Technical introduction"},{"location":"Architecture/#faraday-cli","text":"Faraday CLI provides an interface for interacting with a terminal that allows the user to execute commands which results will be loaded inside Faraday Server. The CLI also allows the user to upload tool reports, create workspaces and configure your instance.","title":"Faraday CLI"},{"location":"Architecture/#faraday-agent","text":"The Faraday Agents allows to automate the upload of different data to the server, such as integration with other applications or services; or execute some tools that the Faraday plugins can process. Moreover, the Agents can be executed on any remote computer and its Executors can be written in any language.","title":"Faraday Agent"},{"location":"Architecture/#burp-zap-addons","text":"Faraday has Burp / Zap Extensions that run inside the third party application. Using Faraday addons provides flexibility to ingress information inside Faraday Server from other applications.","title":"Burp / Zap Addons"},{"location":"Architecture/#appendix","text":"","title":"Appendix"},{"location":"Architecture/#database-schema","text":"Faraday manage command can generate the current database schema with: faraday-manage database-schema frontend server faraday_client faraday_agent_dispatcher faraday_agent_parameters_types api_docs faraday_plugins burp_addon zap_addon","title":"Database schema"},{"location":"Assets-and-Services-v4/","text":"You can manage your Assets and their associated Services by accessing the Hosts View in the Manage section through the Faraday Web UI . How to Manage Hosts \u00b6 Create an Asset \u00b6 From the Assets View, click Add Asset and fill out the form The only mandatory field is IP v4 or v6 Edit an Asset \u00b6 From the Assets View, click on the Asset IP field The services list will be displayed and on the left side you click on Edit button to add or modify details (hostnames, MAC address, owned, OS, description) Delete an Asset \u00b6 From the Assets View, select one or more assets and click Delete How to Manage Services \u00b6 To manage services for an specific asset, click on the asset IP field you would like to make changes The services associated to the asset will be displayed, you can also see how many vulnerabilites again each service Create a Service \u00b6 From the Services window, click New and fill out the form Name , Port and Protocol fields are mandatory Edit a Service \u00b6 From the Services window, select the service and click Edit","title":"Assets and Services"},{"location":"Assets-and-Services-v4/#how-to-manage-hosts","text":"","title":"How to Manage Hosts"},{"location":"Assets-and-Services-v4/#create-an-asset","text":"From the Assets View, click Add Asset and fill out the form The only mandatory field is IP v4 or v6","title":"Create an Asset"},{"location":"Assets-and-Services-v4/#edit-an-asset","text":"From the Assets View, click on the Asset IP field The services list will be displayed and on the left side you click on Edit button to add or modify details (hostnames, MAC address, owned, OS, description)","title":"Edit an Asset"},{"location":"Assets-and-Services-v4/#delete-an-asset","text":"From the Assets View, select one or more assets and click Delete","title":"Delete an Asset"},{"location":"Assets-and-Services-v4/#how-to-manage-services","text":"To manage services for an specific asset, click on the asset IP field you would like to make changes The services associated to the asset will be displayed, you can also see how many vulnerabilites again each service","title":"How to Manage Services"},{"location":"Assets-and-Services-v4/#create-a-service","text":"From the Services window, click New and fill out the form Name , Port and Protocol fields are mandatory","title":"Create a Service"},{"location":"Assets-and-Services-v4/#edit-a-service","text":"From the Services window, select the service and click Edit","title":"Edit a Service"},{"location":"Backup-v4/","text":"Saving backups is always a good choice, whether it is to keep data safe or to share with others. Faraday configuration and evidence backup \u00b6 Faraday server stores configuration, processed reports and saves evidence in the directory /home/faraday/.faraday . Remember to do a backup of this directory of the user running faraday-server. Database backup \u00b6 In order to create a backup for your database, follow these steps: Stop Faraday Server. sudo service faraday-service stop In order to backup your Faraday database, execute the PostgreSQL tool: sudo pg_dump faraday > backup_file Where faraday is the default name of Faraday's database and backup_file is the file where the pg_dump will save your data. Start the Faraday Server sudo service faraday-service start Database restore \u00b6 To restore a previously created backup turn again Faraday Server off and execute: sudo service faraday-service stop sudo psql faraday < backup_file sudo service faraday-service start Remember To restore the backup you need to have the database empty. For more information about PostgreSQL Backup follow this link","title":"Backup"},{"location":"Backup-v4/#faraday-configuration-and-evidence-backup","text":"Faraday server stores configuration, processed reports and saves evidence in the directory /home/faraday/.faraday . Remember to do a backup of this directory of the user running faraday-server.","title":"Faraday configuration and evidence backup"},{"location":"Backup-v4/#database-backup","text":"In order to create a backup for your database, follow these steps: Stop Faraday Server. sudo service faraday-service stop In order to backup your Faraday database, execute the PostgreSQL tool: sudo pg_dump faraday > backup_file Where faraday is the default name of Faraday's database and backup_file is the file where the pg_dump will save your data. Start the Faraday Server sudo service faraday-service start","title":"Database backup"},{"location":"Backup-v4/#database-restore","text":"To restore a previously created backup turn again Faraday Server off and execute: sudo service faraday-service stop sudo psql faraday < backup_file sudo service faraday-service start Remember To restore the backup you need to have the database empty. For more information about PostgreSQL Backup follow this link","title":"Database restore"},{"location":"Basic-plugin-development/","text":"In this guide we are going to learn how to develop a new plugin for Faraday. Configure Custom Plugins \u00b6 To add custom plugins in faraday, you first need to run this command: faraday-manage settings -a update reports Create Plugin structure \u00b6 Create the folder new_plugin inside the custom_plugins folder and add the following files inside the new_plugin folder: Plugin Structure: new_plugin/ __init__.py # leave this file empty plugin.py Warning Please respect both file names: __init__.py and plugin.py Plugin code \u00b6 There are two types of plugins: File plugins (plugins that process the contents of a file) Command plugins (plugins that process the execution of a command) A faraday plugin can be either or both of these types. For example the ping plugin only process the execution of the command, but the nmap command supports both the xml generated by nmap or process the execution of nmap. In your plugin.py file you must provide a function called createPlugin for the plugin manager to instantiate the plugin def createPlugin(ignore_info=False, hostname_resolution=True): return YourPluginClass(ignore_info=ignore_info) Plugin classes \u00b6 PluginBase is the base class. For File plugins we provide all this classes. But you can add other by creating a subclass of PluginByExtension PluginBase PluginByExtension PluginXMLFormat PluginJsonFormat PluginMultiLineJsonFormat PluginCSVFormat PluginZipFormat For Command plugins only you must inherit from PluginBase Your plugin class __init__ method must define the id , that will be the identifier of your plugin. Here's an example of the Ping tool plugin: class CmdPingPlugin ( PluginBase ): def __init__ ( self , * arg , ** kwargs ): super () . __init__ ( * arg , ** kwargs ) self . id = \"ping\" self . name = \"Ping\" self . plugin_version = \"0.0.1\" self . version = \"1.0.0\" self . _command_regex = re . compile ( r '^(sudo ping|ping|sudo ping6|ping6)\\s+.*?' ) Beware that it must be unique, you can list all the plugins identifiers with this command: faraday-plugins list-plugins File Plugins \u00b6 Each of the subclasses for File plugins provide a different way for the plugin to detect if it can process the file PluginByExtension: \u00b6 This class adds the functionality for identify a file by its extension by setting the attribute extension . It can be one extension ( \".xml\" ) or a list ( ['.xml', '.xxx'] ) if your file can have multiple extensions. You never inherit directly from this class in a plugin but from some of its subclasses that are more specific. class ExampleXMLTool(PluginByExtension): def __init__(self): super().__init__() self.extension = \".xml\" PluginXMLFormat: \u00b6 Use this class if the plugin generates vulnerabilities from a xml file. If your report has xml format but a different extension (like nessus), remember to define the extension attribute To identify the file set in the identifier_tag attribute the main tag of the xml (ScanGroup in the example), it also can be one tag or a list of tags. You can also set the identifier_tag_attributes attribute, it is a set of attributes that the main tag must have. This is used to be more specific for example if the main tag is too generic and the xml of other plugin has the same one. Example XML <?xml version=\"1.0\"?> <ScanGroup ExportedOn= \"2021-11-05T11:18:57.673843\" > <Scan> </Scan> </ScanGroup> from urllib.parse import urlparse from faraday_plugins.plugins.plugin import PluginXMLFormat import xml.etree.ElementTree as ET class ExampleToolXmlParser : def __init__ ( self , xml_output ): self . vulns = self . parse_xml ( xml_output ) def parse_xml ( self , xml_output ): vulns = [] tree = ET . fromstring ( xml_output ) items = tree . iterfind ( 'details/item' ) for item in items : ip = item . get ( 'ip' ) os = item . get ( 'os' ) uri = item . find ( 'uri' ) . text url = urlparse ( uri ) hostname = [ url . netloc ] path = url . path if url . scheme == 'https' : port = 443 else : port = 80 issue = item . find ( 'issue' ) severity = issue . get ( 'severity' ) issue_text = issue . text vuln = { 'ip' : ip , 'uri' : uri , 'os' : os , 'hostname' : hostname , 'port' : port , 'path' : path , 'issue_text' : issue_text , 'severity' : severity } vulns . append ( vuln ) return vulns class ExampleToolPlugin ( PluginXMLFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . identifier_tag = \"example_tool\" self . id = \"example_tool\" self . name = \"Name of the tool\" self . plugin_version = \"0.0.1\" def parseOutputString ( self , output , debug = False ): parser = ExampleToolXmlParser ( output ) for vuln in parser . vulns : h_id = self . createAndAddHost ( vuln [ 'ip' ], vuln [ 'os' ], hostnames = vuln [ 'hostname' ]) s_id = self . createAndAddServiceToHost ( h_id , 'webserver' , protocol = 'tcp' , ports = vuln [ 'port' ]) v_id = self . createAndAddVulnWebToService ( h_id , s_id , vuln [ 'issue_text' ], severity = vuln [ 'severity' ], path = vuln [ 'path' ]) def createPlugin ( ignore_info = False , hostname_resolution = True ): return ExampleToolPlugin ( ignore_info = ignore_info ) PluginJsonFormat: \u00b6 Use this class if the plugin generates vulnerabilities from a json file. If yor report has json format but a different extension (not .json), remember to define the extension attribute To identify the file set in the json_keys attribute a set with some identifiers keys of the json object Example JSON { \"name\" : \"some name\" , \"hosts\" : [ \"host1\" , \"host2\" ], \"other_field\" : \"some value\" } class ExampleJsonTool ( PluginJsonFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . json_keys = { 'name' , 'hosts' } PluginMultiLineJsonFormat: \u00b6 Is the same as PluginJsonFormat but use it when the file has multiple lines and every line is a json. Example JSON { \"name\": \"some name\", \"hosts\": [\"host1\", \"host2\"],\"other_field\": \"some value\"} { \"name\": \"other name\", \"hosts\": [\"host3\", \"host4\"],\"other_field\": \"other value\"} class ExampleMultipleJsonTool ( PluginMultiLineJsonFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . json_keys = { 'name' , 'hosts' } PluginCSVFormat: \u00b6 Use this class if the plugin generates vulnerabilities from a csv file. If yor report has csv format but a different extension (not .csv), remember to define the extension attribute To identify the file set in the csv_headers attribute a set with some identifiers headers of the csv object Example CSV name,ip,os host1,10.10.10.10,windows host2,10.10.10.11,linux class ExampleCSVTool ( PluginCSVFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . json_keys = { 'name' , 'ip' } PluginZipFormat: \u00b6 Use this class if the plugin generates vulnerabilities from a zip file. If yor report has csv format but a different extension (not .zip), remember to define the extension attribute To identify the file set in the files_list attribute a set with some file names inside the zip file. class ExampleJsonTool ( PluginZipFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . files_list = { 'file1.txt' , 'file2.txt' } Generating data \u00b6 The PluginBase class give you all the main methods to create hosts, services and vulnerabilities After you parse the data you will need to create the objects with the information to send to faraday. This are the main methods def createAndAddHost ( self , name , os = \"unknown\" , hostnames = None , mac = None , scan_template = \"\" , site_name = \"\" , site_importance = \"\" , risk_score = \"\" , fingerprints = \"\" , fingerprints_software = \"\" ): def createAndAddServiceToHost ( self , host_id , name , protocol = \"tcp?\" , ports = None , status = \"open\" , version = \"unknown\" , description = \"\" ): def createAndAddVulnToHost ( self , host_id , name , desc = \"\" , ref = None , severity = \"\" , resolution = \"\" , vulnerable_since = \"\" , scan_id = \"\" , pci = \"\" , data = \"\" , external_id = None , run_date = None ): def createAndAddVulnToService ( self , host_id , service_id , name , desc = \"\" , ref = None , severity = \"\" , resolution = \"\" , risk = \"\" , data = \"\" , external_id = None , run_date = None ): def createAndAddVulnWebToService ( self , host_id , service_id , name , desc = \"\" , ref = None , severity = \"\" , resolution = \"\" , website = \"\" , path = \"\" , request = \"\" , response = \"\" , method = \"\" , pname = \"\" , params = \"\" , query = \"\" , category = \"\" , data = \"\" , external_id = None , run_date = None ): createAndAddHost and createAndAddServiceToHost will give you a host ID and a service ID. You need to send those to the create vulnerabilities methods The main method to parse data and create the vulnerabilities objects is parseOutputString , no mather if is a File or a Command plugin. Command Plugins \u00b6 For command plugins the detection is done via regex. If the plugin is only for command you inherit from PluginBase if it also will support file detection inherit from the appropriate class for that type of file. In both cases to detect a command you will need to set the _command_regex attribute with the regex to match the command Here's an example of the Ping tool plugin: class CmdPingPlugin ( PluginBase ): def __init__ ( self , * arg , ** kwargs ): super () . __init__ ( * arg , ** kwargs ) self . id = \"ping\" self . name = \"Ping\" self . plugin_version = \"0.0.1\" self . version = \"1.0.0\" self . _command_regex = re . compile ( r '^(sudo ping|ping|sudo ping6|ping6)\\s+.*?' ) def parseOutputString ( self , output ): reg = re . search ( r \"PING ([\\w\\.-:]+)( |)\\(([\\w\\.:]+)\\)\" , output ) if re . search ( \"0 received|unknown host\" , output ) is None and reg is not None : ip_address = reg . group ( 3 ) hostname = reg . group ( 1 ) self . createAndAddHost ( ip_address , hostnames = [ hostname ]) return True def _isIPV4 ( self , ip ): if len ( ip . split ( \".\" )) == 4 : return True else : return False In this case the plugin manager will run the command and send the output to the parseOutputString method. But if the tool generate an ouput file instead of send the data to stdout you will need to check that the command has the required parameters to do that. To do that you will need to implement the processCommandString method, by default it will return the command without modifications. To use output files you will need to set 2 attributes in you plugin: _use_temp_file and _temp_file_extension If _use_temp_file is set the plugin will create a temp file and assign its path to the attribute self._output_file_path of the plugin. If you need that the temp file has and specific extension use the _temp_file_extension attribute like in the example. If the _use_temp_file attribute is set the plugin will send te content of that file to parseOutputString() instead of the output of the command. Here is and extract of the nmap plugin to see how processCommandString will modify the original command and return a new command with the required parameters. class NmapPlugin ( PluginXMLFormat ): \"\"\" Example plugin to parse nmap output. \"\"\" def __init__ ( self , * arg , ** kwargs ): super () . __init__ ( * arg , ** kwargs ) self . identifier_tag = \"nmaprun\" self . id = \"Nmap\" self . name = \"Nmap XML Output Plugin\" self . plugin_version = \"0.0.3\" self . version = \"6.40\" self . framework_version = \"1.0.0\" self . options = None self . _current_output = None self . _command_regex = re . compile ( r '^(sudo nmap|nmap|\\.\\/nmap)\\s+.*?' ) self . _use_temp_file = True self . _temp_file_extension = \"xml\" self . xml_arg_re = re . compile ( r \"^.*(-oX\\s*[^\\s]+).*$\" ) self . addSetting ( \"Scan Technique\" , str , \"-sS\" ) def parseOutputString ( self , output ): ... def processCommandString ( self , username , current_path , command_string ): \"\"\" Adds the -oX parameter to get xml output to the command string that the user has set. \"\"\" super () . processCommandString ( username , current_path , command_string ) arg_match = self . xml_arg_re . match ( command_string ) if arg_match is None : return re . sub ( r \"(^.*?nmap)\" , r \"\\1 -oX %s \" % self . _output_file_path , command_string ) else : return re . sub ( arg_match . group ( 1 ), r \"-oX %s \" % self . _output_file_path , command_string ) Full Example \u00b6 File Plugin from XML This is an example of a Faraday Plugin that process a xml report. In this example we will create a plugin to analyze this XML provided by the output of a tool. example.xml <?xml version=\"1.0\" ?> <!DOCTYPE example_tool> <example_tool scanstart= \"Thu Nov 9 15:59:13 2017\" > <details> <item id= \"999979\" ip= \"10.23.49.232\" os= \"linux\" > <uri> http://test.com/example.php </uri> <issue severity= \"low\" > Some vuln text </issue> </item> <item id= \"39023023\" ip= \"10.232.62.20\" os= \"linux\" > <uri> http://test.com/login.php </uri> <issue severity= \"low\" > Some other text </issue> </item> <item id= \"8348343\" ip= \"10.12.37.24\" os= \"linux\" > <uri> http://test.com/example.php </uri> <issue severity= \"low\" > Yet another vuln text </issue> </item> <statistics elapsed= \"402\" itemsfound= \"3\" itemstested= \"10\" /> </details> </example_tool> plugin.py from urllib.parse import urlparse from faraday_plugins.plugins.plugin import PluginXMLFormat import xml.etree.ElementTree as ET class ExampleToolXmlParser : def __init__ ( self , xml_output ): self . vulns = self . parse_xml ( xml_output ) def parse_xml ( self , xml_output ): vulns = [] tree = ET . fromstring ( xml_output ) items = tree . iterfind ( 'details/item' ) for item in items : ip = item . get ( 'ip' ) os = item . get ( 'os' ) uri = item . find ( 'uri' ) . text url = urlparse ( uri ) hostname = [ url . netloc ] path = url . path if url . scheme == 'https' : port = 443 else : port = 80 issue = item . find ( 'issue' ) severity = issue . get ( 'severity' ) issue_text = issue . text vuln = { 'ip' : ip , 'uri' : uri , 'os' : os , 'hostname' : hostname , 'port' : port , 'path' : path , 'issue_text' : issue_text , 'severity' : severity } vulns . append ( vuln ) return vulns class ExampleToolPlugin ( PluginXMLFormat ): def __init__ ( self ): super () . __init__ () self . identifier_tag = \"example_tool\" self . id = \"example_tool\" self . name = \"Name of the tool\" self . plugin_version = \"0.0.1\" def parseOutputString ( self , output , debug = False ): parser = ExampleToolXmlParser ( output ) for vuln in parser . vulns : h_id = self . createAndAddHost ( vuln [ 'ip' ], vuln [ 'os' ], hostnames = vuln [ 'hostname' ]) s_id = self . createAndAddServiceToHost ( h_id , 'webserver' , protocol = 'tcp' , ports = vuln [ 'port' ]) v_id = self . createAndAddVulnWebToService ( h_id , s_id , vuln [ 'issue_text' ], severity = vuln [ 'severity' ], path = vuln [ 'path' ]) def createPlugin ( ignore_info = False , hostname_resolution = True ): return ExampleToolXmlParser ( ignore_info = ignore_info ) Test and Debug \u00b6 You can test your plugin by enabling the custom_plugins_folder setting, and try it with faraday. You can also test your plugin from the command line. Test Plugins \u00b6 List all available plugins Verify that the plugins is loaded by the plugin manager faraday-plugins list-plugins Available Plugins: ... ... ... example_tool - Name of the tool Loaded Plugins: 84 Test plugin report detection Verify that your file is detected by your plugin faraday-plugins detect-report /path/to/report.xml Plugin: example_tool Test plugin process report Verify that your plugin parses the file ok and generate the json structure that will be loaded into faraday faraday-plugins process-report /path/to/report.xml {\"hosts\": [{\"ip\": \"10.23.49.232\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Some vuln text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/example.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}, {\"ip\": \"10.232.62.20\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Some other text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/login.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}, {\"ip\": \"10.12.37.24\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Yet another vuln text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/example.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}], \"command\": {\"tool\": \"example_tool\", \"command\": \"example_tool\", \"params\": \"/path/to/report.xml\", \"user\": \"faraday\", \"hostname\": \"\", \"start_date\": \"2020-04-01T18:43:34.552623\", \"duration\": 2650, \"import_source\": \"report\"}} You can optionally specify the plugin id to not do the detection step and force to process it with the specific plugin faraday-plugins process-report --plugin_id YourPluginId /path/to/report.xml {\"hosts\": [{\"ip\": \"10.23.49.232\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Some vuln text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/example.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}, {\"ip\": \"10.232.62.20\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Some other text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/login.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}, {\"ip\": \"10.12.37.24\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Yet another vuln text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/example.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}], \"command\": {\"tool\": \"example_tool\", \"command\": \"example_tool\", \"params\": \"/path/to/report.xml\", \"user\": \"faraday\", \"hostname\": \"\", \"start_date\": \"2020-04-01T18:43:34.552623\", \"duration\": 2650, \"import_source\": \"report\"}} If you do not have faraday-server installed or don't have the custom_plugins_folder setting, you can use the --custom_plugins_folder parameter with any if the commands (list, detect and process) Example: faraday-plugins list-plugins --custom-plugins-folder /home/user/.faraday/plugins/ Logging \u00b6 In the PluginBase there is a logger defined in self.logger that you can use. If you need to debug for plugins with the command line set this variable: export PLUGIN_DEBUG=1 faraday-plugins process-report appscan /path/to/report.xml 2019-11-15 20:37:03,355 - faraday.faraday_plugins.plugins.manager - INFO [manager.py:113 - _load_plugins()] Loading Native Plugins... 2019-11-15 20:37:03,465 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [acunetix] 2019-11-15 20:37:03,495 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [amap] 2019-11-15 20:37:03,549 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [appscan] 2019-11-15 20:37:03,580 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [arachni] 2019-11-15 20:37:03,613 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [arp_scan] 2019-11-15 20:37:03,684 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [beef] 2019-11-15 20:37:03,714 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [brutexss] 2019-11-15 20:37:03,917 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [burp] 2019-11-15 20:37:03,940 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [dig] ...","title":"Plugin Development"},{"location":"Basic-plugin-development/#configure-custom-plugins","text":"To add custom plugins in faraday, you first need to run this command: faraday-manage settings -a update reports","title":"Configure Custom Plugins"},{"location":"Basic-plugin-development/#create-plugin-structure","text":"Create the folder new_plugin inside the custom_plugins folder and add the following files inside the new_plugin folder: Plugin Structure: new_plugin/ __init__.py # leave this file empty plugin.py Warning Please respect both file names: __init__.py and plugin.py","title":"Create Plugin structure"},{"location":"Basic-plugin-development/#plugin-code","text":"There are two types of plugins: File plugins (plugins that process the contents of a file) Command plugins (plugins that process the execution of a command) A faraday plugin can be either or both of these types. For example the ping plugin only process the execution of the command, but the nmap command supports both the xml generated by nmap or process the execution of nmap. In your plugin.py file you must provide a function called createPlugin for the plugin manager to instantiate the plugin def createPlugin(ignore_info=False, hostname_resolution=True): return YourPluginClass(ignore_info=ignore_info)","title":"Plugin code"},{"location":"Basic-plugin-development/#plugin-classes","text":"PluginBase is the base class. For File plugins we provide all this classes. But you can add other by creating a subclass of PluginByExtension PluginBase PluginByExtension PluginXMLFormat PluginJsonFormat PluginMultiLineJsonFormat PluginCSVFormat PluginZipFormat For Command plugins only you must inherit from PluginBase Your plugin class __init__ method must define the id , that will be the identifier of your plugin. Here's an example of the Ping tool plugin: class CmdPingPlugin ( PluginBase ): def __init__ ( self , * arg , ** kwargs ): super () . __init__ ( * arg , ** kwargs ) self . id = \"ping\" self . name = \"Ping\" self . plugin_version = \"0.0.1\" self . version = \"1.0.0\" self . _command_regex = re . compile ( r '^(sudo ping|ping|sudo ping6|ping6)\\s+.*?' ) Beware that it must be unique, you can list all the plugins identifiers with this command: faraday-plugins list-plugins","title":"Plugin classes"},{"location":"Basic-plugin-development/#file-plugins","text":"Each of the subclasses for File plugins provide a different way for the plugin to detect if it can process the file","title":"File Plugins"},{"location":"Basic-plugin-development/#pluginbyextension","text":"This class adds the functionality for identify a file by its extension by setting the attribute extension . It can be one extension ( \".xml\" ) or a list ( ['.xml', '.xxx'] ) if your file can have multiple extensions. You never inherit directly from this class in a plugin but from some of its subclasses that are more specific. class ExampleXMLTool(PluginByExtension): def __init__(self): super().__init__() self.extension = \".xml\"","title":"PluginByExtension:"},{"location":"Basic-plugin-development/#pluginxmlformat","text":"Use this class if the plugin generates vulnerabilities from a xml file. If your report has xml format but a different extension (like nessus), remember to define the extension attribute To identify the file set in the identifier_tag attribute the main tag of the xml (ScanGroup in the example), it also can be one tag or a list of tags. You can also set the identifier_tag_attributes attribute, it is a set of attributes that the main tag must have. This is used to be more specific for example if the main tag is too generic and the xml of other plugin has the same one. Example XML <?xml version=\"1.0\"?> <ScanGroup ExportedOn= \"2021-11-05T11:18:57.673843\" > <Scan> </Scan> </ScanGroup> from urllib.parse import urlparse from faraday_plugins.plugins.plugin import PluginXMLFormat import xml.etree.ElementTree as ET class ExampleToolXmlParser : def __init__ ( self , xml_output ): self . vulns = self . parse_xml ( xml_output ) def parse_xml ( self , xml_output ): vulns = [] tree = ET . fromstring ( xml_output ) items = tree . iterfind ( 'details/item' ) for item in items : ip = item . get ( 'ip' ) os = item . get ( 'os' ) uri = item . find ( 'uri' ) . text url = urlparse ( uri ) hostname = [ url . netloc ] path = url . path if url . scheme == 'https' : port = 443 else : port = 80 issue = item . find ( 'issue' ) severity = issue . get ( 'severity' ) issue_text = issue . text vuln = { 'ip' : ip , 'uri' : uri , 'os' : os , 'hostname' : hostname , 'port' : port , 'path' : path , 'issue_text' : issue_text , 'severity' : severity } vulns . append ( vuln ) return vulns class ExampleToolPlugin ( PluginXMLFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . identifier_tag = \"example_tool\" self . id = \"example_tool\" self . name = \"Name of the tool\" self . plugin_version = \"0.0.1\" def parseOutputString ( self , output , debug = False ): parser = ExampleToolXmlParser ( output ) for vuln in parser . vulns : h_id = self . createAndAddHost ( vuln [ 'ip' ], vuln [ 'os' ], hostnames = vuln [ 'hostname' ]) s_id = self . createAndAddServiceToHost ( h_id , 'webserver' , protocol = 'tcp' , ports = vuln [ 'port' ]) v_id = self . createAndAddVulnWebToService ( h_id , s_id , vuln [ 'issue_text' ], severity = vuln [ 'severity' ], path = vuln [ 'path' ]) def createPlugin ( ignore_info = False , hostname_resolution = True ): return ExampleToolPlugin ( ignore_info = ignore_info )","title":"PluginXMLFormat:"},{"location":"Basic-plugin-development/#pluginjsonformat","text":"Use this class if the plugin generates vulnerabilities from a json file. If yor report has json format but a different extension (not .json), remember to define the extension attribute To identify the file set in the json_keys attribute a set with some identifiers keys of the json object Example JSON { \"name\" : \"some name\" , \"hosts\" : [ \"host1\" , \"host2\" ], \"other_field\" : \"some value\" } class ExampleJsonTool ( PluginJsonFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . json_keys = { 'name' , 'hosts' }","title":"PluginJsonFormat:"},{"location":"Basic-plugin-development/#pluginmultilinejsonformat","text":"Is the same as PluginJsonFormat but use it when the file has multiple lines and every line is a json. Example JSON { \"name\": \"some name\", \"hosts\": [\"host1\", \"host2\"],\"other_field\": \"some value\"} { \"name\": \"other name\", \"hosts\": [\"host3\", \"host4\"],\"other_field\": \"other value\"} class ExampleMultipleJsonTool ( PluginMultiLineJsonFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . json_keys = { 'name' , 'hosts' }","title":"PluginMultiLineJsonFormat:"},{"location":"Basic-plugin-development/#plugincsvformat","text":"Use this class if the plugin generates vulnerabilities from a csv file. If yor report has csv format but a different extension (not .csv), remember to define the extension attribute To identify the file set in the csv_headers attribute a set with some identifiers headers of the csv object Example CSV name,ip,os host1,10.10.10.10,windows host2,10.10.10.11,linux class ExampleCSVTool ( PluginCSVFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . json_keys = { 'name' , 'ip' }","title":"PluginCSVFormat:"},{"location":"Basic-plugin-development/#pluginzipformat","text":"Use this class if the plugin generates vulnerabilities from a zip file. If yor report has csv format but a different extension (not .zip), remember to define the extension attribute To identify the file set in the files_list attribute a set with some file names inside the zip file. class ExampleJsonTool ( PluginZipFormat ): def __init__ ( self , ignore_info ): super () . __init__ ( ignore_info ) self . files_list = { 'file1.txt' , 'file2.txt' }","title":"PluginZipFormat:"},{"location":"Basic-plugin-development/#generating-data","text":"The PluginBase class give you all the main methods to create hosts, services and vulnerabilities After you parse the data you will need to create the objects with the information to send to faraday. This are the main methods def createAndAddHost ( self , name , os = \"unknown\" , hostnames = None , mac = None , scan_template = \"\" , site_name = \"\" , site_importance = \"\" , risk_score = \"\" , fingerprints = \"\" , fingerprints_software = \"\" ): def createAndAddServiceToHost ( self , host_id , name , protocol = \"tcp?\" , ports = None , status = \"open\" , version = \"unknown\" , description = \"\" ): def createAndAddVulnToHost ( self , host_id , name , desc = \"\" , ref = None , severity = \"\" , resolution = \"\" , vulnerable_since = \"\" , scan_id = \"\" , pci = \"\" , data = \"\" , external_id = None , run_date = None ): def createAndAddVulnToService ( self , host_id , service_id , name , desc = \"\" , ref = None , severity = \"\" , resolution = \"\" , risk = \"\" , data = \"\" , external_id = None , run_date = None ): def createAndAddVulnWebToService ( self , host_id , service_id , name , desc = \"\" , ref = None , severity = \"\" , resolution = \"\" , website = \"\" , path = \"\" , request = \"\" , response = \"\" , method = \"\" , pname = \"\" , params = \"\" , query = \"\" , category = \"\" , data = \"\" , external_id = None , run_date = None ): createAndAddHost and createAndAddServiceToHost will give you a host ID and a service ID. You need to send those to the create vulnerabilities methods The main method to parse data and create the vulnerabilities objects is parseOutputString , no mather if is a File or a Command plugin.","title":"Generating data"},{"location":"Basic-plugin-development/#command-plugins","text":"For command plugins the detection is done via regex. If the plugin is only for command you inherit from PluginBase if it also will support file detection inherit from the appropriate class for that type of file. In both cases to detect a command you will need to set the _command_regex attribute with the regex to match the command Here's an example of the Ping tool plugin: class CmdPingPlugin ( PluginBase ): def __init__ ( self , * arg , ** kwargs ): super () . __init__ ( * arg , ** kwargs ) self . id = \"ping\" self . name = \"Ping\" self . plugin_version = \"0.0.1\" self . version = \"1.0.0\" self . _command_regex = re . compile ( r '^(sudo ping|ping|sudo ping6|ping6)\\s+.*?' ) def parseOutputString ( self , output ): reg = re . search ( r \"PING ([\\w\\.-:]+)( |)\\(([\\w\\.:]+)\\)\" , output ) if re . search ( \"0 received|unknown host\" , output ) is None and reg is not None : ip_address = reg . group ( 3 ) hostname = reg . group ( 1 ) self . createAndAddHost ( ip_address , hostnames = [ hostname ]) return True def _isIPV4 ( self , ip ): if len ( ip . split ( \".\" )) == 4 : return True else : return False In this case the plugin manager will run the command and send the output to the parseOutputString method. But if the tool generate an ouput file instead of send the data to stdout you will need to check that the command has the required parameters to do that. To do that you will need to implement the processCommandString method, by default it will return the command without modifications. To use output files you will need to set 2 attributes in you plugin: _use_temp_file and _temp_file_extension If _use_temp_file is set the plugin will create a temp file and assign its path to the attribute self._output_file_path of the plugin. If you need that the temp file has and specific extension use the _temp_file_extension attribute like in the example. If the _use_temp_file attribute is set the plugin will send te content of that file to parseOutputString() instead of the output of the command. Here is and extract of the nmap plugin to see how processCommandString will modify the original command and return a new command with the required parameters. class NmapPlugin ( PluginXMLFormat ): \"\"\" Example plugin to parse nmap output. \"\"\" def __init__ ( self , * arg , ** kwargs ): super () . __init__ ( * arg , ** kwargs ) self . identifier_tag = \"nmaprun\" self . id = \"Nmap\" self . name = \"Nmap XML Output Plugin\" self . plugin_version = \"0.0.3\" self . version = \"6.40\" self . framework_version = \"1.0.0\" self . options = None self . _current_output = None self . _command_regex = re . compile ( r '^(sudo nmap|nmap|\\.\\/nmap)\\s+.*?' ) self . _use_temp_file = True self . _temp_file_extension = \"xml\" self . xml_arg_re = re . compile ( r \"^.*(-oX\\s*[^\\s]+).*$\" ) self . addSetting ( \"Scan Technique\" , str , \"-sS\" ) def parseOutputString ( self , output ): ... def processCommandString ( self , username , current_path , command_string ): \"\"\" Adds the -oX parameter to get xml output to the command string that the user has set. \"\"\" super () . processCommandString ( username , current_path , command_string ) arg_match = self . xml_arg_re . match ( command_string ) if arg_match is None : return re . sub ( r \"(^.*?nmap)\" , r \"\\1 -oX %s \" % self . _output_file_path , command_string ) else : return re . sub ( arg_match . group ( 1 ), r \"-oX %s \" % self . _output_file_path , command_string )","title":"Command Plugins"},{"location":"Basic-plugin-development/#full-example","text":"File Plugin from XML This is an example of a Faraday Plugin that process a xml report. In this example we will create a plugin to analyze this XML provided by the output of a tool. example.xml <?xml version=\"1.0\" ?> <!DOCTYPE example_tool> <example_tool scanstart= \"Thu Nov 9 15:59:13 2017\" > <details> <item id= \"999979\" ip= \"10.23.49.232\" os= \"linux\" > <uri> http://test.com/example.php </uri> <issue severity= \"low\" > Some vuln text </issue> </item> <item id= \"39023023\" ip= \"10.232.62.20\" os= \"linux\" > <uri> http://test.com/login.php </uri> <issue severity= \"low\" > Some other text </issue> </item> <item id= \"8348343\" ip= \"10.12.37.24\" os= \"linux\" > <uri> http://test.com/example.php </uri> <issue severity= \"low\" > Yet another vuln text </issue> </item> <statistics elapsed= \"402\" itemsfound= \"3\" itemstested= \"10\" /> </details> </example_tool> plugin.py from urllib.parse import urlparse from faraday_plugins.plugins.plugin import PluginXMLFormat import xml.etree.ElementTree as ET class ExampleToolXmlParser : def __init__ ( self , xml_output ): self . vulns = self . parse_xml ( xml_output ) def parse_xml ( self , xml_output ): vulns = [] tree = ET . fromstring ( xml_output ) items = tree . iterfind ( 'details/item' ) for item in items : ip = item . get ( 'ip' ) os = item . get ( 'os' ) uri = item . find ( 'uri' ) . text url = urlparse ( uri ) hostname = [ url . netloc ] path = url . path if url . scheme == 'https' : port = 443 else : port = 80 issue = item . find ( 'issue' ) severity = issue . get ( 'severity' ) issue_text = issue . text vuln = { 'ip' : ip , 'uri' : uri , 'os' : os , 'hostname' : hostname , 'port' : port , 'path' : path , 'issue_text' : issue_text , 'severity' : severity } vulns . append ( vuln ) return vulns class ExampleToolPlugin ( PluginXMLFormat ): def __init__ ( self ): super () . __init__ () self . identifier_tag = \"example_tool\" self . id = \"example_tool\" self . name = \"Name of the tool\" self . plugin_version = \"0.0.1\" def parseOutputString ( self , output , debug = False ): parser = ExampleToolXmlParser ( output ) for vuln in parser . vulns : h_id = self . createAndAddHost ( vuln [ 'ip' ], vuln [ 'os' ], hostnames = vuln [ 'hostname' ]) s_id = self . createAndAddServiceToHost ( h_id , 'webserver' , protocol = 'tcp' , ports = vuln [ 'port' ]) v_id = self . createAndAddVulnWebToService ( h_id , s_id , vuln [ 'issue_text' ], severity = vuln [ 'severity' ], path = vuln [ 'path' ]) def createPlugin ( ignore_info = False , hostname_resolution = True ): return ExampleToolXmlParser ( ignore_info = ignore_info )","title":"Full Example"},{"location":"Basic-plugin-development/#test-and-debug","text":"You can test your plugin by enabling the custom_plugins_folder setting, and try it with faraday. You can also test your plugin from the command line.","title":"Test and Debug"},{"location":"Basic-plugin-development/#test-plugins","text":"List all available plugins Verify that the plugins is loaded by the plugin manager faraday-plugins list-plugins Available Plugins: ... ... ... example_tool - Name of the tool Loaded Plugins: 84 Test plugin report detection Verify that your file is detected by your plugin faraday-plugins detect-report /path/to/report.xml Plugin: example_tool Test plugin process report Verify that your plugin parses the file ok and generate the json structure that will be loaded into faraday faraday-plugins process-report /path/to/report.xml {\"hosts\": [{\"ip\": \"10.23.49.232\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Some vuln text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/example.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}, {\"ip\": \"10.232.62.20\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Some other text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/login.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}, {\"ip\": \"10.12.37.24\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Yet another vuln text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/example.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}], \"command\": {\"tool\": \"example_tool\", \"command\": \"example_tool\", \"params\": \"/path/to/report.xml\", \"user\": \"faraday\", \"hostname\": \"\", \"start_date\": \"2020-04-01T18:43:34.552623\", \"duration\": 2650, \"import_source\": \"report\"}} You can optionally specify the plugin id to not do the detection step and force to process it with the specific plugin faraday-plugins process-report --plugin_id YourPluginId /path/to/report.xml {\"hosts\": [{\"ip\": \"10.23.49.232\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Some vuln text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/example.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}, {\"ip\": \"10.232.62.20\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Some other text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/login.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}, {\"ip\": \"10.12.37.24\", \"os\": \"linux\", \"hostnames\": [\"test.com\"], \"description\": \"\", \"mac\": null, \"credentials\": [], \"services\": [{\"name\": \"webserver\", \"protocol\": \"tcp\", \"port\": 80, \"status\": \"open\", \"version\": \"unknown\", \"description\": \"\", \"credentials\": [], \"vulnerabilities\": [{\"name\": \"Yet another vuln text\", \"desc\": \"\", \"severity\": \"low\", \"refs\": [], \"external_id\": null, \"type\": \"VulnerabilityWeb\", \"resolution\": \"\", \"data\": \"\", \"website\": \"\", \"path\": \"/example.php\", \"request\": \"\", \"response\": \"\", \"method\": \"\", \"pname\": \"\", \"params\": \"\", \"query\": \"\", \"category\": \"\"}]}], \"vulnerabilities\": [], \"scan_template\": \"\", \"site_name\": \"\", \"site_importance\": \"\", \"risk_score\": \"\", \"fingerprints\": \"\", \"fingerprints_software\": \"\"}], \"command\": {\"tool\": \"example_tool\", \"command\": \"example_tool\", \"params\": \"/path/to/report.xml\", \"user\": \"faraday\", \"hostname\": \"\", \"start_date\": \"2020-04-01T18:43:34.552623\", \"duration\": 2650, \"import_source\": \"report\"}} If you do not have faraday-server installed or don't have the custom_plugins_folder setting, you can use the --custom_plugins_folder parameter with any if the commands (list, detect and process) Example: faraday-plugins list-plugins --custom-plugins-folder /home/user/.faraday/plugins/","title":"Test Plugins"},{"location":"Basic-plugin-development/#logging","text":"In the PluginBase there is a logger defined in self.logger that you can use. If you need to debug for plugins with the command line set this variable: export PLUGIN_DEBUG=1 faraday-plugins process-report appscan /path/to/report.xml 2019-11-15 20:37:03,355 - faraday.faraday_plugins.plugins.manager - INFO [manager.py:113 - _load_plugins()] Loading Native Plugins... 2019-11-15 20:37:03,465 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [acunetix] 2019-11-15 20:37:03,495 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [amap] 2019-11-15 20:37:03,549 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [appscan] 2019-11-15 20:37:03,580 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [arachni] 2019-11-15 20:37:03,613 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [arp_scan] 2019-11-15 20:37:03,684 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [beef] 2019-11-15 20:37:03,714 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [brutexss] 2019-11-15 20:37:03,917 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [burp] 2019-11-15 20:37:03,940 - faraday.faraday_plugins.plugins.manager - DEBUG [manager.py:123 - _load_plugins()] Load Plugin [dig] ...","title":"Logging"},{"location":"Burp-proxy-extender/","text":"This plugin is a script developed in Java as a extender to the Burp Proxy API (Pro/Community). Installation \u00b6 From the App Store \u00b6 You can install the Burp extension from the Burp App Store From file \u00b6 Download the jar from this link Once you have it, follow these steps: Go to Extender->Extensions and click in the Add button. In the Extension Details section, the extension type should be Java , and select the file. Click Next, and if everything went well, you should see no errors and you can close the window. Now, make sure the extension is loaded in the Extensions tab. Extension configuration \u00b6 Once the Faraday extension is loaded into your Burp, you will see a new tab called \"Faraday\". Here, you can login to Faraday and you can edit the extension's settings:. Login to Faraday \u00b6 In order to connect the Faraday's Burp extension to Faraday, follow these steps: 1) Set your Faraday Server URL. This should point to the same URL that you use when you are connecting to Faraday Server, e.g: http://127.0.0.1:5985 2) Connect Burp to Faraday by clicking on the Connect button. 3) Once you are connected, type your Faraday's credentials: username, password and 2FA Token (if it is the case). 4) Login into Faraday by click on the Login button. If everything goes well, Burp should pop up a Login successful! modal. 5) Once you are logged in, you can edit the extension's settings. Extension Settings \u00b6 From here, you can: 1) Choose the workspace where you want to work on. 2) Choose whether the vulnerabilities should be imported automatically or not (it's disabled by default). 3) Import the vulnerabilities you've found so far. 4) Check if you want to use only Burp scope. Send to Faraday \u00b6 Once you have everything setup, you can send the issues or requests to Faraday. !!! warning \"REMEMBER: If the request is missing the response, the information can't be sent to faraday! REMEMBER 2: Vulnerabilities will only work with commercial versions of burp\" Other Settings \u00b6 From here, you can Restore Settings to default.","title":"Burp"},{"location":"Burp-proxy-extender/#installation","text":"","title":"Installation"},{"location":"Burp-proxy-extender/#from-the-app-store","text":"You can install the Burp extension from the Burp App Store","title":"From the App Store"},{"location":"Burp-proxy-extender/#from-file","text":"Download the jar from this link Once you have it, follow these steps: Go to Extender->Extensions and click in the Add button. In the Extension Details section, the extension type should be Java , and select the file. Click Next, and if everything went well, you should see no errors and you can close the window. Now, make sure the extension is loaded in the Extensions tab.","title":"From file"},{"location":"Burp-proxy-extender/#extension-configuration","text":"Once the Faraday extension is loaded into your Burp, you will see a new tab called \"Faraday\". Here, you can login to Faraday and you can edit the extension's settings:.","title":"Extension configuration"},{"location":"Burp-proxy-extender/#login-to-faraday","text":"In order to connect the Faraday's Burp extension to Faraday, follow these steps: 1) Set your Faraday Server URL. This should point to the same URL that you use when you are connecting to Faraday Server, e.g: http://127.0.0.1:5985 2) Connect Burp to Faraday by clicking on the Connect button. 3) Once you are connected, type your Faraday's credentials: username, password and 2FA Token (if it is the case). 4) Login into Faraday by click on the Login button. If everything goes well, Burp should pop up a Login successful! modal. 5) Once you are logged in, you can edit the extension's settings.","title":"Login to Faraday"},{"location":"Burp-proxy-extender/#extension-settings","text":"From here, you can: 1) Choose the workspace where you want to work on. 2) Choose whether the vulnerabilities should be imported automatically or not (it's disabled by default). 3) Import the vulnerabilities you've found so far. 4) Check if you want to use only Burp scope.","title":"Extension Settings"},{"location":"Burp-proxy-extender/#send-to-faraday","text":"Once you have everything setup, you can send the issues or requests to Faraday. !!! warning \"REMEMBER: If the request is missing the response, the information can't be sent to faraday! REMEMBER 2: Vulnerabilities will only work with commercial versions of burp\"","title":"Send to Faraday"},{"location":"Burp-proxy-extender/#other-settings","text":"From here, you can Restore Settings to default.","title":"Other Settings"},{"location":"CSV-Exporter/","text":"(V3 Deprecated) Faraday supports CSV Exporting from its WEB UI. In order to download a CSV file containing all your findings, go to the Status Report page in our WEB UI by clicking on 'Manage' and then click on the download link: Keep in mind that if you filter findings or hide columns in the Status Report, those changes will impact the output of the CSV Export. For example, if we use the search box to filter out vulnerabilities with info severity and leave only a few columns the resulting CSV will contain the same information as the list, as you can see in the images below.","title":"CSV Exporter"},{"location":"CSV-Importer/","text":"Intro \u00b6 The idea is to import an CSV file into Faraday's server uploading all the information into one of your workspaces. Index \u00b6 CSV Format Command for Community version Command for Commercial versions Sample File CSV Format \u00b6 The CSV file should have an special kind of formatting, so take in consideration the following rules: 1) The names of columns are: * Host fields: * host_name * host_description * host_owned Services fields: service_name service_description service_owned #boolean service_port service_protocol service_version service_status Vulnerability fields: vulnerability_name vulnerability_desc vulnerability_data vulnerability_severity vulnerability_refs vulnerability_confirmed #boolean vulnerability_resolution vulnerability_status vulnerability_policyviolations Vulnerability web fields: vulnerability_web_name vulnerability_web_desc vulnerability_web_data vulnerability_web_severity vulnerability_web_refs vulnerability_web_confirmed vulnerability_web_status vulnerability_web_website vulnerability_web_request vulnerability_web_response vulnerability_web_method vulnerability_web_pname vulnerability_web_params vulnerability_web_query vulnerability_web_resolution vulnerability_web_policyviolations vulnerability_web_path vulnerability_web_tagstags Note: those in bold are mandatory fields. 2) The following fields have a special format that you need to follow: Boolean (true or false): host_owned service_owned vulnerability_confirmed vulnerability_web_confirmed List (Values separated by comma): service_port vulnerability_refs vulnerability_policyviolations vulnerability_web_refs vulnerability_web_policyviolations vulnerability_web_tags 3) Possible values for vulnerability and vulnerability web SEVERITY: * info * low * med * high * critical 4) Possible values for vulnerability and vulnerability web STATUS: * opened * closed * re-opened * risk-accepted 5) Possible values for service STATUS: * open * filtered * close Warnings: keep in mind the following concepts before importing an CSV file: 1) Hosts must ALWAYS have an interface associated. 2) Vulnerabilities must always have either a host OR a service associated to them. 3) Web Vulnerabilities must always be associated with a host AND a service. 4) Unicode chars not supported. 5) Anything not numeric entered on service_port will be ignored Command for Commercial versions \u00b6 faraday-cli report tool import_csv -u http://127.0.0.1:5985/ --csv /path/to/file/file.csv -w WORSKPACE_NAME --username USERNAME --password PASSWORD Options: * --csv: the name and path of your CSV. * -w: Faraday's workspace where all the information will go to. * --username: username of an Admin User. * --password: password of an Admin User. Sample file \u00b6 Here you have an example file: file.csv","title":"CSV Importer"},{"location":"CSV-Importer/#intro","text":"The idea is to import an CSV file into Faraday's server uploading all the information into one of your workspaces.","title":"Intro"},{"location":"CSV-Importer/#index","text":"CSV Format Command for Community version Command for Commercial versions Sample File","title":"Index"},{"location":"CSV-Importer/#csv-format","text":"The CSV file should have an special kind of formatting, so take in consideration the following rules: 1) The names of columns are: * Host fields: * host_name * host_description * host_owned Services fields: service_name service_description service_owned #boolean service_port service_protocol service_version service_status Vulnerability fields: vulnerability_name vulnerability_desc vulnerability_data vulnerability_severity vulnerability_refs vulnerability_confirmed #boolean vulnerability_resolution vulnerability_status vulnerability_policyviolations Vulnerability web fields: vulnerability_web_name vulnerability_web_desc vulnerability_web_data vulnerability_web_severity vulnerability_web_refs vulnerability_web_confirmed vulnerability_web_status vulnerability_web_website vulnerability_web_request vulnerability_web_response vulnerability_web_method vulnerability_web_pname vulnerability_web_params vulnerability_web_query vulnerability_web_resolution vulnerability_web_policyviolations vulnerability_web_path vulnerability_web_tagstags Note: those in bold are mandatory fields. 2) The following fields have a special format that you need to follow: Boolean (true or false): host_owned service_owned vulnerability_confirmed vulnerability_web_confirmed List (Values separated by comma): service_port vulnerability_refs vulnerability_policyviolations vulnerability_web_refs vulnerability_web_policyviolations vulnerability_web_tags 3) Possible values for vulnerability and vulnerability web SEVERITY: * info * low * med * high * critical 4) Possible values for vulnerability and vulnerability web STATUS: * opened * closed * re-opened * risk-accepted 5) Possible values for service STATUS: * open * filtered * close Warnings: keep in mind the following concepts before importing an CSV file: 1) Hosts must ALWAYS have an interface associated. 2) Vulnerabilities must always have either a host OR a service associated to them. 3) Web Vulnerabilities must always be associated with a host AND a service. 4) Unicode chars not supported. 5) Anything not numeric entered on service_port will be ignored","title":"CSV Format"},{"location":"CSV-Importer/#command-for-commercial-versions","text":"faraday-cli report tool import_csv -u http://127.0.0.1:5985/ --csv /path/to/file/file.csv -w WORSKPACE_NAME --username USERNAME --password PASSWORD Options: * --csv: the name and path of your CSV. * -w: Faraday's workspace where all the information will go to. * --username: username of an Admin User. * --password: password of an Admin User.","title":"Command for Commercial versions"},{"location":"CSV-Importer/#sample-file","text":"Here you have an example file: file.csv","title":"Sample file"},{"location":"Comments/","text":"Comments & Notifications \u00b6 Now, you can enrich Vuln data by leaving Comments and Notes, while mentioning other users to notify them about important events in real time. Also, you are now able to configure alerts to follow up on each project, having a more efficient view of their status and updates. The idea behind this is promoting better ways to get involved with your co-workers by improving communication and daily results. Usage Go into the vulnerability preview (by clicking in the name of the vulnerability). Then click on Comments tab:","title":"Comments & Notifications"},{"location":"Comments/#comments-notifications","text":"Now, you can enrich Vuln data by leaving Comments and Notes, while mentioning other users to notify them about important events in real time. Also, you are now able to configure alerts to follow up on each project, having a more efficient view of their status and updates. The idea behind this is promoting better ways to get involved with your co-workers by improving communication and daily results. Usage Go into the vulnerability preview (by clicking in the name of the vulnerability). Then click on Comments tab:","title":"Comments &amp; Notifications"},{"location":"Contact-us/","text":"More info about Faraday at faradaysec.com Frequently Asked Questions \u00b6 Visit our [[FAQ]] to know the answer to common questions Troubleshooting \u00b6 Having problems with Faraday? That's weird! Try our [Troubleshooting] guide. Issue tracker \u00b6 Not satisfied? Having troubles? Want to cheer us? Open a ticket! Our community \u00b6 You can reach us and find other Faraday users on: Open an Issue Twitter \u00b6 http://twitter.com/faradaysec","title":"Contact Us"},{"location":"Contact-us/#frequently-asked-questions","text":"Visit our [[FAQ]] to know the answer to common questions","title":"Frequently Asked Questions"},{"location":"Contact-us/#troubleshooting","text":"Having problems with Faraday? That's weird! Try our [Troubleshooting] guide.","title":"Troubleshooting"},{"location":"Contact-us/#issue-tracker","text":"Not satisfied? Having troubles? Want to cheer us? Open a ticket!","title":"Issue tracker"},{"location":"Contact-us/#our-community","text":"You can reach us and find other Faraday users on: Open an Issue","title":"Our community"},{"location":"Contact-us/#twitter","text":"http://twitter.com/faradaysec","title":"Twitter"},{"location":"Custom-Fields-v4/","text":"Custom Attributes \u00b6 Custom Attributes allow you to extend the vulnerability's model with more fields. Custom attributes type can be int , string , choice , markdown and list . If you want to learn more about the usage of Custom Attributes through Faraday's API, follow this link . How to create Custom Attributes \u00b6 From Web UI \u00b6 You can create/edit/delete a Custom Attribute clicking in the Custom Attributes button from the Column Order icon. Let's create one as an example: You must fill the following fields in order to create a Custom Attribute: name : the display name that you will see on the vulnerability form. Type : data type of the field. After successfully creating the Custom Attribute, you will see it on the vulnerability form: From Terminal \u00b6 Step 1: Add custom attribute $ faraday-manage add-custom-field Step 2: After the command execution, you will be prompted by a wizard where you must input the following information: Field name : the name of the field. Display name : the display name that you will see on the vulnerability form. Type : data type of the field, it can be: int , string , choice , markdown and list . Order : the order shown on the vulnerability form. The following example will add the CVSS field to the vulnerability model: This wizard will guide you to ADD custom attributes to the vulneraiblity model. Field name: cvss Display name: CVSS Field type (int, str, list) (int, str, list): str Field order index: 0 New CustomField will be added to vulnerability -> Order 0 (cvss,CVSS,str) <-, confirm to continue (yes/no): yes","title":"Custom Attributes"},{"location":"Custom-Fields-v4/#custom-attributes","text":"Custom Attributes allow you to extend the vulnerability's model with more fields. Custom attributes type can be int , string , choice , markdown and list . If you want to learn more about the usage of Custom Attributes through Faraday's API, follow this link .","title":"Custom Attributes"},{"location":"Custom-Fields-v4/#how-to-create-custom-attributes","text":"","title":"How to create Custom Attributes"},{"location":"Custom-Fields-v4/#from-web-ui","text":"You can create/edit/delete a Custom Attribute clicking in the Custom Attributes button from the Column Order icon. Let's create one as an example: You must fill the following fields in order to create a Custom Attribute: name : the display name that you will see on the vulnerability form. Type : data type of the field. After successfully creating the Custom Attribute, you will see it on the vulnerability form:","title":"From Web UI"},{"location":"Custom-Fields-v4/#from-terminal","text":"Step 1: Add custom attribute $ faraday-manage add-custom-field Step 2: After the command execution, you will be prompted by a wizard where you must input the following information: Field name : the name of the field. Display name : the display name that you will see on the vulnerability form. Type : data type of the field, it can be: int , string , choice , markdown and list . Order : the order shown on the vulnerability form. The following example will add the CVSS field to the vulnerability model: This wizard will guide you to ADD custom attributes to the vulneraiblity model. Field name: cvss Display name: CVSS Field type (int, str, list) (int, str, list): str Field order index: 0 New CustomField will be added to vulnerability -> Order 0 (cvss,CVSS,str) <-, confirm to continue (yes/no): yes","title":"From Terminal"},{"location":"Dashboard-v4/","text":"Dashboard \u00b6 Faraday's Dashboard contains a summary of all data within a Workspace. Each box is a visualization for an specific aspect of the collected information. When you create a new Workspace an empty dashboard will look as below Once you start adding data by importing scans, running tools, etc, it will be like this Let's see in more detail the functionality and information displayed in the dashboard Switching Workspaces \u00b6 Top left corner next to F you can see the current Workspace, click on it and a drop-list will be displayed to switch between Workspace quickly Progress and Vulnerabilities Distribution/Counters \u00b6 Percentage of time spend using Workspace settings (start/end date) and pie charts for vulnerabilies by Severity and Status also total counters of vulnerabilities by Severity included Activity Feed \u00b6 Users and actions with results performed on the workspace for quickly seeing the progress been made on the workspace Last Vulnerabilities \u00b6 Quick list of latest vulnerabilities added into the workspace Service Report \u00b6 A counter view of Services found in the workspace Workspace Summary \u00b6 An overall summary of Hosts, Services and Vulnerabilties found so far Hosts \u00b6 List of Assets and Vulnerabilities currently in the workspace. Tags \u00b6 View of the recent used tags.","title":"Dashboard"},{"location":"Dashboard-v4/#dashboard","text":"Faraday's Dashboard contains a summary of all data within a Workspace. Each box is a visualization for an specific aspect of the collected information. When you create a new Workspace an empty dashboard will look as below Once you start adding data by importing scans, running tools, etc, it will be like this Let's see in more detail the functionality and information displayed in the dashboard","title":"Dashboard"},{"location":"Dashboard-v4/#switching-workspaces","text":"Top left corner next to F you can see the current Workspace, click on it and a drop-list will be displayed to switch between Workspace quickly","title":"Switching Workspaces"},{"location":"Dashboard-v4/#progress-and-vulnerabilities-distributioncounters","text":"Percentage of time spend using Workspace settings (start/end date) and pie charts for vulnerabilies by Severity and Status also total counters of vulnerabilities by Severity included","title":"Progress and Vulnerabilities Distribution/Counters"},{"location":"Dashboard-v4/#activity-feed","text":"Users and actions with results performed on the workspace for quickly seeing the progress been made on the workspace","title":"Activity Feed"},{"location":"Dashboard-v4/#last-vulnerabilities","text":"Quick list of latest vulnerabilities added into the workspace","title":"Last Vulnerabilities"},{"location":"Dashboard-v4/#service-report","text":"A counter view of Services found in the workspace","title":"Service Report"},{"location":"Dashboard-v4/#workspace-summary","text":"An overall summary of Hosts, Services and Vulnerabilties found so far","title":"Workspace Summary"},{"location":"Dashboard-v4/#hosts","text":"List of Assets and Vulnerabilities currently in the workspace.","title":"Hosts"},{"location":"Dashboard-v4/#tags","text":"View of the recent used tags.","title":"Tags"},{"location":"Development-setup/","text":"To use faraday follow the new Faraday Install Guide . This is for development \u00b6 Index \u00b6 Server Client Topics \u00b6 Faraday Server \u00b6 Faraday Server is the interface between PostgreSQL and Faraday Client and WebUI. The server's responsibility is to transmit information between the client or WebUI and PostgreSQL, and make sure that they are kept in sync. The Web UI client, which allows you to handle enormous workspaces from your favorite web browser. Important: You should keep in mind that is recommended to install Faraday server on the same instance as PostgreSQL. Downloading \u00b6 Clone the Faraday Git Project repository and checkout the dev branch: $ git clone https://github.com/infobyte/faraday.git faraday-dev $ cd faraday-dev $ pip install . After doing so, make sure to install system dependencies , install Python dependencies and configure the Server . Requirements \u00b6 Faraday Server is built with minimum requirements. This is by design, so you can install it even on the most bare-bones machine you can possibly imagine. The Python requirements for the server are stored in the requirements . Installing system dependencies \u00b6 Debian based distributions (Debian, Ubuntu, Backtrack, etc) \u00b6 Or if you wanna do it manually you can run the following command to install the required dependencies on any Debian based distribution. $ sudo apt update $ sudo apt install build-essential ipython python3-setuptools \\ python3-pip python3-dev libssl-dev \\ libffi-dev pkg-config libxml2-dev \\ libxslt1-dev libfreetype6-dev libpng-dev postgresql libpq-dev Warning : If you already have postgresql installed, please corroborate the version is upper than 9.4. Kali Linux \u00b6 If you are running Kali, please run the following commands: $ sudo apt-get update $ sudo apt-get install build-essential ipython python-setuptools \\ python-pip python-dev libssl-dev \\ libffi-dev pkg-config libxml2-dev \\ libxslt1-dev libfreetype6-dev libpng-dev Others \u00b6 Please consult with your distribution documentation to install the dependencies listed above. Creating a virtualenv \u00b6 Before installing Faraday, we need to create a virtualenv so Faraday runs in it. In order to install and create a virtualenv, run the following commands: $ pip install virtualenv $ virtualenv -p python3 faraday_venv $ source faraday_venv/bin/activate For more information about virtualenv, please follow this link . Installing Python 3 dependencies \u00b6 Once you have the required system dependencies, you just have to install the Python modules needed to run the server using: $ python setup.py develop Initializing PostgreSQL \u00b6 In order to initialize PostgreSQL database, run the following command: faraday-manage initdb IMPORTANT : The command initdb will create a random password for the admin user, remeber to COPY THE PASSWORD. You can use the command faraday-manage change-password if you want to change it. Note: You sould have the PostgreSQL service started. To do it run systemctl start postgresql or the equivalant command for your GNU/Linux distro. Note: if at the moment you run this command, it throws an error, be sure you have sudo installed. Once you have installed it, run the command again. Manual PostgreSQL configuration \u00b6 If you need an advance configuration of the postgres database, like having a custom database name or run it in a separate host, the faraday-manage initdb command probably won't be enough for you, so you should configure it manually by doing something like this: sudo -u postgres psql -c \"CREATE ROLE faraday_postgresql WITH LOGIN PASSWORD 'YOURPASSWORD'\" sudo -u postgres createdb -O faraday_postgresql faraday Then, edit the ~/.faraday/config/server.ini by adding the connection string to the database: [database] connection_string = postgresql+psycopg2://faraday_postgresql:YOURPASSWORD@localhost/faraday Then you should run faraday-manage create-tables to create all the required tables to make faraday work, and faraday-manage createsuperuser to create an admin user. Manually importing from CouchDB \u00b6 If you were using Faraday 2.7.2 and setup the database manually instead of using the faraday-manage initdb , you should run the following command to import the data from CouchDB: $ python manage.py import-from-couchdb Updating Nginx configuration \u00b6 Note: This only applies if you are using Nginx and https. Please, make sure you have this settings on your Nginx config: 1 2 proxy_pass http :// localhost : 5985 /; proxy_redirect http :// $ scheme ://; Configuration \u00b6 By default, Faraday server will listen on port 5985 . You can edit this on ~/.faraday/config/server.ini . Exposing the Server \u00b6 If you wish to access the Server form a different box you need to expose the service. In order to do so, edit the server configuration file and set the bind_address param to 0.0.0.0 . Edit the file located in ~/.faraday/config/server.ini and under the section [faraday-server] set the param, it should look something like this: [faraday-server] ... bind_address=0.0.0.0 Then restart the server if you had it running and reload your browser in case you were already trying to access the Web UI form a different IP. faraday-server also allow to use --bind and --port to override server.ini settings. Running \u00b6 Once everything is installed and the server is configured, you can proceed to run the Faraday server script: $ faraday-server If you want to run the server in background mode, you should use the --start option: $ faraday-server --start This is the recommended way to do this. Other methods like using the bash & could cause unexpected IOErrors and other related exceptions. Web UI \u00b6 Once the server is running, you can access Faraday's Web UI using any browser: just point it to http://SERVER_IP:SERVER_PORT/ (by default it will be http://localhost:5985/ ) and you can start playing with Faraday. Faraday Client \u00b6 Faraday Client is the software which will allow you to work with your favorite security tools and capture their output in an organized manner. It works under a GTK+3 interface with the popular VTE terminal with a custom ZSH shell that respects the user's configuration (yes, that means you get to keep your exact ZSH terminal inside Faraday, even if you use ZPrezto or Oh My ZSH). From the client you can also create and delete workspaces, specify plugin configuration, view information about your hosts, resolve conflics that may arise and much more. It's also a responsibility of the client to send all of the collected information to the server, which will then process it and format it in an friendly way for you to view, edit, and confirm. The client is bundled in the same package as the server, so if you have already downloaded Faraday, you can skip the next step. Downloading \u00b6 Download the latest tarball or clone the Faraday Git Project repository and checkout dev branch: 1 2 3 $ git clone https://github.com/infobyte/faraday.git faraday-dev $ git checkout dev $ cd faraday-dev Requirements \u00b6 Faraday Client works under any modern Linux distribution or Mac OS X, and needs Python 3.6+. The Python requirements for the client are stored in the requirements.txt file . Some additional requirements are necessary for specific features to work, these are stored in the requirements_extras.txt file . Out tests include Debian , Ubuntu , Kali , Backtrack . Installing system dependencies \u00b6 Debian and derivatives \u00b6 You can run the following command to install the required dependencies on any Debian based distribution. $ sudo apt update If you are running Ubuntu 12.04 LTS, or Ubuntu 14.04 LTS, please execute this command: $ sudo apt install libpq-dev python-pip python-dev gir1.2-gtk-3.0 gir1.2-vte-2.90 python-gobject zsh curl If you are any other version, please execute the following command: $ sudo apt install libpq-dev python-pip python-dev gir1.2-gtk-3.0 gir1.2-vte-2.91 python-gobject zsh curl Gentoo \u00b6 This are the dependencies for Gentoo with Emerge: dev-libs/gobject-introspection net-libs/webkit-gtk x11-libs/gtk+ \\ x11-libs/vte dev-python/pygobject app-shells/zsh net-misc/curl dev-python/ipython Extras dependencies: dev-python/beautifulsoup dev-python/gevent-psycopg2 Using GTK client with virtualenv \u00b6 If you are working inside a Virtual enviroment you need to follow this extra steps for GTK to work: pip install vext pip install vext.pygtk pip install vext.gi Configuration \u00b6 Now you need to configure every Faraday instance so it can connect to the server. If you're using the GTK interface click on the Preferences icon and fill in the server URL, for example http://127.0.0.1:5985 If you are using the --gui=no-gui option Edit the file: ~/.faraday/config/user.xml And search for the following api_uri tag and set it to the server URL, for example: <api_uri>http://127.0.0.1:5985</api_uri> If you are using SSL you need to use https in your configuration. For example use https://192.168.0.20 when you are using an nginx server with SSL enabled and faraday-server is listening on 192.168.0.20. Running \u00b6 Once you have already configured the client and have Faraday Server running, you simply have to run: $ faraday-client Some distributions or installations require additional steps, so look down below if you are using something different than Debian or Ubuntu, or if you need to apply some configuration to the client. Kali \u00b6 Faraday comes pre-installed in Kali Rolling. The package name is python-faraday . Keep in mind that this package can only be used for the Community edition . In order to run Faraday in Kali: $ systemctl start postgresql.service $ cd /usr/share/python-faraday $ faraday-server $ faraday-client Due to Kali's package updates the pre-installed package may not be the last version. If you want the latest updates use the Debian install steps . Gentoo \u00b6 If you are running Gentoo, this are the dependencies with Emerge: dev-python/flask-sqlalchemy dev-python/service_identity dev-python/twisted \\ dev-python/pyopenssl dev-java/mockito dev-python/Whoosh \\ dev-python/configargparse dev-python/restkit dev-python/requests www-servers/tornado \\ dev-python/flask dev-python/colorama dev-python/setuptools dev-python/pip dev-libs/libpqxx \\ libffi-dev","title":"Development setup"},{"location":"Development-setup/#to-use-faraday-follow-the-new-faraday-install-guide-this-is-for-development","text":"","title":"To use faraday follow the new Faraday Install Guide. This is for development"},{"location":"Development-setup/#index","text":"Server Client","title":"Index"},{"location":"Development-setup/#topics","text":"","title":"Topics"},{"location":"Development-setup/#faraday-server","text":"Faraday Server is the interface between PostgreSQL and Faraday Client and WebUI. The server's responsibility is to transmit information between the client or WebUI and PostgreSQL, and make sure that they are kept in sync. The Web UI client, which allows you to handle enormous workspaces from your favorite web browser. Important: You should keep in mind that is recommended to install Faraday server on the same instance as PostgreSQL.","title":"Faraday Server"},{"location":"Development-setup/#downloading","text":"Clone the Faraday Git Project repository and checkout the dev branch: $ git clone https://github.com/infobyte/faraday.git faraday-dev $ cd faraday-dev $ pip install . After doing so, make sure to install system dependencies , install Python dependencies and configure the Server .","title":"Downloading"},{"location":"Development-setup/#requirements","text":"Faraday Server is built with minimum requirements. This is by design, so you can install it even on the most bare-bones machine you can possibly imagine. The Python requirements for the server are stored in the requirements .","title":"Requirements"},{"location":"Development-setup/#installing-system-dependencies","text":"","title":"Installing system dependencies"},{"location":"Development-setup/#debian-based-distributions-debian-ubuntu-backtrack-etc","text":"Or if you wanna do it manually you can run the following command to install the required dependencies on any Debian based distribution. $ sudo apt update $ sudo apt install build-essential ipython python3-setuptools \\ python3-pip python3-dev libssl-dev \\ libffi-dev pkg-config libxml2-dev \\ libxslt1-dev libfreetype6-dev libpng-dev postgresql libpq-dev Warning : If you already have postgresql installed, please corroborate the version is upper than 9.4.","title":"Debian based distributions (Debian, Ubuntu, Backtrack, etc)"},{"location":"Development-setup/#kali-linux","text":"If you are running Kali, please run the following commands: $ sudo apt-get update $ sudo apt-get install build-essential ipython python-setuptools \\ python-pip python-dev libssl-dev \\ libffi-dev pkg-config libxml2-dev \\ libxslt1-dev libfreetype6-dev libpng-dev","title":"Kali Linux"},{"location":"Development-setup/#others","text":"Please consult with your distribution documentation to install the dependencies listed above.","title":"Others"},{"location":"Development-setup/#creating-a-virtualenv","text":"Before installing Faraday, we need to create a virtualenv so Faraday runs in it. In order to install and create a virtualenv, run the following commands: $ pip install virtualenv $ virtualenv -p python3 faraday_venv $ source faraday_venv/bin/activate For more information about virtualenv, please follow this link .","title":"Creating a virtualenv"},{"location":"Development-setup/#installing-python-3-dependencies","text":"Once you have the required system dependencies, you just have to install the Python modules needed to run the server using: $ python setup.py develop","title":"Installing Python 3 dependencies"},{"location":"Development-setup/#initializing-postgresql","text":"In order to initialize PostgreSQL database, run the following command: faraday-manage initdb IMPORTANT : The command initdb will create a random password for the admin user, remeber to COPY THE PASSWORD. You can use the command faraday-manage change-password if you want to change it. Note: You sould have the PostgreSQL service started. To do it run systemctl start postgresql or the equivalant command for your GNU/Linux distro. Note: if at the moment you run this command, it throws an error, be sure you have sudo installed. Once you have installed it, run the command again.","title":"Initializing PostgreSQL"},{"location":"Development-setup/#manual-postgresql-configuration","text":"If you need an advance configuration of the postgres database, like having a custom database name or run it in a separate host, the faraday-manage initdb command probably won't be enough for you, so you should configure it manually by doing something like this: sudo -u postgres psql -c \"CREATE ROLE faraday_postgresql WITH LOGIN PASSWORD 'YOURPASSWORD'\" sudo -u postgres createdb -O faraday_postgresql faraday Then, edit the ~/.faraday/config/server.ini by adding the connection string to the database: [database] connection_string = postgresql+psycopg2://faraday_postgresql:YOURPASSWORD@localhost/faraday Then you should run faraday-manage create-tables to create all the required tables to make faraday work, and faraday-manage createsuperuser to create an admin user.","title":"Manual PostgreSQL configuration"},{"location":"Development-setup/#manually-importing-from-couchdb","text":"If you were using Faraday 2.7.2 and setup the database manually instead of using the faraday-manage initdb , you should run the following command to import the data from CouchDB: $ python manage.py import-from-couchdb","title":"Manually importing from CouchDB"},{"location":"Development-setup/#updating-nginx-configuration","text":"Note: This only applies if you are using Nginx and https. Please, make sure you have this settings on your Nginx config: 1 2 proxy_pass http :// localhost : 5985 /; proxy_redirect http :// $ scheme ://;","title":"Updating Nginx configuration"},{"location":"Development-setup/#configuration","text":"By default, Faraday server will listen on port 5985 . You can edit this on ~/.faraday/config/server.ini .","title":"Configuration"},{"location":"Development-setup/#exposing-the-server","text":"If you wish to access the Server form a different box you need to expose the service. In order to do so, edit the server configuration file and set the bind_address param to 0.0.0.0 . Edit the file located in ~/.faraday/config/server.ini and under the section [faraday-server] set the param, it should look something like this: [faraday-server] ... bind_address=0.0.0.0 Then restart the server if you had it running and reload your browser in case you were already trying to access the Web UI form a different IP. faraday-server also allow to use --bind and --port to override server.ini settings.","title":"Exposing the Server"},{"location":"Development-setup/#running","text":"Once everything is installed and the server is configured, you can proceed to run the Faraday server script: $ faraday-server If you want to run the server in background mode, you should use the --start option: $ faraday-server --start This is the recommended way to do this. Other methods like using the bash & could cause unexpected IOErrors and other related exceptions.","title":"Running"},{"location":"Development-setup/#web-ui","text":"Once the server is running, you can access Faraday's Web UI using any browser: just point it to http://SERVER_IP:SERVER_PORT/ (by default it will be http://localhost:5985/ ) and you can start playing with Faraday.","title":"Web UI"},{"location":"Development-setup/#faraday-client","text":"Faraday Client is the software which will allow you to work with your favorite security tools and capture their output in an organized manner. It works under a GTK+3 interface with the popular VTE terminal with a custom ZSH shell that respects the user's configuration (yes, that means you get to keep your exact ZSH terminal inside Faraday, even if you use ZPrezto or Oh My ZSH). From the client you can also create and delete workspaces, specify plugin configuration, view information about your hosts, resolve conflics that may arise and much more. It's also a responsibility of the client to send all of the collected information to the server, which will then process it and format it in an friendly way for you to view, edit, and confirm. The client is bundled in the same package as the server, so if you have already downloaded Faraday, you can skip the next step.","title":"Faraday Client"},{"location":"Development-setup/#downloading_1","text":"Download the latest tarball or clone the Faraday Git Project repository and checkout dev branch: 1 2 3 $ git clone https://github.com/infobyte/faraday.git faraday-dev $ git checkout dev $ cd faraday-dev","title":"Downloading"},{"location":"Development-setup/#requirements_1","text":"Faraday Client works under any modern Linux distribution or Mac OS X, and needs Python 3.6+. The Python requirements for the client are stored in the requirements.txt file . Some additional requirements are necessary for specific features to work, these are stored in the requirements_extras.txt file . Out tests include Debian , Ubuntu , Kali , Backtrack .","title":"Requirements"},{"location":"Development-setup/#installing-system-dependencies_1","text":"","title":"Installing system dependencies"},{"location":"Development-setup/#debian-and-derivatives","text":"You can run the following command to install the required dependencies on any Debian based distribution. $ sudo apt update If you are running Ubuntu 12.04 LTS, or Ubuntu 14.04 LTS, please execute this command: $ sudo apt install libpq-dev python-pip python-dev gir1.2-gtk-3.0 gir1.2-vte-2.90 python-gobject zsh curl If you are any other version, please execute the following command: $ sudo apt install libpq-dev python-pip python-dev gir1.2-gtk-3.0 gir1.2-vte-2.91 python-gobject zsh curl","title":"Debian and derivatives"},{"location":"Development-setup/#gentoo","text":"This are the dependencies for Gentoo with Emerge: dev-libs/gobject-introspection net-libs/webkit-gtk x11-libs/gtk+ \\ x11-libs/vte dev-python/pygobject app-shells/zsh net-misc/curl dev-python/ipython Extras dependencies: dev-python/beautifulsoup dev-python/gevent-psycopg2","title":"Gentoo"},{"location":"Development-setup/#using-gtk-client-with-virtualenv","text":"If you are working inside a Virtual enviroment you need to follow this extra steps for GTK to work: pip install vext pip install vext.pygtk pip install vext.gi","title":"Using GTK client with virtualenv"},{"location":"Development-setup/#configuration_1","text":"Now you need to configure every Faraday instance so it can connect to the server. If you're using the GTK interface click on the Preferences icon and fill in the server URL, for example http://127.0.0.1:5985 If you are using the --gui=no-gui option Edit the file: ~/.faraday/config/user.xml And search for the following api_uri tag and set it to the server URL, for example: <api_uri>http://127.0.0.1:5985</api_uri> If you are using SSL you need to use https in your configuration. For example use https://192.168.0.20 when you are using an nginx server with SSL enabled and faraday-server is listening on 192.168.0.20.","title":"Configuration"},{"location":"Development-setup/#running_1","text":"Once you have already configured the client and have Faraday Server running, you simply have to run: $ faraday-client Some distributions or installations require additional steps, so look down below if you are using something different than Debian or Ubuntu, or if you need to apply some configuration to the client.","title":"Running"},{"location":"Development-setup/#kali","text":"Faraday comes pre-installed in Kali Rolling. The package name is python-faraday . Keep in mind that this package can only be used for the Community edition . In order to run Faraday in Kali: $ systemctl start postgresql.service $ cd /usr/share/python-faraday $ faraday-server $ faraday-client Due to Kali's package updates the pre-installed package may not be the last version. If you want the latest updates use the Debian install steps .","title":"Kali"},{"location":"Development-setup/#gentoo_1","text":"If you are running Gentoo, this are the dependencies with Emerge: dev-python/flask-sqlalchemy dev-python/service_identity dev-python/twisted \\ dev-python/pyopenssl dev-java/mockito dev-python/Whoosh \\ dev-python/configargparse dev-python/restkit dev-python/requests www-servers/tornado \\ dev-python/flask dev-python/colorama dev-python/setuptools dev-python/pip dev-libs/libpqxx \\ libffi-dev","title":"Gentoo"},{"location":"FAQ-v4/","text":"Index \u00b6 Where does the name come from? What is Faraday? Is Faraday free? Does Faraday have collaboration tools? Which platforms are supported? Does Faraday work on my servers or on the cloud? What are the system requirements to run Faraday? I purchased a License, now what? Can I keep using the Kali version with my newly bought pro/corp license? Can I install the Server and/or Client in my own box instead of using a Virtual Machine? What version am I using? What if I want to add a Vulnerability manually? How do I bind Faraday to 0.0.0.0? Where are my credentials? I lose my credentials? Is your question not listed here? Contact us Topics \u00b6 Where does the name come from? \u00b6 The name was picked to honor Michael Faraday , an English scientist whose main discoveries include electromagnetism induction, diamagnetism and electrolysis. Mainly his six principles of scientific discipline, acquired at a young age from Isaac Watts' \"The Improvement of the mind\": * Always carry a small pad to take notes at any time * Maintain abundant correspondence * Collaborate regularly with others to exchange ideas * Avoid controversy * Verify everything that was said to him * Do not generalize, speak and write as precisely as possible Read more at: https://en.wikipedia.org/wiki/Michael_Faraday http://www.eng.auburn.edu/~sjreeves/cm/improve.html What is Faraday? \u00b6 Faraday is a multiuser integrated penetration test and vulnerability management environment . It is to Penetration Testing what an IDE is to Development. The main purpose of Faraday is to re-use the available tools in the community to take advantage of them in a multiuser way. Is Faraday free? \u00b6 Yes, we have a Community version which is totally free, you can download it from Github We also have two Commercial versions, details about those in our webpage . Compare different versions of Faraday Does Faraday have collaboration tools? \u00b6 Faraday supports over 80 tools. Full plugin list available here . Which platforms are supported? \u00b6 RedHat, CentOS, Fedora, Debian, Kali, Ubuntu, Docker. Does Faraday work on my servers or on the cloud? \u00b6 Yes it does, depending on your needs. For more information you can contact us at sales@infobytesec.com What are the system requirements to run Faraday? \u00b6 CPU: 2 Dualcore 2GHz Intel CPU Disk: 40 GB Memory: 4 GB RAM (8 GB RAM recommended) Current tests include Debian, Ubuntu, Kali, and Backtrack. If instead of installing you want to take a quick look at Faraday you can also use Docker . I purchased a License, now what? \u00b6 You will receive an email with a link to download everything regarding your license. If you haven\u2019t received it or are having issues, please contact us at sales@infobytesec.com . Can I keep using the Kali version with my newly bought Professional/Corporate license? \u00b6 In a nutshell, yes. Even though the Kali Faraday version is incompatible with both the Professional and Corporate licenses, you can upgrade the platform in the same box without losing all your data. You will need to remove the package python-faraday and then you need to install the pro/corp .deb with apt install ./faraday-server_amd64.deb Can I install the Server and/or Client in my own box instead of using a Virtual Machine you provided? \u00b6 The only intended purpose for the Faraday VM is as a commercial demo. For production environments we recommend doing a fresh install in a Ubuntu Server, please do not use your provided Demo License VM. If the use of a Virtualized environment is a must-have, then we recommend doing a proper install in a fresh Virtual Machine following the regular installation steps. How do I know which Faraday Version I'm using? \u00b6 By running faraday-server --version or hovering your mouse over the Faraday logo at the top left of the Web UI. Latest version and information available in the Upgrading Faraday section. To get the latest available version: for the community version, visit Github for the commercial versions, check the Customer Portal What if I want to add a Vulnerability manually? \u00b6 You can do this using our Web UI, read our documentation on manually adding vulnerabilities . How do I bind Faraday to 0.0.0.0? \u00b6 Just go to /home/faraday/.faraday/config/server.ini and inside the [faraday-server] section write: bind_address=0.0.0.0 Restart Faraday Server if you had it running. That's it! Where are my credentials? \u00b6 When installing Faraday you run the following command: faraday-manage initdb and get your credentials on the terminal (something like this): username: faraday password: a7e8d3seWqy5 If you don't remember this, below, you can see how to re-generate them. I lost my credentials \u00b6 If during the instalation you forget to store or keep your credentials, don't worry, you can either create a new admin user or change the default admin user: Change faraday default admin user (enter the new password): $ faraday-manage change-password Username: faraday Password: Repeat for confirmation: Password changed succesfully Create a new admin user (Only for paid users): $ faraday-manage create-superuser Username: admin Email: admin@example.com Password: Repeat for confirmation: User admin created successfully! Is your question not listed here? Generate a support ticket to get aid from our Help Desk staff . If you are using Faraday community, you can reach us by using our GitHub issues page .","title":"FAQs"},{"location":"FAQ-v4/#index","text":"Where does the name come from? What is Faraday? Is Faraday free? Does Faraday have collaboration tools? Which platforms are supported? Does Faraday work on my servers or on the cloud? What are the system requirements to run Faraday? I purchased a License, now what? Can I keep using the Kali version with my newly bought pro/corp license? Can I install the Server and/or Client in my own box instead of using a Virtual Machine? What version am I using? What if I want to add a Vulnerability manually? How do I bind Faraday to 0.0.0.0? Where are my credentials? I lose my credentials? Is your question not listed here? Contact us","title":"Index"},{"location":"FAQ-v4/#topics","text":"","title":"Topics"},{"location":"FAQ-v4/#where-does-the-name-come-from","text":"The name was picked to honor Michael Faraday , an English scientist whose main discoveries include electromagnetism induction, diamagnetism and electrolysis. Mainly his six principles of scientific discipline, acquired at a young age from Isaac Watts' \"The Improvement of the mind\": * Always carry a small pad to take notes at any time * Maintain abundant correspondence * Collaborate regularly with others to exchange ideas * Avoid controversy * Verify everything that was said to him * Do not generalize, speak and write as precisely as possible Read more at: https://en.wikipedia.org/wiki/Michael_Faraday http://www.eng.auburn.edu/~sjreeves/cm/improve.html","title":"Where does the name come from?"},{"location":"FAQ-v4/#what-is-faraday","text":"Faraday is a multiuser integrated penetration test and vulnerability management environment . It is to Penetration Testing what an IDE is to Development. The main purpose of Faraday is to re-use the available tools in the community to take advantage of them in a multiuser way.","title":"What is Faraday?"},{"location":"FAQ-v4/#is-faraday-free","text":"Yes, we have a Community version which is totally free, you can download it from Github We also have two Commercial versions, details about those in our webpage . Compare different versions of Faraday","title":"Is Faraday free?"},{"location":"FAQ-v4/#does-faraday-have-collaboration-tools","text":"Faraday supports over 80 tools. Full plugin list available here .","title":"Does Faraday have collaboration tools?"},{"location":"FAQ-v4/#which-platforms-are-supported","text":"RedHat, CentOS, Fedora, Debian, Kali, Ubuntu, Docker.","title":"Which platforms are supported?"},{"location":"FAQ-v4/#does-faraday-work-on-my-servers-or-on-the-cloud","text":"Yes it does, depending on your needs. For more information you can contact us at sales@infobytesec.com","title":"Does Faraday work on my servers or on the cloud?"},{"location":"FAQ-v4/#what-are-the-system-requirements-to-run-faraday","text":"CPU: 2 Dualcore 2GHz Intel CPU Disk: 40 GB Memory: 4 GB RAM (8 GB RAM recommended) Current tests include Debian, Ubuntu, Kali, and Backtrack. If instead of installing you want to take a quick look at Faraday you can also use Docker .","title":"What are the system requirements to run Faraday?"},{"location":"FAQ-v4/#i-purchased-a-license-now-what","text":"You will receive an email with a link to download everything regarding your license. If you haven\u2019t received it or are having issues, please contact us at sales@infobytesec.com .","title":"I purchased a License, now what?"},{"location":"FAQ-v4/#can-i-keep-using-the-kali-version-with-my-newly-bought-professionalcorporate-license","text":"In a nutshell, yes. Even though the Kali Faraday version is incompatible with both the Professional and Corporate licenses, you can upgrade the platform in the same box without losing all your data. You will need to remove the package python-faraday and then you need to install the pro/corp .deb with apt install ./faraday-server_amd64.deb","title":"Can I keep using the Kali version with my newly bought Professional/Corporate license?"},{"location":"FAQ-v4/#can-i-install-the-server-andor-client-in-my-own-box-instead-of-using-a-virtual-machine-you-provided","text":"The only intended purpose for the Faraday VM is as a commercial demo. For production environments we recommend doing a fresh install in a Ubuntu Server, please do not use your provided Demo License VM. If the use of a Virtualized environment is a must-have, then we recommend doing a proper install in a fresh Virtual Machine following the regular installation steps.","title":"Can I install the Server and/or Client in my own box instead of using a Virtual Machine you provided?"},{"location":"FAQ-v4/#how-do-i-know-which-faraday-version-im-using","text":"By running faraday-server --version or hovering your mouse over the Faraday logo at the top left of the Web UI. Latest version and information available in the Upgrading Faraday section. To get the latest available version: for the community version, visit Github for the commercial versions, check the Customer Portal","title":"How do I know which Faraday Version I'm using?"},{"location":"FAQ-v4/#what-if-i-want-to-add-a-vulnerability-manually","text":"You can do this using our Web UI, read our documentation on manually adding vulnerabilities .","title":"What if I want to add a Vulnerability manually?"},{"location":"FAQ-v4/#how-do-i-bind-faraday-to-0000","text":"Just go to /home/faraday/.faraday/config/server.ini and inside the [faraday-server] section write: bind_address=0.0.0.0 Restart Faraday Server if you had it running. That's it!","title":"How do I bind Faraday to 0.0.0.0?"},{"location":"FAQ-v4/#where-are-my-credentials","text":"When installing Faraday you run the following command: faraday-manage initdb and get your credentials on the terminal (something like this): username: faraday password: a7e8d3seWqy5 If you don't remember this, below, you can see how to re-generate them.","title":"Where are my credentials?"},{"location":"FAQ-v4/#i-lost-my-credentials","text":"If during the instalation you forget to store or keep your credentials, don't worry, you can either create a new admin user or change the default admin user: Change faraday default admin user (enter the new password): $ faraday-manage change-password Username: faraday Password: Repeat for confirmation: Password changed succesfully Create a new admin user (Only for paid users): $ faraday-manage create-superuser Username: admin Email: admin@example.com Password: Repeat for confirmation: User admin created successfully! Is your question not listed here? Generate a support ticket to get aid from our Help Desk staff . If you are using Faraday community, you can reach us by using our GitHub issues page .","title":"I lost my credentials"},{"location":"Faraday-Manage-Settings-v4/","text":"The purpose of this documentation is to explain how to use faraday-manage settings Update executive reports configuration \u00b6 To update executive reports configuration to enable markdown faraday-manage settings -a show executive_reports markdown: True border_size: 3 Then restart your Faraday Server instance systemctl restart faraday-server Update SMTP configuration \u00b6 To setup your SMTP configurations faraday-manage settings -a update smtp enabled: username host: port: sender: ssl: Then update every field to the desired configuration Update reports configuration and custom plugin folder \u00b6 To update the custom plugin folder run the following command faraday-manage settings -a update reports ignore_info_severity[False]: custom_plugins_folder: Then update the field custom plugin folder to the specified path Update dashboard configuration \u00b6 To update the dashboard configuration, faraday-manage settings -a update dashboard show_vulns_by_price[False]: Enable SAML \u00b6 To enable SAML and update the SAML configuration, faraday-manage settings -a update saml enabled[False]: display_name [Identity Provider]: identity_id []: user_role [admin]: attribute_identifier []: sso_url [http://localhost/saml/login]: sp_certificate []: sp_private_key []: idp_certificate []:","title":"Faraday Manage Settings"},{"location":"Faraday-Manage-Settings-v4/#update-executive-reports-configuration","text":"To update executive reports configuration to enable markdown faraday-manage settings -a show executive_reports markdown: True border_size: 3 Then restart your Faraday Server instance systemctl restart faraday-server","title":"Update executive reports configuration"},{"location":"Faraday-Manage-Settings-v4/#update-smtp-configuration","text":"To setup your SMTP configurations faraday-manage settings -a update smtp enabled: username host: port: sender: ssl: Then update every field to the desired configuration","title":"Update SMTP configuration"},{"location":"Faraday-Manage-Settings-v4/#update-reports-configuration-and-custom-plugin-folder","text":"To update the custom plugin folder run the following command faraday-manage settings -a update reports ignore_info_severity[False]: custom_plugins_folder: Then update the field custom plugin folder to the specified path","title":"Update reports configuration and custom plugin folder"},{"location":"Faraday-Manage-Settings-v4/#update-dashboard-configuration","text":"To update the dashboard configuration, faraday-manage settings -a update dashboard show_vulns_by_price[False]:","title":"Update dashboard configuration"},{"location":"Faraday-Manage-Settings-v4/#enable-saml","text":"To enable SAML and update the SAML configuration, faraday-manage settings -a update saml enabled[False]: display_name [Identity Provider]: identity_id []: user_role [admin]: attribute_identifier []: sso_url [http://localhost/saml/login]: sp_certificate []: sp_private_key []: idp_certificate []:","title":"Enable SAML"},{"location":"Faraday-Manage-v4/","text":"Faraday Manage is a backend tool that helps us administrate Faraday's configuration. To use Faraday Manage, you can run it as follow: $ faraday-manage COMMAND If you run only faraday-manage , it will list you all the available commands. Available Commands \u00b6 add-custom-attribute \u00b6 This command allows you to create Custom Fields from the terminal. For more information about Custom Fields, you can see their wiki page change-password \u00b6 It allows you to change your user's password create-superuser \u00b6 The name says it all! This is the way to create a new admin user through the command line. create-tables \u00b6 This command allows the user to manually create a table on Faraday's database. It would come in handy if something in the initdb command fails for example. create workspace \u00b6 Create workspace database-schema \u00b6 This will print a PNG image with Faraday's internal working scheme. delete-custom-field \u00b6 It allows you to delete a Custom Field from terminal generate-nginx-config \u00b6 This command displays the nginx config example to be added in nginx config generate-roles-permission \u00b6 This command displays the roles permission in a JSON file generate-rsa-keys \u00b6 It will create an RSA key for integrations import-license \u00b6 Imports Faraday License. import-methodologies \u00b6 Imports methodologies and tasks from a csv file import-vulnerability-templates \u00b6 Imports vuln templates from a file initdb \u00b6 This command needs to be executed only at the moment of Faraday's installation. It will create the tables of the database, Faraday's user among other things. If you try to execute this a second time it will indeed fail. Danger Warning: Please do not lose the random password that this command will print on the screen. It will be necessary to login into Faraday. list-plugins \u00b6 Lists available plugins. migrate \u00b6 Migrates database schema. openapi-yaml \u00b6 Show URLs in OpenApi format remove-rsa-keys \u00b6 Remove RSA key pair generated for an... rename-user \u00b6 Change username. settings \u00b6 It allows you to manage settings inside faraday configuration show-rsa-keys \u00b6 Show RSA key pair for an integration's show-urls \u00b6 Prints a list of all the URLs available to communicate with our API Rest. sql-shell \u00b6 This command will open a PostgreSQL shell already configured with Faraday's user and configuration.","title":"Faraday Manage"},{"location":"Faraday-Manage-v4/#available-commands","text":"","title":"Available Commands"},{"location":"Faraday-Manage-v4/#add-custom-attribute","text":"This command allows you to create Custom Fields from the terminal. For more information about Custom Fields, you can see their wiki page","title":"add-custom-attribute"},{"location":"Faraday-Manage-v4/#change-password","text":"It allows you to change your user's password","title":"change-password"},{"location":"Faraday-Manage-v4/#create-superuser","text":"The name says it all! This is the way to create a new admin user through the command line.","title":"create-superuser"},{"location":"Faraday-Manage-v4/#create-tables","text":"This command allows the user to manually create a table on Faraday's database. It would come in handy if something in the initdb command fails for example.","title":"create-tables"},{"location":"Faraday-Manage-v4/#create-workspace","text":"Create workspace","title":"create workspace"},{"location":"Faraday-Manage-v4/#database-schema","text":"This will print a PNG image with Faraday's internal working scheme.","title":"database-schema"},{"location":"Faraday-Manage-v4/#delete-custom-field","text":"It allows you to delete a Custom Field from terminal","title":"delete-custom-field"},{"location":"Faraday-Manage-v4/#generate-nginx-config","text":"This command displays the nginx config example to be added in nginx config","title":"generate-nginx-config"},{"location":"Faraday-Manage-v4/#generate-roles-permission","text":"This command displays the roles permission in a JSON file","title":"generate-roles-permission"},{"location":"Faraday-Manage-v4/#generate-rsa-keys","text":"It will create an RSA key for integrations","title":"generate-rsa-keys"},{"location":"Faraday-Manage-v4/#import-license","text":"Imports Faraday License.","title":"import-license"},{"location":"Faraday-Manage-v4/#import-methodologies","text":"Imports methodologies and tasks from a csv file","title":"import-methodologies"},{"location":"Faraday-Manage-v4/#import-vulnerability-templates","text":"Imports vuln templates from a file","title":"import-vulnerability-templates"},{"location":"Faraday-Manage-v4/#initdb","text":"This command needs to be executed only at the moment of Faraday's installation. It will create the tables of the database, Faraday's user among other things. If you try to execute this a second time it will indeed fail. Danger Warning: Please do not lose the random password that this command will print on the screen. It will be necessary to login into Faraday.","title":"initdb"},{"location":"Faraday-Manage-v4/#list-plugins","text":"Lists available plugins.","title":"list-plugins"},{"location":"Faraday-Manage-v4/#migrate","text":"Migrates database schema.","title":"migrate"},{"location":"Faraday-Manage-v4/#openapi-yaml","text":"Show URLs in OpenApi format","title":"openapi-yaml"},{"location":"Faraday-Manage-v4/#remove-rsa-keys","text":"Remove RSA key pair generated for an...","title":"remove-rsa-keys"},{"location":"Faraday-Manage-v4/#rename-user","text":"Change username.","title":"rename-user"},{"location":"Faraday-Manage-v4/#settings","text":"It allows you to manage settings inside faraday configuration","title":"settings"},{"location":"Faraday-Manage-v4/#show-rsa-keys","text":"Show RSA key pair for an integration's","title":"show-rsa-keys"},{"location":"Faraday-Manage-v4/#show-urls","text":"Prints a list of all the URLs available to communicate with our API Rest.","title":"show-urls"},{"location":"Faraday-Manage-v4/#sql-shell","text":"This command will open a PostgreSQL shell already configured with Faraday's user and configuration.","title":"sql-shell"},{"location":"Faraday-Zap-extension/","text":"Importing to Faraday a XML report generated by OWASP Zap \u00b6 Using Faraday Zap Extension \u00b6 With Faraday Zap Extension, you are able to send new issues directly from OWASP Zap into Faraday. Download Faraday Zap Extension \u00b6 The first thing we need to do is to download Faraday Zap Extension . Configuring Faraday Zap Extension \u00b6 Once we have downloaded it, we need to load it into OWASP Zap. You can load an add-on as the sample image below or by typing [Ctrl + L]: Now we need to authenticate into the Faraday Zap extension by using our Faraday's credentials. Go into Tools/Faraday configuration options or type [Ctrl+Alt+F]: Type your credentials and set the Faraday Server URL to the correct one. Then click Login : Once you are logged in, you can go to the Configuration tab and select the workspace where you want to work in: Note: by clicking on Refresh , you can update your workspaces from Faraday. Sending requests and alerts into Faraday \u00b6 Now that you have configured Faraday Zap extension, you can proceed to send issues into Faraday: Sending a request: Sending an alert: Uninstalling Faraday Zap Extension \u00b6 To uninstall the extension, go into Manage Add-ons , select the extension named Faraday and then click on Uninstall Selected","title":"Faraday Zap extension"},{"location":"Faraday-Zap-extension/#importing-to-faraday-a-xml-report-generated-by-owasp-zap","text":"","title":"Importing to Faraday a XML report generated by OWASP Zap"},{"location":"Faraday-Zap-extension/#using-faraday-zap-extension","text":"With Faraday Zap Extension, you are able to send new issues directly from OWASP Zap into Faraday.","title":"Using Faraday Zap Extension"},{"location":"Faraday-Zap-extension/#download-faraday-zap-extension","text":"The first thing we need to do is to download Faraday Zap Extension .","title":"Download Faraday Zap Extension"},{"location":"Faraday-Zap-extension/#configuring-faraday-zap-extension","text":"Once we have downloaded it, we need to load it into OWASP Zap. You can load an add-on as the sample image below or by typing [Ctrl + L]: Now we need to authenticate into the Faraday Zap extension by using our Faraday's credentials. Go into Tools/Faraday configuration options or type [Ctrl+Alt+F]: Type your credentials and set the Faraday Server URL to the correct one. Then click Login : Once you are logged in, you can go to the Configuration tab and select the workspace where you want to work in: Note: by clicking on Refresh , you can update your workspaces from Faraday.","title":"Configuring Faraday Zap Extension"},{"location":"Faraday-Zap-extension/#sending-requests-and-alerts-into-faraday","text":"Now that you have configured Faraday Zap extension, you can proceed to send issues into Faraday: Sending a request: Sending an alert:","title":"Sending requests and alerts into Faraday"},{"location":"Faraday-Zap-extension/#uninstalling-faraday-zap-extension","text":"To uninstall the extension, go into Manage Add-ons , select the extension named Faraday and then click on Uninstall Selected","title":"Uninstalling Faraday Zap Extension"},{"location":"Filters/","text":"Search \u00b6 Using Search Field in Faraday V 4 \u00b6 In ordear to ease the need of searching we've developed a way to use the search bar in order to be able to select the search fields and easily build the queries needed. To select Vulns click on Vulnerability as the image bellow: then select the desired Field as: Operator value Contains : and then type the value that will be searched: After finishing typing hit Enter or click on the search button Filters \u00b6 Making search queries \u00b6 Clients can make advanced searchs using the UI Clicking on the Switch to advanced mode Link, after doing this the search field will admit using a dictionary with values as the description bellow {\"name\": <fieldname>, \"op\": <operatorname>, \"val\": <argument>} The operator strings recognized by the API incude: ==, eq, equals, equals_to !=, neq, does_not_equal, not_equal_to >, gt, <, lt >=, ge, gte, geq, <=, le, lte, leq in, not_in is_null, is_not_null like ilike has any Manage vulns (aka status report) fields \u00b6 Field name Field Type Valid Operators Confirmed Working name string all description string all severity severities enum eq , neq target string all service relationship service.name string all service.port number eq , neq , > , >= , < , <= easeofresolution (ease_of_resolution in model) ease_of_resolutions enum eq , neq references (reference_instances in model) relationship references.name string all resolution string all data string all request string all method string all response string all pname (parameter_name en el modelo) string all params (parameters en el model) string all path string all query (query_string en el modelo) string all website string all creator relationship creator.username string all type vuln_types enum eq , neq confirmed boolean eq , neq id number eq , neq , > , >= , < , <= Data types 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 boolean = [ true, True, false, False ] EASE_OF_RESOLUTIONS = [ 'trivial', 'simple', 'moderate', 'difficult', 'infeasible' ] VULN_TYPES = [ 'vulnerability', 'vulnerability_web', 'vulnerability_code' ] SEVERITIES = [ 'critical', 'high', 'medium', 'low', 'informational', 'unclassified', ] STATUS = [ 'open', 'closed', 'filtered' ] Some examples \u00b6 Endpoint http://localhost:5985/_api/v2/ws/testws1/vulns/filter?q={\"filters\": [...]} Basic one name == \"test 1\" { \"filters\" : [ { \"name\" : \"name\" , \"op\" : \"eq\" , \"val\" : \"test1\" } ] } With and severity == medium { \"filters\" : [ { \"name\" : \"name\" , \"op\" : \"eq\" , \"val\" : \"test1\" }, { \"name\" : \"severity\" , \"op\" : \"eq\" , \"val\" : \"medium\" } ] } A bit complex one name like \"t%\" and (severity == \"critical\" or severity == \"medium\") { \"filters\" : [ { \"name\" : \"name\" , \"op\" : \"like\" , \"val\" : \"t%\" }, { \"or\" : [ { \"name\" : \"severity\" , \"op\" : \"eq\" , \"val\" : \"medium\" } , { \"name\" : \"severity\" , \"op\" : \"eq\" , \"val\" : \"critical\" } ] } ] } so to do this query it can be used something like this: With case insensitive logic and fields with relationships name ilike \"%php%\" and (service.name like \"%http%\" or service.port eq 80) { \"filters\" : [ { \"name\" : \"name\" , \"op\" : \"ilike\" , \"val\" : \"%php%\" }, { \"or\" : [ { \"name\" : \"service\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"name\" , \"op\" : \"like\" , \"val\" : \"%http%\" } } , { \"name\" : \"service\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"port\" , \"op\" : \"eq\" , \"val\" : \"80\" } } ] } ] } Previous filters but just the ones created by user faraday name ilike \"php%\" and (service.name like \"%http%\" or service.port eq 80) and creator.username == 'faraday' { \"filters\" : [ { \"name\" : \"creator\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"username\" , \"op\" : \"eq\" , \"val\" : \"faraday\" } } , { \"name\" : \"name\" , \"op\" : \"ilike\" , \"val\" : \"%php%\" }, { \"or\" : [ { \"name\" : \"service\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"name\" , \"op\" : \"like\" , \"val\" : \"%http%\" } } , { \"name\" : \"service\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"port\" , \"op\" : \"eq\" , \"val\" : \"80\" } } ] } ] } HOSTS \u00b6 Manage hosts fields \u00b6 Endpoint http://localhost:5985/_api/v2/ws/testws1/hosts/filter?q={\"filters\": [..] Field name Field Type Valid Operators ip string all hostnames relationship hostnames.name string all services relationship services.name string all services.port number eq , neq , > , >= , < , <= services.status status enum eq , neq os string all owned boolean eq , neq vulnerability_critical_generic_count number eq , neq , > , >= , < , <= vulnerability_high_generic_count number eq , neq , > , >= , < , <= vulnerability_medium_generic_count number eq , neq , > , >= , < , <= vulnerability_low_generic_count number eq , neq , > , >= , < , <= vulnerability_info_generic_count number eq , neq , > , >= , < , <= vulnerability_unclassified_generic_count number eq , neq , > , >= , < , <= Some examples { \"filters\" : [ { \"and\" : [ { \"name\" : \"hostnames\" , \"op\" : \"any\" , \"val\" : { \"name\" : \"name\" , \"op\" : \"eq\" , \"val\" : \"asdf1\" } } ] } ] } { \"filters\" : [ { \"and\" : [ { \"name\" : \"services\" , \"op\" : \"any\" , \"val\" : { \"name\" : \"port\" , \"op\" : \"eq\" , \"val\" : \"80\" } } ] } ] } { \"filters\" : [ { \"name\" : \"ip\" , \"op\" : \"like\" , \"val\" : \"192.168.0.%\" } ] }","title":"Search"},{"location":"Filters/#search","text":"","title":"Search"},{"location":"Filters/#using-search-field-in-faraday-v-4","text":"In ordear to ease the need of searching we've developed a way to use the search bar in order to be able to select the search fields and easily build the queries needed. To select Vulns click on Vulnerability as the image bellow: then select the desired Field as: Operator value Contains : and then type the value that will be searched: After finishing typing hit Enter or click on the search button","title":"Using Search Field in Faraday V 4"},{"location":"Filters/#filters","text":"","title":"Filters"},{"location":"Filters/#making-search-queries","text":"Clients can make advanced searchs using the UI Clicking on the Switch to advanced mode Link, after doing this the search field will admit using a dictionary with values as the description bellow {\"name\": <fieldname>, \"op\": <operatorname>, \"val\": <argument>} The operator strings recognized by the API incude: ==, eq, equals, equals_to !=, neq, does_not_equal, not_equal_to >, gt, <, lt >=, ge, gte, geq, <=, le, lte, leq in, not_in is_null, is_not_null like ilike has any","title":"Making search queries"},{"location":"Filters/#manage-vulns-aka-status-report-fields","text":"Field name Field Type Valid Operators Confirmed Working name string all description string all severity severities enum eq , neq target string all service relationship service.name string all service.port number eq , neq , > , >= , < , <= easeofresolution (ease_of_resolution in model) ease_of_resolutions enum eq , neq references (reference_instances in model) relationship references.name string all resolution string all data string all request string all method string all response string all pname (parameter_name en el modelo) string all params (parameters en el model) string all path string all query (query_string en el modelo) string all website string all creator relationship creator.username string all type vuln_types enum eq , neq confirmed boolean eq , neq id number eq , neq , > , >= , < , <= Data types 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 boolean = [ true, True, false, False ] EASE_OF_RESOLUTIONS = [ 'trivial', 'simple', 'moderate', 'difficult', 'infeasible' ] VULN_TYPES = [ 'vulnerability', 'vulnerability_web', 'vulnerability_code' ] SEVERITIES = [ 'critical', 'high', 'medium', 'low', 'informational', 'unclassified', ] STATUS = [ 'open', 'closed', 'filtered' ]","title":"Manage vulns (aka status report) fields"},{"location":"Filters/#some-examples","text":"Endpoint http://localhost:5985/_api/v2/ws/testws1/vulns/filter?q={\"filters\": [...]} Basic one name == \"test 1\" { \"filters\" : [ { \"name\" : \"name\" , \"op\" : \"eq\" , \"val\" : \"test1\" } ] } With and severity == medium { \"filters\" : [ { \"name\" : \"name\" , \"op\" : \"eq\" , \"val\" : \"test1\" }, { \"name\" : \"severity\" , \"op\" : \"eq\" , \"val\" : \"medium\" } ] } A bit complex one name like \"t%\" and (severity == \"critical\" or severity == \"medium\") { \"filters\" : [ { \"name\" : \"name\" , \"op\" : \"like\" , \"val\" : \"t%\" }, { \"or\" : [ { \"name\" : \"severity\" , \"op\" : \"eq\" , \"val\" : \"medium\" } , { \"name\" : \"severity\" , \"op\" : \"eq\" , \"val\" : \"critical\" } ] } ] } so to do this query it can be used something like this: With case insensitive logic and fields with relationships name ilike \"%php%\" and (service.name like \"%http%\" or service.port eq 80) { \"filters\" : [ { \"name\" : \"name\" , \"op\" : \"ilike\" , \"val\" : \"%php%\" }, { \"or\" : [ { \"name\" : \"service\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"name\" , \"op\" : \"like\" , \"val\" : \"%http%\" } } , { \"name\" : \"service\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"port\" , \"op\" : \"eq\" , \"val\" : \"80\" } } ] } ] } Previous filters but just the ones created by user faraday name ilike \"php%\" and (service.name like \"%http%\" or service.port eq 80) and creator.username == 'faraday' { \"filters\" : [ { \"name\" : \"creator\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"username\" , \"op\" : \"eq\" , \"val\" : \"faraday\" } } , { \"name\" : \"name\" , \"op\" : \"ilike\" , \"val\" : \"%php%\" }, { \"or\" : [ { \"name\" : \"service\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"name\" , \"op\" : \"like\" , \"val\" : \"%http%\" } } , { \"name\" : \"service\" , \"op\" : \"has\" , \"val\" : { \"name\" : \"port\" , \"op\" : \"eq\" , \"val\" : \"80\" } } ] } ] }","title":"Some examples"},{"location":"Filters/#hosts","text":"","title":"HOSTS"},{"location":"Filters/#manage-hosts-fields","text":"Endpoint http://localhost:5985/_api/v2/ws/testws1/hosts/filter?q={\"filters\": [..] Field name Field Type Valid Operators ip string all hostnames relationship hostnames.name string all services relationship services.name string all services.port number eq , neq , > , >= , < , <= services.status status enum eq , neq os string all owned boolean eq , neq vulnerability_critical_generic_count number eq , neq , > , >= , < , <= vulnerability_high_generic_count number eq , neq , > , >= , < , <= vulnerability_medium_generic_count number eq , neq , > , >= , < , <= vulnerability_low_generic_count number eq , neq , > , >= , < , <= vulnerability_info_generic_count number eq , neq , > , >= , < , <= vulnerability_unclassified_generic_count number eq , neq , > , >= , < , <= Some examples { \"filters\" : [ { \"and\" : [ { \"name\" : \"hostnames\" , \"op\" : \"any\" , \"val\" : { \"name\" : \"name\" , \"op\" : \"eq\" , \"val\" : \"asdf1\" } } ] } ] } { \"filters\" : [ { \"and\" : [ { \"name\" : \"services\" , \"op\" : \"any\" , \"val\" : { \"name\" : \"port\" , \"op\" : \"eq\" , \"val\" : \"80\" } } ] } ] } { \"filters\" : [ { \"name\" : \"ip\" , \"op\" : \"like\" , \"val\" : \"192.168.0.%\" } ] }","title":"Manage hosts fields"},{"location":"First-Steps/","text":"Now that you have installed Faraday, we will take the first steps together in this journey Accessing Faraday Web UI \u00b6 First, navigate to Faraday Web UI and log in. Where are my credentials? Creating a Workspace \u00b6 Faraday has the concept of Workspaces where you can put all your data related to a project in one place, you can have many workspaces to represent different engagements, weekly/monthly scans for internal/dmz/external networks, specific application assessments, etc Details on Workspace here Creating a Host \u00b6 See how to create, edit and delete an asset in Assets and Services Creating a Vuln \u00b6 See how to create, edit and delete a vuln in Vulns Creating a Report \u00b6 See how to create, edit and delete a report in Reports Getting Started \u00b6 Using faraday to integrate your tools has never been this easy! Details on Getting started here","title":"First Steps"},{"location":"First-Steps/#accessing-faraday-web-ui","text":"First, navigate to Faraday Web UI and log in. Where are my credentials?","title":"Accessing Faraday Web UI"},{"location":"First-Steps/#creating-a-workspace","text":"Faraday has the concept of Workspaces where you can put all your data related to a project in one place, you can have many workspaces to represent different engagements, weekly/monthly scans for internal/dmz/external networks, specific application assessments, etc Details on Workspace here","title":"Creating a Workspace"},{"location":"First-Steps/#creating-a-host","text":"See how to create, edit and delete an asset in Assets and Services","title":"Creating a Host"},{"location":"First-Steps/#creating-a-vuln","text":"See how to create, edit and delete a vuln in Vulns","title":"Creating a Vuln"},{"location":"First-Steps/#creating-a-report","text":"See how to create, edit and delete a report in Reports","title":"Creating a Report"},{"location":"First-Steps/#getting-started","text":"Using faraday to integrate your tools has never been this easy! Details on Getting started here","title":"Getting Started"},{"location":"Getting-started/","text":"Getting Started \u00b6 Learn about Faraday holistic approach and rethink vulnerability management. Centralize your vulnerability data Automate the scanners you need Integrating faraday in your CI/CD \u00b6 Setup Bandit and OWASP ZAP in your pipeline GitHub [PDF] Jenkins [PDF] TravisCI [PDF] Setup Bandit, OWASP ZAP and SonarQube in your pipeline Gitlab [PDF]","title":"First Steps"},{"location":"Getting-started/#getting-started","text":"Learn about Faraday holistic approach and rethink vulnerability management. Centralize your vulnerability data Automate the scanners you need","title":"Getting Started"},{"location":"Getting-started/#integrating-faraday-in-your-cicd","text":"Setup Bandit and OWASP ZAP in your pipeline GitHub [PDF] Jenkins [PDF] TravisCI [PDF] Setup Bandit, OWASP ZAP and SonarQube in your pipeline Gitlab [PDF]","title":"Integrating faraday in your CI/CD"},{"location":"How-to-build-your-template/","text":"How to build a Template \u00b6 We use Jinja2 to create Report Templates. Here are listed the main variables available when creating a Template. General Variables \u00b6 These are the variables loaded when creating a report date - the date when the Report was created, as the name of the month and four digits for the year title enterprise summary conclusions recommendations scope objectives Workspace workspace.scope - a list containing the different scopes of the workspace. workspace - a dictionary with all workspace information. name description id duration.start_date duration.end_date users update_date stats.total_vulns stats.std_vulns stats.web_vulns stats.code_vulns stats.hosts stats.services stats.credentials public readonly active create_date _id Date Format start_date and end_date are displayed in timestamp format. If you want to change their format, you can use datetimeformat() function and pass the desired format as parameter. E.g.: workspace.duration.start_date|datetimeformat('%m-%d-%Y') workspace.duration.end_date|datetimeformat('%B %Y') For more information about date format check Python docs. Host hosts_amount - an int containing the amount of hosts in the Workspace hosts - a dictionary with all the hosts in the Workspace type description default_gateway ip owned tags name services versions mac hostnames vulns owner credentials service_summaries id os metadata Service services_amount - an int containing the amount of services in the Workspace services - a dictionary with all the services in the Workspace status protocol description parent tags vulns metadata owned summary port owner version host_id id credentials type ports name Vulnerability counter_severity - a dictionary with all the severities and the amount of vulns for each one vulnerability pie charts vulns_amount - an int containing the amount of vulnerabilities in the Workspace except for vulns with severity unclassified, which are not included vulns - a dictionary with all the vulnerabilities in the Workspace except for vulns with severity unclassified, which are not included update_user parent_type owned owner id impact confirmed severity service data policyviolations evidence_subdoc type refs metadata status issuetracker description parent tags easeofresolution hostnames data host_os desc name obj_id target resolution severity_numbers method params website query path request response Grouped reports will have an additional field: vulns_grouped_amount - an int containing the total amount of vulnerabilities after grouping Custom Fields in Executive Report \u00b6 You can access your Custom Attributes on the docx templates like a dictionary and by the field name: vuln.custom_fields[\"cvss\"] Jinja2 Context \u00b6 For more technical information, here is the Jinja2 context , where you can find all the DataTypes and structures implemented with Jinja. Template Examples \u00b6 Here are some basic templates. Default Templates \u00b6 Generic Grouped Generic_Template Grouped_Template Markdown \u00b6 Generic Grouped Markdown_Generic Markdown_Grouped Assets Examples \u00b6 Assets Light Dark Assets Assets_Light Assets_Dark","title":"How to Build Your Own Template"},{"location":"How-to-build-your-template/#how-to-build-a-template","text":"We use Jinja2 to create Report Templates. Here are listed the main variables available when creating a Template.","title":"How to build a Template"},{"location":"How-to-build-your-template/#general-variables","text":"These are the variables loaded when creating a report date - the date when the Report was created, as the name of the month and four digits for the year title enterprise summary conclusions recommendations scope objectives Workspace workspace.scope - a list containing the different scopes of the workspace. workspace - a dictionary with all workspace information. name description id duration.start_date duration.end_date users update_date stats.total_vulns stats.std_vulns stats.web_vulns stats.code_vulns stats.hosts stats.services stats.credentials public readonly active create_date _id Date Format start_date and end_date are displayed in timestamp format. If you want to change their format, you can use datetimeformat() function and pass the desired format as parameter. E.g.: workspace.duration.start_date|datetimeformat('%m-%d-%Y') workspace.duration.end_date|datetimeformat('%B %Y') For more information about date format check Python docs. Host hosts_amount - an int containing the amount of hosts in the Workspace hosts - a dictionary with all the hosts in the Workspace type description default_gateway ip owned tags name services versions mac hostnames vulns owner credentials service_summaries id os metadata Service services_amount - an int containing the amount of services in the Workspace services - a dictionary with all the services in the Workspace status protocol description parent tags vulns metadata owned summary port owner version host_id id credentials type ports name Vulnerability counter_severity - a dictionary with all the severities and the amount of vulns for each one vulnerability pie charts vulns_amount - an int containing the amount of vulnerabilities in the Workspace except for vulns with severity unclassified, which are not included vulns - a dictionary with all the vulnerabilities in the Workspace except for vulns with severity unclassified, which are not included update_user parent_type owned owner id impact confirmed severity service data policyviolations evidence_subdoc type refs metadata status issuetracker description parent tags easeofresolution hostnames data host_os desc name obj_id target resolution severity_numbers method params website query path request response Grouped reports will have an additional field: vulns_grouped_amount - an int containing the total amount of vulnerabilities after grouping","title":"General Variables"},{"location":"How-to-build-your-template/#custom-fields-in-executive-report","text":"You can access your Custom Attributes on the docx templates like a dictionary and by the field name: vuln.custom_fields[\"cvss\"]","title":"Custom Fields in Executive Report"},{"location":"How-to-build-your-template/#jinja2-context","text":"For more technical information, here is the Jinja2 context , where you can find all the DataTypes and structures implemented with Jinja.","title":"Jinja2 Context"},{"location":"How-to-build-your-template/#template-examples","text":"Here are some basic templates.","title":"Template Examples"},{"location":"How-to-build-your-template/#default-templates","text":"Generic Grouped Generic_Template Grouped_Template","title":"Default Templates"},{"location":"How-to-build-your-template/#markdown","text":"Generic Grouped Markdown_Generic Markdown_Grouped","title":"Markdown"},{"location":"How-to-build-your-template/#assets-examples","text":"Assets Light Dark Assets Assets_Light Assets_Dark","title":"Assets Examples"},{"location":"Install-guide-Advanced/","text":"Installation with Nix ( Community version only ) \u00b6 Before installing Faraday, we need to install Nix so Faraday runs with it sh <(curl -L https://nixos.org/nix/install) Installation finished! To ensure that the necessary environment variables are set, either log in again, or type in your shell . ~/.nix-profile/etc/profile.d/nix.sh Next, activate your nix installation running this: echo '. ~/.nix-profile/etc/profile.d/nix.sh' >>~/.bashrc Re-login, and Check the Nix Installation: nix --version For more information about Nix, please follow this link Installing Faraday git clone https://github.com/infobyte/faraday.git cd faraday-dev/ nix-shell Once the nix-shell command finish, run: faraday-server We highly recommend you to check our First Steps guide.","title":"Advanced Install"},{"location":"Install-guide-Advanced/#installation-with-nix-community-version-only","text":"Before installing Faraday, we need to install Nix so Faraday runs with it sh <(curl -L https://nixos.org/nix/install) Installation finished! To ensure that the necessary environment variables are set, either log in again, or type in your shell . ~/.nix-profile/etc/profile.d/nix.sh Next, activate your nix installation running this: echo '. ~/.nix-profile/etc/profile.d/nix.sh' >>~/.bashrc Re-login, and Check the Nix Installation: nix --version For more information about Nix, please follow this link Installing Faraday git clone https://github.com/infobyte/faraday.git cd faraday-dev/ nix-shell Once the nix-shell command finish, run: faraday-server We highly recommend you to check our First Steps guide.","title":"Installation with Nix (Community version only)"},{"location":"Install-guide-Docker/","text":"Configuration \u00b6 This image can be run as a service or as a standalone container. Both run Faraday Server without PostgreSQL. You will note that we have created /faraday-storage and /faraday-config volumes (for mounting your storage and configuration). We have also created environment variables for Faraday configuration in case you don't mount a config volume. We will get more in detail of these volumes and environment variables: Example: Running Faraday as a standalone container docker run \\ .... -v /path/to/my_doc_folder:/faraday-license \\ -v /path/to/my_storage_folder:/faraday-storage \\ -v /path/to/my_config_folder:/faraday-config .... faradaysec/faraday:X.Y.Z Running Faraday as a service vim docker-compose.yml version: '4.02' services: ... volumes: - /path/to/{my_config_folder}:/home/faraday/.faraday ... We will get more in details about this configuration below. Environment Variables \u00b6 In case you don't have a configuration file you'll need to set some environment variables. These come with default values so you'll need to customize some or all of them depending on your installation config. PGSQL_HOST=172.2.0.1 # PostgreSQL server host. PGSQL_USER=faraday_postgresql # PostgreSQL user PGSQL_PASSWD=mypgsqlpassword # PostgreSQL user's password. PGSQL_DBNAME=faraday # Faraday's database name Running Faraday \u00b6 Now that we have learnt about the volumes and the environment variables above, let's run Faraday assuming we want to connect into PostgreSQL's address 192.168.20.29 and that we have located Faraday's config folder in its default location: ~/.faraday As a standalone container \u00b6 Run the following command specifying the correct information: With environment variables docker run \\ -v ~/.faraday/doc:/faraday-license \\ -v ~/.faraday/storage:/faraday-storage \\ -p 5985:5985 \\ -e PGSQL_HOST='192.168.20.29' \\ -e PGSQL_PASSWD='mypgsqlpassword' \\ -e LISTEN_ADDR='0.0.0.0' \\ faradaysec/faraday:latest With config volume mounted docker run \\ -v ~/.faraday/doc:/faraday-license \\ -v ~/.faraday/storage:/faraday-storage \\ -v ~/.faraday/config:/faraday-config \\ -p 5985:5985 \\ faradaysec/faraday:latest To check the container, run the following command: docker container ls As you can see, Faraday Server is running in port 5985. As a service \u00b6 Initialize a Swarm: docker swarm init # In case you have more than one IP addr configured in your machine you have to specify which one to use. docker swarm init --advertise-addr=192.168.20.29 Docker Compose File: Now, you need to create a docker-compose.yml file. You can use this docker-compose as example: With environment variables version: '4.02' services: server: image: faradaysec/faraday:latest environment: - LISTEN_ADDR=0.0.0.0 - PGSQL_HOST=192.168.20.29 - PGSQL_USER=faraday_postgresql - PGSQL_PASSWD=/run/secrets/pgsql_passwd - PGSQL_DBNAME=faraday secrets: - pgsql_passwd ports: - 5985:5985 volumes: - ~/.faraday/storage:/faraday-storage deploy: replicas: 1 placement: constraints: [node.role == manager] secrets: pgsql_passwd: external: true When Faraday runs as a service, PGSQL_PASSWD can be configured with Docker secrets (default in docker-compose.yml). The simplest way to create a secret is reading from standard input (you should take care of bash history). printf mypgsqlpassword | docker secret create pgsql_passwd - Once you have created the secret, edit you docker-compose.yml and set: vim docker-compose.yml version: 'latest' services: ... environment: - PGSQL_PASSWD=/run/secrets/pgsql_passwd ... For more information about secrets, check Docker\u2019s web page With config volume mounted version: '4.02' services: server: image: faradaysec/faraday:latest ports: - 5985:5985 volumes: - ~/.faraday/storage:/faraday-storage - ~/.faraday/config:/faraday-config deploy: replicas: 1 placement: constraints: [node.role == manager] 3. Deploy: Once you are done setting up your docker-compile.yml file, lets deploy it by running the following command: docker stack deploy -c docker-compose.yml faraday 4. Check service: To check the service, run the following command: docker service ls docker service logs faraday_server Web UI \u00b6 Once Faraday Server is running, you'll have to obtain the container's IP address. For this, run: docker inspect $(docker ps -lq) | grep \\\"IPAddress This command will throw the following output: \"IPAddress\": \"172.17.0.2\", \"IPAddress\": \"172.17.0.2\", Now you can direct your browser to http://172.17.0.2:5985/_ui/ We highly recommend you to check our First Steps guide.","title":"Docker"},{"location":"Install-guide-Docker/#configuration","text":"This image can be run as a service or as a standalone container. Both run Faraday Server without PostgreSQL. You will note that we have created /faraday-storage and /faraday-config volumes (for mounting your storage and configuration). We have also created environment variables for Faraday configuration in case you don't mount a config volume. We will get more in detail of these volumes and environment variables: Example: Running Faraday as a standalone container docker run \\ .... -v /path/to/my_doc_folder:/faraday-license \\ -v /path/to/my_storage_folder:/faraday-storage \\ -v /path/to/my_config_folder:/faraday-config .... faradaysec/faraday:X.Y.Z Running Faraday as a service vim docker-compose.yml version: '4.02' services: ... volumes: - /path/to/{my_config_folder}:/home/faraday/.faraday ... We will get more in details about this configuration below.","title":"Configuration"},{"location":"Install-guide-Docker/#environment-variables","text":"In case you don't have a configuration file you'll need to set some environment variables. These come with default values so you'll need to customize some or all of them depending on your installation config. PGSQL_HOST=172.2.0.1 # PostgreSQL server host. PGSQL_USER=faraday_postgresql # PostgreSQL user PGSQL_PASSWD=mypgsqlpassword # PostgreSQL user's password. PGSQL_DBNAME=faraday # Faraday's database name","title":"Environment Variables"},{"location":"Install-guide-Docker/#running-faraday","text":"Now that we have learnt about the volumes and the environment variables above, let's run Faraday assuming we want to connect into PostgreSQL's address 192.168.20.29 and that we have located Faraday's config folder in its default location: ~/.faraday","title":"Running Faraday"},{"location":"Install-guide-Docker/#as-a-standalone-container","text":"Run the following command specifying the correct information: With environment variables docker run \\ -v ~/.faraday/doc:/faraday-license \\ -v ~/.faraday/storage:/faraday-storage \\ -p 5985:5985 \\ -e PGSQL_HOST='192.168.20.29' \\ -e PGSQL_PASSWD='mypgsqlpassword' \\ -e LISTEN_ADDR='0.0.0.0' \\ faradaysec/faraday:latest With config volume mounted docker run \\ -v ~/.faraday/doc:/faraday-license \\ -v ~/.faraday/storage:/faraday-storage \\ -v ~/.faraday/config:/faraday-config \\ -p 5985:5985 \\ faradaysec/faraday:latest To check the container, run the following command: docker container ls As you can see, Faraday Server is running in port 5985.","title":"As a standalone container"},{"location":"Install-guide-Docker/#as-a-service","text":"Initialize a Swarm: docker swarm init # In case you have more than one IP addr configured in your machine you have to specify which one to use. docker swarm init --advertise-addr=192.168.20.29 Docker Compose File: Now, you need to create a docker-compose.yml file. You can use this docker-compose as example: With environment variables version: '4.02' services: server: image: faradaysec/faraday:latest environment: - LISTEN_ADDR=0.0.0.0 - PGSQL_HOST=192.168.20.29 - PGSQL_USER=faraday_postgresql - PGSQL_PASSWD=/run/secrets/pgsql_passwd - PGSQL_DBNAME=faraday secrets: - pgsql_passwd ports: - 5985:5985 volumes: - ~/.faraday/storage:/faraday-storage deploy: replicas: 1 placement: constraints: [node.role == manager] secrets: pgsql_passwd: external: true When Faraday runs as a service, PGSQL_PASSWD can be configured with Docker secrets (default in docker-compose.yml). The simplest way to create a secret is reading from standard input (you should take care of bash history). printf mypgsqlpassword | docker secret create pgsql_passwd - Once you have created the secret, edit you docker-compose.yml and set: vim docker-compose.yml version: 'latest' services: ... environment: - PGSQL_PASSWD=/run/secrets/pgsql_passwd ... For more information about secrets, check Docker\u2019s web page With config volume mounted version: '4.02' services: server: image: faradaysec/faraday:latest ports: - 5985:5985 volumes: - ~/.faraday/storage:/faraday-storage - ~/.faraday/config:/faraday-config deploy: replicas: 1 placement: constraints: [node.role == manager] 3. Deploy: Once you are done setting up your docker-compile.yml file, lets deploy it by running the following command: docker stack deploy -c docker-compose.yml faraday 4. Check service: To check the service, run the following command: docker service ls docker service logs faraday_server","title":"As a service"},{"location":"Install-guide-Docker/#web-ui","text":"Once Faraday Server is running, you'll have to obtain the container's IP address. For this, run: docker inspect $(docker ps -lq) | grep \\\"IPAddress This command will throw the following output: \"IPAddress\": \"172.17.0.2\", \"IPAddress\": \"172.17.0.2\", Now you can direct your browser to http://172.17.0.2:5985/_ui/ We highly recommend you to check our First Steps guide.","title":"Web UI"},{"location":"Install-guide-Linux/","text":"Installation Guide for Ubuntu/Debian/Kali/CentOS/RedHat \u00b6 PostgreSQL \u00b6 Install PostgreSQL >= 9.6 (local or remote ) Follow the installation guide from PostgreSQL site for: Ubuntu Debian Redhat Redis \u00b6 Install Redis using apt-get apt-get install redis-server Then add into the server.ini(/faraday/.faraday/config): redis_session_storage = localhost Installing Faraday \u00b6 Step 1 - Downloading Faraday Installer \u00b6 To download Faraday installer (.deb or .rpm) GitHub for Community Edition Faraday Portal for Professional/Corporate Step 2 - Installing the package \u00b6 Go to your Download directory and run the following command sudo dpkg -i ./faraday-server_amd64.deb or sudo apt install ./faraday-server_amd64.rpm Step 3 - Adding User to faraday Group \u00b6 Once installed, add your user to the faraday group and re-login sudo usermod -aG faraday $USER Step 4 - Initializing the Database ( first time only ) \u00b6 This will generate a random password, use it for Faraday Web UI and change it faraday-manage initdb Importing License (Professional/Corporate only ) \u00b6 faraday-manage import-license Running Faraday \u00b6 Start Faraday server by running: sudo systemctl start faraday-server We highly recommend you to check our First Steps guide.","title":"Linux"},{"location":"Install-guide-Linux/#installation-guide-for-ubuntudebiankalicentosredhat","text":"","title":"Installation Guide for Ubuntu/Debian/Kali/CentOS/RedHat"},{"location":"Install-guide-Linux/#postgresql","text":"Install PostgreSQL >= 9.6 (local or remote ) Follow the installation guide from PostgreSQL site for: Ubuntu Debian Redhat","title":"PostgreSQL"},{"location":"Install-guide-Linux/#redis","text":"Install Redis using apt-get apt-get install redis-server Then add into the server.ini(/faraday/.faraday/config): redis_session_storage = localhost","title":"Redis"},{"location":"Install-guide-Linux/#installing-faraday","text":"","title":"Installing Faraday"},{"location":"Install-guide-Linux/#step-1-downloading-faraday-installer","text":"To download Faraday installer (.deb or .rpm) GitHub for Community Edition Faraday Portal for Professional/Corporate","title":"Step 1 - Downloading Faraday Installer"},{"location":"Install-guide-Linux/#step-2-installing-the-package","text":"Go to your Download directory and run the following command sudo dpkg -i ./faraday-server_amd64.deb or sudo apt install ./faraday-server_amd64.rpm","title":"Step 2 - Installing the package"},{"location":"Install-guide-Linux/#step-3-adding-user-to-faraday-group","text":"Once installed, add your user to the faraday group and re-login sudo usermod -aG faraday $USER","title":"Step 3 - Adding User to faraday Group"},{"location":"Install-guide-Linux/#step-4-initializing-the-database-first-time-only","text":"This will generate a random password, use it for Faraday Web UI and change it faraday-manage initdb","title":"Step 4 - Initializing the Database (first time only)"},{"location":"Install-guide-Linux/#importing-license-professionalcorporate-only","text":"faraday-manage import-license","title":"Importing License (Professional/Corporate only)"},{"location":"Install-guide-Linux/#running-faraday","text":"Start Faraday server by running: sudo systemctl start faraday-server We highly recommend you to check our First Steps guide.","title":"Running Faraday"},{"location":"Install-guide-Redhat-8/","text":"RedHat8 \u00b6 Before installation \u00b6 Please note that PostgreSQL YUM repository and Faraday, depend on EPEL repository for some packages. Users with RHEL, CentOS, etc. should install EPEL repo RPM along with PGDG repo RPMs to satisfy dependencies. In order to do that, follow these instructions: If you are using RHEL, first run the following command: Install EPEL using the following command: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm Refresh repo by typing the following command: yum repolist Redis \u00b6 Install Redis using apt-get sudo yum install redis Then add into the server.ini(/faraday/.faraday/config): redis_session_storage = localhost RedHat8 Installation Guide \u00b6 Install PostgreSQL >= 9.6 (local or remote ). Follow the Postgres installation guide for Redhat: Postgres(RedHat) Download Faraday installer (.rpm) GitHub for Community Edition Faraday Portal for Professional/Corporate Go to your Download directory and run the following command sudo yum install ./faraday-server_amd64.rpm If PostgreSQL is running in a remote machine please follow these instructions , if instead, it is running locally, you need to open the pg_hba.conf file. There, you need to modify the localhost authentication type from \"ident\" to \"md5\". To do this, change host IPV4 local and IPV6 local from \"ident\" to \"md5\". Go to file: $ nano /var/lib/pgsql/POSTGRESQL_VERSION/data/pg_hba.conf Edit the following lines: # IPv4 local connections: host all all 127.0.0.1/32 md5 # IPv6 local connections: host all all ::1/128 md5 Once installed, add your user to the faraday group and re-login sudo usermod -aG faraday $USER Restart PostgreSQL server and initialize the database( first time only ) This will generate a random password, use it for Faraday Web UI and change it sudo systemctl restart postgresql-XX sudo faraday-manage initdb Important : In case of being in a SELinux environment run: sudo setenforce 0 Importing License \u00b6 Step 1 \u00b6 Import license from Faraday Portal ( Professional/Corporate only) faraday-manage import-license Step 2 \u00b6 Start Faraday server by running: sudo systemctl start faraday-server We highly recommend you to check our First Steps guide.","title":"RedHat 8/Centos"},{"location":"Install-guide-Redhat-8/#redhat8","text":"","title":"RedHat8"},{"location":"Install-guide-Redhat-8/#before-installation","text":"Please note that PostgreSQL YUM repository and Faraday, depend on EPEL repository for some packages. Users with RHEL, CentOS, etc. should install EPEL repo RPM along with PGDG repo RPMs to satisfy dependencies. In order to do that, follow these instructions: If you are using RHEL, first run the following command: Install EPEL using the following command: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm Refresh repo by typing the following command: yum repolist","title":"Before installation"},{"location":"Install-guide-Redhat-8/#redis","text":"Install Redis using apt-get sudo yum install redis Then add into the server.ini(/faraday/.faraday/config): redis_session_storage = localhost","title":"Redis"},{"location":"Install-guide-Redhat-8/#redhat8-installation-guide","text":"Install PostgreSQL >= 9.6 (local or remote ). Follow the Postgres installation guide for Redhat: Postgres(RedHat) Download Faraday installer (.rpm) GitHub for Community Edition Faraday Portal for Professional/Corporate Go to your Download directory and run the following command sudo yum install ./faraday-server_amd64.rpm If PostgreSQL is running in a remote machine please follow these instructions , if instead, it is running locally, you need to open the pg_hba.conf file. There, you need to modify the localhost authentication type from \"ident\" to \"md5\". To do this, change host IPV4 local and IPV6 local from \"ident\" to \"md5\". Go to file: $ nano /var/lib/pgsql/POSTGRESQL_VERSION/data/pg_hba.conf Edit the following lines: # IPv4 local connections: host all all 127.0.0.1/32 md5 # IPv6 local connections: host all all ::1/128 md5 Once installed, add your user to the faraday group and re-login sudo usermod -aG faraday $USER Restart PostgreSQL server and initialize the database( first time only ) This will generate a random password, use it for Faraday Web UI and change it sudo systemctl restart postgresql-XX sudo faraday-manage initdb Important : In case of being in a SELinux environment run: sudo setenforce 0","title":"RedHat8 Installation Guide"},{"location":"Install-guide-Redhat-8/#importing-license","text":"","title":"Importing License"},{"location":"Install-guide-Redhat-8/#step-1","text":"Import license from Faraday Portal ( Professional/Corporate only) faraday-manage import-license","title":"Step 1"},{"location":"Install-guide-Redhat-8/#step-2","text":"Start Faraday server by running: sudo systemctl start faraday-server We highly recommend you to check our First Steps guide.","title":"Step 2"},{"location":"Install-guide-Troubleshooting/","text":"PyPI/GitHub \u00b6 If you're getting the following error: Complete output from command python setup.py egg_info: running egg_info creating pip-egg-info/psycopg2.egg-info writing pip-egg-info/psycopg2.egg-info/PKG-INFO writing dependency_links to pip-egg-info/psycopg2.egg-info/dependency_links.txt writing top-level names to pip-egg-info/psycopg2.egg-info/top_level.txt writing manifest file 'pip-egg-info/psycopg2.egg-info/SOURCES.txt' Error: b'You need to install postgresql-server-dev-NN for building a server-side extension or libpq-dev for building a client-side application.\\n' ---------------------------------------- Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-mkj8d84u/psycopg2/ If you never install PostgreSQL before, you must install it first, by doing this: sudo apt install postgresql-12 or sudo yum install postgresql-12 Once you installed this, run the pip3 command again. pip3 install faradaysec or pip3 install . Nix \u00b6 directory /nix exists, but is not writable by you If you never install Nix before, this error appears because you have installed Faraday server or client .deb or .rpm on the system. You must uninstall it first, by doing this: sudo apt remove faraday-server Once you uninstalled this, remove /nix directory and then run the Nix install again. sudo rm -rf /nix Error: while setting up the build environment: mounting /proc: Operation not permitted This happens when running Nix on a container like LXC or similar. In theses cases, you should disable the sandbox. First, create the following file: ~/.config/nix/nix.conf Run the following command to add the flag to the file: echo 'sandbox = false' >> ~/.config/nix/nix.conf The, run the Nix install again.","title":"Troubleshooting"},{"location":"Install-guide-Troubleshooting/#pypigithub","text":"If you're getting the following error: Complete output from command python setup.py egg_info: running egg_info creating pip-egg-info/psycopg2.egg-info writing pip-egg-info/psycopg2.egg-info/PKG-INFO writing dependency_links to pip-egg-info/psycopg2.egg-info/dependency_links.txt writing top-level names to pip-egg-info/psycopg2.egg-info/top_level.txt writing manifest file 'pip-egg-info/psycopg2.egg-info/SOURCES.txt' Error: b'You need to install postgresql-server-dev-NN for building a server-side extension or libpq-dev for building a client-side application.\\n' ---------------------------------------- Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-mkj8d84u/psycopg2/ If you never install PostgreSQL before, you must install it first, by doing this: sudo apt install postgresql-12 or sudo yum install postgresql-12 Once you installed this, run the pip3 command again. pip3 install faradaysec or pip3 install .","title":"PyPI/GitHub"},{"location":"Install-guide-Troubleshooting/#nix","text":"directory /nix exists, but is not writable by you If you never install Nix before, this error appears because you have installed Faraday server or client .deb or .rpm on the system. You must uninstall it first, by doing this: sudo apt remove faraday-server Once you uninstalled this, remove /nix directory and then run the Nix install again. sudo rm -rf /nix Error: while setting up the build environment: mounting /proc: Operation not permitted This happens when running Nix on a container like LXC or similar. In theses cases, you should disable the sandbox. First, create the following file: ~/.config/nix/nix.conf Run the following command to add the flag to the file: echo 'sandbox = false' >> ~/.config/nix/nix.conf The, run the Nix install again.","title":"Nix"},{"location":"Install-guide-community/","text":"Install Guide \u00b6 In order to install Faraday Community version, you can use pip to install Faraday or you can clone the repository. Additionally you can either use our docker-compose.yml file that will install all in one place. Install using Docker \u00b6 git clone git@github.com:infobyte/faraday.git docker-compose up -d then run the following to check if the pod is running: docker-compose ps Startup docker postgres \u00b6 docker pull postgres docker run --name some-postgres -e POSTGRES_PASSWORD = mysecretpassword -d postgres Installation from PyPI \u00b6 You can install Faraday from PyPI by running the following command: pip3 install faradaysec Installation from using pip from source \u00b6 git clone git@github.com:infobyte/faraday.git cd faraday pip install . After Installation \u00b6 Once the installation is completed, make sure you have a PostgreSQL (local or remote ) Then initialize the database This will generate a random password, use it for Faraday Web UI and change it faraday-manage initdb Start Faraday server by running: As a service sudo systemctl start faraday-server As a process faraday-server We highly recommend you to check our First Steps guide.","title":"Community"},{"location":"Install-guide-community/#install-guide","text":"In order to install Faraday Community version, you can use pip to install Faraday or you can clone the repository. Additionally you can either use our docker-compose.yml file that will install all in one place.","title":"Install Guide"},{"location":"Install-guide-community/#install-using-docker","text":"git clone git@github.com:infobyte/faraday.git docker-compose up -d then run the following to check if the pod is running: docker-compose ps","title":"Install using Docker"},{"location":"Install-guide-community/#startup-docker-postgres","text":"docker pull postgres docker run --name some-postgres -e POSTGRES_PASSWORD = mysecretpassword -d postgres","title":"Startup docker postgres"},{"location":"Install-guide-community/#installation-from-pypi","text":"You can install Faraday from PyPI by running the following command: pip3 install faradaysec","title":"Installation from PyPI"},{"location":"Install-guide-community/#installation-from-using-pip-from-source","text":"git clone git@github.com:infobyte/faraday.git cd faraday pip install .","title":"Installation from using pip from source"},{"location":"Install-guide-community/#after-installation","text":"Once the installation is completed, make sure you have a PostgreSQL (local or remote ) Then initialize the database This will generate a random password, use it for Faraday Web UI and change it faraday-manage initdb Start Faraday server by running: As a service sudo systemctl start faraday-server As a process faraday-server We highly recommend you to check our First Steps guide.","title":"After Installation"},{"location":"Jinja2-context/","text":"Jinja2 Context json \u00b6 These are examples of jinja2 static dataset usage. You can access this information from the docx template. Info Executive reports use jinja for rendering the report, check jinja documentation for more details. Report Context \u00b6 Generic This report lists all vulnerabilities of the workspace. { \"counter_severity\": <severities dict>, \"date\": <datetime>, \"enterprise\": format_text_docxtpl_patch(report.enterprise), \"hosts\": <list host>, \"hosts_amount\": <int>, \"overview_images\": <image>, \"vulnerabilities_image\": <image>, \"ease_resolution_image\": <image>, \"impact_image\": <image>, \"services\": <list service>, \"services_amount\": <int>, \"title\": <str>, \"vulns\": <list of vuln>, \"vulns_amount\": <int>, \"workspace\": <workspace_object>, \"conclusions\": <string>, \"objectives\": <string>, \"recommendations\": <string>, \"scope\": <string>, \"summary\": <string>, \"methodologies\": [<methodology>] } Grouped This type of report groups the data using the name and description of the vulnerability. vulns_grouped_amount number of vulnerabilities in the group. { \"counter_severity\": <dict severities>, \"date\": <datetime>, \"enterprise\": format_text_docxtpl_patch((report.enterprise)), \"hosts\": <list host>, \"hosts_amount\": <int>, \"overview_images\": <image>, \"vulnerabilities_image\": <image>, \"ease_resolution_image\": <image>, \"impact_image\": <image>, \"services\": <list service>, \"services_amount\": <int>, \"title\": <str>, \"vulns\": <list of vuln>, \"vulns_amount\": <int>, \"vulns_grouped_amount\": <int>, \"workspace\":<str>, \"conclusions\": <string>, \"objectives\": <string>, \"recommendations\": <string>, \"scope\": <string>, \"summary\": <string>, \"methodologies\": [<methodology>] } Inside each Template, in either of the two report Dataset, we can use these variables: Host { '_rev': '', 'type': 'Host', '_id': 1, 'versions': [], 'owned': False, 'mac': <str>, 'os': 'Linux Kernel 3.8', 'owner': None, 'services': 1, 'ip': '127.0.0.1', 'default_gateway': '', 'service_summaries': ['(80/tcp) www'], 'tags': ['QA'], 'credentials': 0, 'description': '', 'name': '127.0.0.1', 'hostnames': ['localhost'], 'metadata': {'create_time': <datetime>, 'update_time': <datetime>, 'creator': '', 'update_controller_action': '', 'owner': None, 'command_id': None, 'update_action': 0, 'update_user': None}, 'id': 1, 'vulns': 91 } Service { '_rev': '', 'type': 'Service', '_id': 1, 'owned': False, 'summary': '(80/tcp) http', 'version': 'unknown', 'parent': 4, 'owner': None, 'tags': ['QA'], 'protocol': 'tcp', 'credentials': 0, 'port': <int>, 'description': '', 'name': 'http', 'host_id': 4, 'ports': 80, 'metadata': {'create_time': <datetime>, 'update_time': <datetime>, 'creator': '', 'update_controller_action': '', 'owner': None, 'command_id': None, 'update_action': 0, 'update_user': None}, 'id': 1, 'vulns': 1, 'status': 'open' } Vulnerability { 'data': <SubDoc>, 'vulnerability_duplicate_id': None, 'confirmed': False, '_rev': '', 'easeofresolution': None, 'childs': [], 'type': 'Vulnerability', '_id': 1, 'severity': 'med', 'refs': ['CVSS: 3.2'], 'date': <datetime>, 'owned': False, 'parent': 1, 'policyviolations': [], 'resolution': 'Resolution text', 'owner': None, 'service': {'version': 'unknown', 'name': 'postgresql', 'protocol': 'tcp', 'ports': 80, '_id': 1, 'summary': '(80/tcp) http', 'status': 'open'}, 'issuetracker': {}, 'update_user': None, 'external_id': '1233', 'tags': [], 'vulnerability_template_id': None, 'impact': {'accountability': False, 'confidentiality': False, 'integrity': False, 'availability': False}, 'obj_id': '1', 'custom_fields': {'list': None, 'integer': None, 'choice': None}, 'parent_type': 'Service', 'description': 'Description', 'host_os': 'Linux Kernel 4.8', 'name': 'Vulnerability title', '_attachments': {}, 'hostnames': ['localhost'], 'desc': <SubDoc>, 'target': '127.0.0.1', 'metadata': {'create_time': <datetime>, 'update_time': <datetime>, 'creator': 'OpenVAS', 'update_controller_action': '', 'owner': None, 'command_id': 1, 'update_action': 0, 'update_user': None}, 'status': 'opened', 'id': 1, '__target__': '127.0.0.1 / 80 / tcp' }","title":"Jinja2 Context"},{"location":"Jinja2-context/#jinja2-context-json","text":"These are examples of jinja2 static dataset usage. You can access this information from the docx template. Info Executive reports use jinja for rendering the report, check jinja documentation for more details.","title":"Jinja2 Context json"},{"location":"Jinja2-context/#report-context","text":"Generic This report lists all vulnerabilities of the workspace. { \"counter_severity\": <severities dict>, \"date\": <datetime>, \"enterprise\": format_text_docxtpl_patch(report.enterprise), \"hosts\": <list host>, \"hosts_amount\": <int>, \"overview_images\": <image>, \"vulnerabilities_image\": <image>, \"ease_resolution_image\": <image>, \"impact_image\": <image>, \"services\": <list service>, \"services_amount\": <int>, \"title\": <str>, \"vulns\": <list of vuln>, \"vulns_amount\": <int>, \"workspace\": <workspace_object>, \"conclusions\": <string>, \"objectives\": <string>, \"recommendations\": <string>, \"scope\": <string>, \"summary\": <string>, \"methodologies\": [<methodology>] } Grouped This type of report groups the data using the name and description of the vulnerability. vulns_grouped_amount number of vulnerabilities in the group. { \"counter_severity\": <dict severities>, \"date\": <datetime>, \"enterprise\": format_text_docxtpl_patch((report.enterprise)), \"hosts\": <list host>, \"hosts_amount\": <int>, \"overview_images\": <image>, \"vulnerabilities_image\": <image>, \"ease_resolution_image\": <image>, \"impact_image\": <image>, \"services\": <list service>, \"services_amount\": <int>, \"title\": <str>, \"vulns\": <list of vuln>, \"vulns_amount\": <int>, \"vulns_grouped_amount\": <int>, \"workspace\":<str>, \"conclusions\": <string>, \"objectives\": <string>, \"recommendations\": <string>, \"scope\": <string>, \"summary\": <string>, \"methodologies\": [<methodology>] } Inside each Template, in either of the two report Dataset, we can use these variables: Host { '_rev': '', 'type': 'Host', '_id': 1, 'versions': [], 'owned': False, 'mac': <str>, 'os': 'Linux Kernel 3.8', 'owner': None, 'services': 1, 'ip': '127.0.0.1', 'default_gateway': '', 'service_summaries': ['(80/tcp) www'], 'tags': ['QA'], 'credentials': 0, 'description': '', 'name': '127.0.0.1', 'hostnames': ['localhost'], 'metadata': {'create_time': <datetime>, 'update_time': <datetime>, 'creator': '', 'update_controller_action': '', 'owner': None, 'command_id': None, 'update_action': 0, 'update_user': None}, 'id': 1, 'vulns': 91 } Service { '_rev': '', 'type': 'Service', '_id': 1, 'owned': False, 'summary': '(80/tcp) http', 'version': 'unknown', 'parent': 4, 'owner': None, 'tags': ['QA'], 'protocol': 'tcp', 'credentials': 0, 'port': <int>, 'description': '', 'name': 'http', 'host_id': 4, 'ports': 80, 'metadata': {'create_time': <datetime>, 'update_time': <datetime>, 'creator': '', 'update_controller_action': '', 'owner': None, 'command_id': None, 'update_action': 0, 'update_user': None}, 'id': 1, 'vulns': 1, 'status': 'open' } Vulnerability { 'data': <SubDoc>, 'vulnerability_duplicate_id': None, 'confirmed': False, '_rev': '', 'easeofresolution': None, 'childs': [], 'type': 'Vulnerability', '_id': 1, 'severity': 'med', 'refs': ['CVSS: 3.2'], 'date': <datetime>, 'owned': False, 'parent': 1, 'policyviolations': [], 'resolution': 'Resolution text', 'owner': None, 'service': {'version': 'unknown', 'name': 'postgresql', 'protocol': 'tcp', 'ports': 80, '_id': 1, 'summary': '(80/tcp) http', 'status': 'open'}, 'issuetracker': {}, 'update_user': None, 'external_id': '1233', 'tags': [], 'vulnerability_template_id': None, 'impact': {'accountability': False, 'confidentiality': False, 'integrity': False, 'availability': False}, 'obj_id': '1', 'custom_fields': {'list': None, 'integer': None, 'choice': None}, 'parent_type': 'Service', 'description': 'Description', 'host_os': 'Linux Kernel 4.8', 'name': 'Vulnerability title', '_attachments': {}, 'hostnames': ['localhost'], 'desc': <SubDoc>, 'target': '127.0.0.1', 'metadata': {'create_time': <datetime>, 'update_time': <datetime>, 'creator': 'OpenVAS', 'update_controller_action': '', 'owner': None, 'command_id': 1, 'update_action': 0, 'update_user': None}, 'status': 'opened', 'id': 1, '__target__': '127.0.0.1 / 80 / tcp' }","title":"Report Context"},{"location":"LDAP-OKTA/","text":"LDAP with OKTA \u00b6 Here are the steps to integrate LDAP to Faraday using OKTA: Step 1: Navigate to OKTA's website . Step 2: Sing up. Remember your user and workdomain from user@workdomain.com Step 3: Okta will send you an e-mail with the URL and your temporary password, use those to log-in into Okta. Step 4: Enter to the Directory Integrations Label from your Okta URL. Step 5: Click Add LDAP Interface Step 6: Configure your Faraday Server. Run the following command: faraday-manage settings -a update ldap enabled = true server = <domain>.ldap.okta.com domain_dn = OU=users, DC=<domain>, DC=okta, DC=com domain =<domain>.okta.com admin_group = fadmin pentester_group = fpentester asset_owner_group = fassetowner client_group = fclient use_ldaps = true use_start_tls = false port = 636 disconnect_timeout = 2.0 use_local_roles = true default_local_role = admin bind_format = DN bind_dn = dc=<domain>,dc=okta,dc=com Check our LDAP Article if you need more info. Step 7: Restart Faraday Server with: systemctl restart faraday-server Step 8: Login into Faraday with the User and Password you used to login into Okta. Info (Remember you can only access as an Admin user and you can't create more users).","title":"LDAP with OKTA"},{"location":"LDAP-OKTA/#ldap-with-okta","text":"Here are the steps to integrate LDAP to Faraday using OKTA: Step 1: Navigate to OKTA's website . Step 2: Sing up. Remember your user and workdomain from user@workdomain.com Step 3: Okta will send you an e-mail with the URL and your temporary password, use those to log-in into Okta. Step 4: Enter to the Directory Integrations Label from your Okta URL. Step 5: Click Add LDAP Interface Step 6: Configure your Faraday Server. Run the following command: faraday-manage settings -a update ldap enabled = true server = <domain>.ldap.okta.com domain_dn = OU=users, DC=<domain>, DC=okta, DC=com domain =<domain>.okta.com admin_group = fadmin pentester_group = fpentester asset_owner_group = fassetowner client_group = fclient use_ldaps = true use_start_tls = false port = 636 disconnect_timeout = 2.0 use_local_roles = true default_local_role = admin bind_format = DN bind_dn = dc=<domain>,dc=okta,dc=com Check our LDAP Article if you need more info. Step 7: Restart Faraday Server with: systemctl restart faraday-server Step 8: Login into Faraday with the User and Password you used to login into Okta. Info (Remember you can only access as an Admin user and you can't create more users).","title":"LDAP with OKTA"},{"location":"LDAP/","text":"LDAP \u00b6 LDAP Users For the time being Faraday doesn't support a hybrid installation using both LDAP and local users. Enabling LDAP disables local users and vice versa. In order to configure LDAP, run the following command: faraday-manage settings -a update ldap Then update every field according to the configuration on-prem. $ faraday-manage settings -a update ldap Update settings for: ldap enabled [False]: use_local_roles [True]: default_local_role [admin]: admin_group []: asset_owner_group []: client_group []: pentester_group []: disconnect_timeout [2.0]: server []: port [389]: use_ldaps [False]: use_start_tls [False]: domain []: domain_dn []: bind_format [CN]: bind_dn []: user_class [user]: user_attribute [sAMAccountName]: group_class [group]: paginated_fetch [False]: Do you confirm your changes on ldap? Remember to restart the server after doing changes! systemctl restart faraday-server Warning If use_local_roles is set to true, any user on the AD will be allowed to use Faraday.","title":"LDAP"},{"location":"LDAP/#ldap","text":"LDAP Users For the time being Faraday doesn't support a hybrid installation using both LDAP and local users. Enabling LDAP disables local users and vice versa. In order to configure LDAP, run the following command: faraday-manage settings -a update ldap Then update every field according to the configuration on-prem. $ faraday-manage settings -a update ldap Update settings for: ldap enabled [False]: use_local_roles [True]: default_local_role [admin]: admin_group []: asset_owner_group []: client_group []: pentester_group []: disconnect_timeout [2.0]: server []: port [389]: use_ldaps [False]: use_start_tls [False]: domain []: domain_dn []: bind_format [CN]: bind_dn []: user_class [user]: user_attribute [sAMAccountName]: group_class [group]: paginated_fetch [False]: Do you confirm your changes on ldap? Remember to restart the server after doing changes! systemctl restart faraday-server Warning If use_local_roles is set to true, any user on the AD will be allowed to use Faraday.","title":"LDAP"},{"location":"NGINX-Setup/","text":"The recommended way to run Faraday is using SSL via Nginx Nginx \u00b6 New Faraday release 3.14 can generate a ngnix configuration for you Installing Nginx \u00b6 You can find a detailed guide on how to install nginx in the official Nginx documentation Configure NGINX \u00b6 After installing and configuring NGINX, Faraday's setup should be as follows: 1 2 Faraday Server on port 5985 using HTTP. You can find this configuration inside the file ~/ .faraday / config / server.ini in section [ faraday_server ] . Web UI using https : // example_domain :port / Note: For both cases, NGINX on port 80 redirecting to HTTPS. Generating Certificates \u00b6 In order to generate self signed certificates, run the following command: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/faraday.key -out /etc/ssl/faraday.crt Be sure to type the Common Name of this certificate. If you don't type a Common Name, then Faraday will not be launched. For further information about certificates, follow this link . Sample Configuration Files \u00b6 Below you can find a sample config files for NGINX. You can use this same configuration by pasting it inside the folder /etc/nginx/sites-enabled/ or in conf.d and naming the file as you want. faraday-manage generate-nginx-config --fqdn faraday.mydomain.com --port 5985 --ws-port 9000 --ssl-certificate /etc/ssl/faraday.crt --ssl-key /etc/ssl/faraday.key Generating Faraday nginx config for server: faraday.mydomain.com Faraday - Port: 5985 - Websocket Port: 9000 SSL: certificate [/etc/ssl/faraday.crt] - key [/etc/ssl/faraday.key ] Confirm [Y/n]: y NGINX Config ##################################### # Expires map map $sent_http_content_type $expires { default off; text/html max; text/css max; application/javascript max; ~image/ max; } server { server_name faraday.mydomain.com; listen 443 ssl http2; add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always; add_header X-XSS-Protection \"1; mode = block\"; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-Content-Type-Options nosniff; client_max_body_size 150M; ssl on; ssl_session_cache shared:SSL:50m; ssl_certificate /etc/ssl/faraday.crt; ssl_certificate_key /etc/ssl/faraday.key gzip on; gzip_types application/javascript text/css; expires $expires; location / { alias /opt/faraday/lib/python3.8/site-packages/faraday/server/www/; } location /_api/ { proxy_pass http://localhost:5985/_api/; proxy_redirect http:// $scheme://; proxy_read_timeout 300; proxy_cookie_path / \"/; secure\"; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Ssl on; proxy_set_header X-Forwarded-Proto $scheme; } location /websockets { proxy_http_version 1.1; proxy_pass http://localhost:9000/websockets; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; } } server { server_name faraday.mydomain.com; listen 80 ; # https redirect if ($host = faraday.mydomain.com) { return 301 https://$host$request_uri; } return 404; } Now you can access to https://faraday.mydomain.com","title":"NGINX (SSL Config)"},{"location":"NGINX-Setup/#nginx","text":"New Faraday release 3.14 can generate a ngnix configuration for you","title":"Nginx"},{"location":"NGINX-Setup/#installing-nginx","text":"You can find a detailed guide on how to install nginx in the official Nginx documentation","title":"Installing Nginx"},{"location":"NGINX-Setup/#configure-nginx","text":"After installing and configuring NGINX, Faraday's setup should be as follows: 1 2 Faraday Server on port 5985 using HTTP. You can find this configuration inside the file ~/ .faraday / config / server.ini in section [ faraday_server ] . Web UI using https : // example_domain :port / Note: For both cases, NGINX on port 80 redirecting to HTTPS.","title":"Configure NGINX"},{"location":"NGINX-Setup/#generating-certificates","text":"In order to generate self signed certificates, run the following command: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/faraday.key -out /etc/ssl/faraday.crt Be sure to type the Common Name of this certificate. If you don't type a Common Name, then Faraday will not be launched. For further information about certificates, follow this link .","title":"Generating Certificates"},{"location":"NGINX-Setup/#sample-configuration-files","text":"Below you can find a sample config files for NGINX. You can use this same configuration by pasting it inside the folder /etc/nginx/sites-enabled/ or in conf.d and naming the file as you want. faraday-manage generate-nginx-config --fqdn faraday.mydomain.com --port 5985 --ws-port 9000 --ssl-certificate /etc/ssl/faraday.crt --ssl-key /etc/ssl/faraday.key Generating Faraday nginx config for server: faraday.mydomain.com Faraday - Port: 5985 - Websocket Port: 9000 SSL: certificate [/etc/ssl/faraday.crt] - key [/etc/ssl/faraday.key ] Confirm [Y/n]: y NGINX Config ##################################### # Expires map map $sent_http_content_type $expires { default off; text/html max; text/css max; application/javascript max; ~image/ max; } server { server_name faraday.mydomain.com; listen 443 ssl http2; add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always; add_header X-XSS-Protection \"1; mode = block\"; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-Content-Type-Options nosniff; client_max_body_size 150M; ssl on; ssl_session_cache shared:SSL:50m; ssl_certificate /etc/ssl/faraday.crt; ssl_certificate_key /etc/ssl/faraday.key gzip on; gzip_types application/javascript text/css; expires $expires; location / { alias /opt/faraday/lib/python3.8/site-packages/faraday/server/www/; } location /_api/ { proxy_pass http://localhost:5985/_api/; proxy_redirect http:// $scheme://; proxy_read_timeout 300; proxy_cookie_path / \"/; secure\"; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Ssl on; proxy_set_header X-Forwarded-Proto $scheme; } location /websockets { proxy_http_version 1.1; proxy_pass http://localhost:9000/websockets; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; } } server { server_name faraday.mydomain.com; listen 80 ; # https redirect if ($host = faraday.mydomain.com) { return 301 https://$host$request_uri; } return 404; } Now you can access to https://faraday.mydomain.com","title":"Sample Configuration Files"},{"location":"Pipelines/","text":"Pipelines and jobs \u00b6 We were thinking on a pain solver in case of importing manually files, or working with the vulnerabilities massively in your Workspace. Faraday created pipelines designed exclusively to automate and change vulnerabilities applying custom Job rules, according to patterns inside a name or any attribute inside a Vulnerability. The hierarchy will be Jobs are run inside Pipelines . The first view will show in the left the pipelines, and clicking on one title, will show the configuration of each. Jobs will run sequentially inside a Pipeline to a Target Workspace. If you click on Create New the Jobs view will be opened. In this view is needed to setup a Name , Description and Object and Attributes . Based on Two models, Assets and Vulnerability . it can be added Rules and Tasks Rules are sets of attributes based on the vulnerability, such as Name, Description, Tag, etc. The operators for the rules are equal, not equal and contains, using the operators the rule can be created. The Tasks contain Actions these can be Update, Append and Delete the object. The last option will delete the object that matches the condition, this is used to Delete the Vulnerability. The action Update will select a Field based on this condition and update it to the value selected in the Action to the desired Value. Append is useful to create an attribute such as Tag, Comment or Policy Violation. in Case of Comments a user can be addressed with a \"@\" symbol. Click on Save on the up right Corner. Select The Target Workspace and click on Save From the Enable slide the pipeline can be either enabled or disabled, and from the Run Button the pipeline can be manually triggered.","title":"Pipelines and jobs"},{"location":"Pipelines/#pipelines-and-jobs","text":"We were thinking on a pain solver in case of importing manually files, or working with the vulnerabilities massively in your Workspace. Faraday created pipelines designed exclusively to automate and change vulnerabilities applying custom Job rules, according to patterns inside a name or any attribute inside a Vulnerability. The hierarchy will be Jobs are run inside Pipelines . The first view will show in the left the pipelines, and clicking on one title, will show the configuration of each. Jobs will run sequentially inside a Pipeline to a Target Workspace. If you click on Create New the Jobs view will be opened. In this view is needed to setup a Name , Description and Object and Attributes . Based on Two models, Assets and Vulnerability . it can be added Rules and Tasks Rules are sets of attributes based on the vulnerability, such as Name, Description, Tag, etc. The operators for the rules are equal, not equal and contains, using the operators the rule can be created. The Tasks contain Actions these can be Update, Append and Delete the object. The last option will delete the object that matches the condition, this is used to Delete the Vulnerability. The action Update will select a Field based on this condition and update it to the value selected in the Action to the desired Value. Append is useful to create an attribute such as Tag, Comment or Policy Violation. in Case of Comments a user can be addressed with a \"@\" symbol. Click on Save on the up right Corner. Select The Target Workspace and click on Save From the Enable slide the pipeline can be either enabled or disabled, and from the Run Button the pipeline can be manually triggered.","title":"Pipelines and jobs"},{"location":"Planner/","text":"Planner \u00b6 Organize your vulnerabilities and get work done easily and comfortably without using any extra platforms. Be more productive and share work with your team. Task assignment, status, alerts, and more: manage the progress of your vulnerabilities in one place. The overview page can be accessed using the planner icon . The sections are divided by Project, inside project Tasks/Milestones can be created, those can be assigned to users, and have dependencies. The Task can be appended hovering in a project and clicking on the Add Task Button. The task can contain values such start/end date, progress, description and Assigned users and Dependencies Click on Create and the task will be assigned inside the Project A task can have linked Vulnerabilities, from the Quick Planner module from Vulnerabilies view Refer to Vulnerability view document to assign a vulnerabilty to a task from the Quick Planner view.","title":"Planner"},{"location":"Planner/#planner","text":"Organize your vulnerabilities and get work done easily and comfortably without using any extra platforms. Be more productive and share work with your team. Task assignment, status, alerts, and more: manage the progress of your vulnerabilities in one place. The overview page can be accessed using the planner icon . The sections are divided by Project, inside project Tasks/Milestones can be created, those can be assigned to users, and have dependencies. The Task can be appended hovering in a project and clicking on the Add Task Button. The task can contain values such start/end date, progress, description and Assigned users and Dependencies Click on Create and the task will be assigned inside the Project A task can have linked Vulnerabilities, from the Quick Planner module from Vulnerabilies view Refer to Vulnerability view document to assign a vulnerabilty to a task from the Quick Planner view.","title":"Planner"},{"location":"Plugin-List-v4/","text":"The main purpose of Faraday is to re-use the available tools in the community to take advantage of them in a multiuser way. You break it. We keep track of the pieces! To maximize flexibility Faraday Plugins run only on the client, which means you can have custom, private plugins all for yourself! There are three kinds of plugins available for Faraday; console , report and API also called online . However, these are not mutually exclusive, meaning that some tools have more than one Plugin to process their output. For example, Nmap has a Console plugin which allows you to run it directly from ZSH, but it also has a Report one, in order to import scans that were run outside of Faraday. Console \u00b6 Check Faraday-Cli to use this feature! Plugins that intercept commands, fired directly when a command is detected in the console. These are transparent to you and no additional action on your part is needed. Report \u00b6 Use the web UI to import reports. Check this Article ! API \u00b6 Plugin connectors or online (BeEF, Metasploit, Burp ), these connect to external APIs or databases, or talk directly to Faraday's API . Custom \u00b6 If you think your favourite tool is missing code your own plugin or ask us to do it ! Acunetix (REPORT) (XML) Amap (CONSOLE) Appscan (REPORT) AppSpider (REPORT) Arachni (REPORT, CONSOLE) (XML) arp-scan (CONSOLE) AWS Prowler (REPORT) Bandit (REPORT) BeEF (API) Brutexss (REPORT) Burp, BurpPro (REPORT, API) (XML) Core Impact, Core Impact (REPORT) (XML) Dig (CONSOLE) Dirb (CONSOLE) Dirsearch (REPORT,CONSOLE) Dnsenum (CONSOLE) Dnsmap (CONSOLE) Dnsrecon (CONSOLE) Dnswalk (CONSOLE) evilgrade (API) Fierce (CONSOLE, REPORT) Fortify (REPORT) Fruitywifi (API) ftp (CONSOLE) Goohost (REPORT, CONSOLE) (XML) hping3 (CONSOLE) Hydra (CONSOLE) (XML) Ip360 (REPORT) Junit (REPORT) Lynis (REPORT) Maltego (REPORT) Microsoft Baseline Security Analyzer (REPORT) Medusa (CONSOLE) Metasploit , (REPORT, API) (XML) XML report Naabu (CONSOLE) (REPORT) Ncrack (REPORT) Ndiff (REPORT, CONSOLE) Nessus , (REPORT) (XML .nessus) Netdiscover (CONSOLE) Netsparker (REPORT) (XML) Netsparker Cloud (REPORT) Nexpose, Nexpose Enterprise , (REPORT) (simple XML, XML Export plugin (2.0)) NextNet (CONSOLE) Nikto (REPORT, CONSOLE) (XML) Nipper (REPORT) Nmap (REPORT, CONSOLE) (XML) Nuclei (REPORT) OpenScap (REPORT) Openvas (REPORT) (XML) PasteAnalyzer (CONSOLE) Peeping Tom (CONSOLE) ping (CONSOLE) propecia (CONSOLE) Qualysguard (REPORT) (XML) QualysWebApp (REPORT) rdpscan (CONSOLE) Recon-NG (REPORT) Retina (REPORT) (XML) Reverseraider (CONSOLE) Shodan (API) Skipfish (CONSOLE) SonarQube (REPORT) SourceClear (REPORT) SSHdefaultscan (CONSOLE) SSL Labs (REPORT) SSLyze (REPORT, CONSOLE) (XML) Sublist3r (REPORT,CONSOLE) Telnet (CONSOLE) Theharvester (CONSOLE) Traceroute (CONSOLE) W3af (REPORT) (XML) Wapiti (CONSOLE) Wcscan (CONSOLE) WebInspect (REPORT,CONSOLE) Wfuzz (CONSOLE) Wfuzz (CONSOLE) WhatWebPlugin (REPORT) WhiteSource (REPORT) whois (CONSOLE) WPScan (CONSOLE) Xsssniper (REPORT) X1, Onapsis (REPORT) (XML) Zap (REPORT) (XML)","title":"Supported-Plugins"},{"location":"Plugin-List-v4/#console","text":"Check Faraday-Cli to use this feature! Plugins that intercept commands, fired directly when a command is detected in the console. These are transparent to you and no additional action on your part is needed.","title":"Console"},{"location":"Plugin-List-v4/#report","text":"Use the web UI to import reports. Check this Article !","title":"Report"},{"location":"Plugin-List-v4/#api","text":"Plugin connectors or online (BeEF, Metasploit, Burp ), these connect to external APIs or databases, or talk directly to Faraday's API .","title":"API"},{"location":"Plugin-List-v4/#custom","text":"If you think your favourite tool is missing code your own plugin or ask us to do it ! Acunetix (REPORT) (XML) Amap (CONSOLE) Appscan (REPORT) AppSpider (REPORT) Arachni (REPORT, CONSOLE) (XML) arp-scan (CONSOLE) AWS Prowler (REPORT) Bandit (REPORT) BeEF (API) Brutexss (REPORT) Burp, BurpPro (REPORT, API) (XML) Core Impact, Core Impact (REPORT) (XML) Dig (CONSOLE) Dirb (CONSOLE) Dirsearch (REPORT,CONSOLE) Dnsenum (CONSOLE) Dnsmap (CONSOLE) Dnsrecon (CONSOLE) Dnswalk (CONSOLE) evilgrade (API) Fierce (CONSOLE, REPORT) Fortify (REPORT) Fruitywifi (API) ftp (CONSOLE) Goohost (REPORT, CONSOLE) (XML) hping3 (CONSOLE) Hydra (CONSOLE) (XML) Ip360 (REPORT) Junit (REPORT) Lynis (REPORT) Maltego (REPORT) Microsoft Baseline Security Analyzer (REPORT) Medusa (CONSOLE) Metasploit , (REPORT, API) (XML) XML report Naabu (CONSOLE) (REPORT) Ncrack (REPORT) Ndiff (REPORT, CONSOLE) Nessus , (REPORT) (XML .nessus) Netdiscover (CONSOLE) Netsparker (REPORT) (XML) Netsparker Cloud (REPORT) Nexpose, Nexpose Enterprise , (REPORT) (simple XML, XML Export plugin (2.0)) NextNet (CONSOLE) Nikto (REPORT, CONSOLE) (XML) Nipper (REPORT) Nmap (REPORT, CONSOLE) (XML) Nuclei (REPORT) OpenScap (REPORT) Openvas (REPORT) (XML) PasteAnalyzer (CONSOLE) Peeping Tom (CONSOLE) ping (CONSOLE) propecia (CONSOLE) Qualysguard (REPORT) (XML) QualysWebApp (REPORT) rdpscan (CONSOLE) Recon-NG (REPORT) Retina (REPORT) (XML) Reverseraider (CONSOLE) Shodan (API) Skipfish (CONSOLE) SonarQube (REPORT) SourceClear (REPORT) SSHdefaultscan (CONSOLE) SSL Labs (REPORT) SSLyze (REPORT, CONSOLE) (XML) Sublist3r (REPORT,CONSOLE) Telnet (CONSOLE) Theharvester (CONSOLE) Traceroute (CONSOLE) W3af (REPORT) (XML) Wapiti (CONSOLE) Wcscan (CONSOLE) WebInspect (REPORT,CONSOLE) Wfuzz (CONSOLE) Wfuzz (CONSOLE) WhatWebPlugin (REPORT) WhiteSource (REPORT) whois (CONSOLE) WPScan (CONSOLE) Xsssniper (REPORT) X1, Onapsis (REPORT) (XML) Zap (REPORT) (XML)","title":"Custom"},{"location":"RELEASE/","text":"New features in the latest update \u00b6 3.19.0 [Dec 27 th , 2021]: \u00b6 Add v3 bulks endpoints DELETE and EDIT (PATCH) Add logs of loggin, logout and log error to main log Fix bug in bulk update for m2m fields Add clear settings command Add open medium, high and critical vulns histogram Fix integrity constraint error on cve update Fix static content for react Add cvss within vulnerability model Add check to see if workspace name is longer than 250 characters. In that case raises an error Change concat in urlstrings for join or urljoin Add cve to csv export 3.18.1 [Nov 5 th , 2021]: \u00b6 Fix CVE issue 3.18.0 [Oct 21 st , 2021]: \u00b6 Remove attachments in vulns filter endpoint Add open and confirmed vulns in workspace stats Add user id to session API endpoint Add cve to vulnerability model Change funcs to views FIX report import Add last_run_agent_date field to workspace endpoint Fix cve parsing in vulnerability create and bulk create Fix order_by in filters api Fix 500 status code with invalid executor arguments 3.17.1 [Aug 20 th , 2021]: \u00b6 FIX bug when starting the server, creates a pool for reporting that breaks. 3.17.0 [Aug 10 th , 2021]: \u00b6 ADD --data parameter to faraday-manage settings MOD Process report files in a separate process MOD Make bulk_create requests asynchronous 3.16.2 [Jul 2 nd , 2021]: \u00b6 FIX bug where workspaces are not updatable by UI 3.16.1 [Jul 2 nd , 2021]: \u00b6 MOD only show settings of this version in faraday-manage settings FIX update minimum version of click dependency 3.16.0 [Jun 29 th , 2021]: \u00b6 BREAKING CHANGE: API V2 discontinued BREAKING CHANGE: Changed minimum version of python to 3.7 ADD agent parameters has types (protocol with agent and its APIs) ADD move settings from server.in to a db model ADD (optional) query logs MOD new threads management MOD vulnerabilities' endpoint no longer loads evidence unless requested with get_evidence=true FIX now it is not possible to create workspace of name \"filter\" FIX bug with dates in the future FIX bug with click 8 FIX bug using --port command FIX endpoints returning 500 as status code REMOVE the need tom CSRF token from evidence upload api Changes in Faraday Professional: ADD reports can contain user comments ADD special characters restrictions to faraday-manage create-superuser ADD randomized id within the generated executive reports ADD API limited by license presence ADD redis support as session storage. ADD server configuration by API MOD Roles now works with the security library, making API and database changes MOD code style improvements FIX endpoints returning 500 as status code Changes in Faraday Corporate: ADD improved regex for scheduled agents ADD issue types gotten from directly from the user Jira instance's API MOD match ServiceNow OAuth endpoint's URL with the same format as Jira FIX typo when running faraday-manage database-schema FIX error downloading logs using LDAP REMOVE unnecessary data sent to integrations endpoints 3.15.0 [May 18 th , 2021]: \u00b6 ADD Basic Auth support ADD support for GET method in websocket_tokens, POST will be deprecated in the future ADD CVSS(String), CWE(String), CVE(relationship) columns to vulnerability model and API ADD agent token's API says the renewal cycling duration MOD Improve database model to be able to delete workspaces fastly MOD Improve code style and uses (less flake8 exceptions, py3 super style, Flask app as singleton, etc) MOD workspaces' names regex to verify they cannot contain forward slash ( / ) MOD Improve bulk create logs FIX Own schema breaking Marshmallow 3.11.0+ UPD flask_security_too to version 4.0.0+ 3.14.4 [Apr 15 th , 2021]: \u00b6 Updated plugins package, which update appscan plugin 3.14.3 [Mar 30 th , 2021]: \u00b6 MOD MAYOR Breaking change: Use frontend from other repository ADD last_run to executors and agents ADD ignore info vulns option (from faraday-plugins 1.4.3) ADD invalid logins are registered in audit.log ADD agent registration tokens are now 6-digit short and automatically regenerated every 30 seconds MOD Fix logout redirect loop REMOVE support for native SSL 3.14.2 [Feb 26 th , 2021]: \u00b6 ADD New plugins: microsoft baseline security analyzer nextnet openscap FIX old versions of Nessus plugins bugs 3.14.1 [Feb 17 th , 2021]: \u00b6 ADD forgot password ADD update services by bulk_create ADD FARADAY_DISABLE_LOGS varibale to disable logs to filesystem ADD security logs in audit.log file UPD security dependency Flask-Security-Too v3.4.4 MOD rename total_rows field in filter host response MOD improved Export cvs performance by reducing the number of queries MOD sanitize the content of vulns' request and response MOD dont strip new line in description when exporting csv MOD improved threads management on exception MOD improved performance on vulnerability filter MOD improved API documentation FIX upload a report with invalid custom fields ADD v3 API, which includes: All endpoints ends without / PATCH {model}/id endpoints ~~Bulk update via PATCH {model} endpoints~~ In a future release ~~Bulk delete via DELETE {model} endpoints~~ In a future release Endpoints removed: /v2/ws/<workspace_id>/activate/ /v2/ws/<workspace_id>/change_readonly/ /v2/ws/<workspace_id>/deactivate/ /v2/ws/<workspace_name>/hosts/bulk_delete/ /v2/ws/<workspace_name>/vulns/bulk_delete/ Endpoints updated: /v2/ws/<workspace_name>/vulns/<int:vuln_id>/attachments/ => \\ /v3/ws/<workspace_name>/vulns/<int:vuln_id>/attachment 3.14.0 [Dec 23th, 2020]: \u00b6 ADD RESTless filter to multiples views, improving the searchs ADD \"extras\" modal in options menu, linking to other Faraday resources ADD import vulnerability templates command to faraday-manage ADD generate nginx config command to faraday-manage ADD vulnerabilities severities count to host ADD Active Agent columns to workspace ADD critical vulns count to workspace ADD Remember me login option ADD distinguish host flag ADD a create_date field to comments FIX to use new webargs version FIX Custom Fields view in KB (Vulnerability Templates) FIX bug on filter endpoint for vulnerabilities with offset and limit parameters FIX bug raising 403 Forbidden HTTP error when the first workspace was not active FIX bug when changing the token expiration change FIX bug in Custom Fields type Choice when choice name is too long. FIX Vulnerability Filter endpoint Performance improvement using joinedload. Removed several nplusone uses MOD Updating the template.ini for new installations MOD Improve SMTP configuration MOD The agent now indicates how much time it had run (faraday-agent-dispatcher v1.4.0) MOD Type \"Vulnerability Web\" cannot have \"Host\" type as a parent when creating data in bulk MOD Expiration default time from 1 month to 12 hour MOD Improve data reference when uploading a new report MOD Refactor Knowledge Base's bulk create to take to take also multiple creation from vulns in status report. MOD All HTTP OPTIONS endpoints are now public MOD Change documentation and what's new links in about REMOVE Flask static endpoint REMOVE of our custom logger 3.12 [Sep 3 rd , 2020]: \u00b6 Now agents can upload data to multiples workspaces Add agent and executor data to Activity Feed Add session timeout configuration to server.ini configuration file Add hostnames to already existing hosts when importing a report Add new faraday background image Display an error when uploading an invalid report Use minimized JS libraries to improve page load time Fix aspect ratio distortion in evidence tab of vulnerability preview Fix broken Knowledge Base upload modal Fix closing of websocket connections when communicating with Agents Change Custom Fields names in exported CSV to make columns compatible with faraday_csv plugin Fix import CSV for vuln template: some values were overwritten with default values. Catch errors in faraday-manage commands when the connection string is not specified in the server.ini file Fix bug that generated a session when using Token authentication Fix bug that requested to the API when an invalid filter is used Cleanup old sessions when a user logs in Remove unmaintained Flask-Restless dependency Remove pbkdf2_sha1 and plain password schemes. We only support bcrypt 3.11.2: \u00b6 3.11.1 [Jun 3 rd , 2020]: \u00b6 Fix missing shodan icon and invalid link in dashboard and hosts list Upgrade marshmallow, webargs, werkzeug and flask-login dependencies to latest versions in order to make packaging for distros easier 3.11 [Apr 22 nd , 2020]: \u00b6 Move GTK client to another repository to improve release times. Fix formula injection vulnerability when exporting vulnerability data to CSV. This was considered a low impact vulnerability. Remove \"--ssl\" parameter. Read SSL information from the config file. Add OpenAPI autogenerated documentation support Show agent information in command history Add bulk delete endpoint for hosts API Add column with information to track agent execution data Add tool attribute to vulnerability to avoid incorrectly showing \"Web UI\" as creator tool Add sorting by target in credentials view Add creator information when uploading reports or using de bulk create api Add feature to disable rules in the searcher Add API endpoint to export Faraday data to Metasploit XML format Change websocket url route from / to /websockets Use run date instead of creation date when plugins report specifies it Improve knowledge base UX Improve workspace table and status report table UX. Improve format of exported CSV to include more fields Sort results in count API endpoint Limit description width in knowledge base Change log date format to ISO 8601 Fix parsing server port config in server.ini Fix bug when _rev was send to the hosts API Send JSON response when you get a 500 or 404 error Fix bug parsing invalid data in NullToBlankString Changes in plugins (only available through Web UI, not in GTK client yet): New plugins: Checkmarx Faraday_csv (output of exported Faraday csv) Qualyswebapp Whitesource Updated plugins: Acunetix AppScan Arachni Nessus Netspaker Netspaker cloud Nexpose Openvas QualysGuard Retina W3af WPScan Webinspect Zap 3.10.2 [Jan 30 th , 2020]: \u00b6 Fix Cross-Site Request Forgery (CSRF) vulnerability in all JSON API endpoints. This was caused because a third-party library doesn't implement proper Content-Type header validation. To mitigate the vulnerability, we set the session cookie to have the SameSite: Lax property. Fix Faraday Server logs were always in debug Add update date column when exporting vulnerabilities to CSV Fix unicode error when exporting vulnerabilities to CSV 3.10.1 [Jan 10 th , 2020]: \u00b6 Fix installation with pip install --no-binary :all: faradaysec Force usage of webargs 5 (webargs 6 broke backwards compatibility) Use latest version of faraday-plugins Fix broken \"Faraday Plugin\" menu entry in the GTK client Extract export csv to reuse for reports 3.10 [Dec 19 th , 2019]: \u00b6 Use Python 3 instead of Python 2 in the Faraday Server Add ability to manage agents with multiple executors Agents can be run with custom arguments Improved processing of uploaded reports. Now it is much faster! Add custom fields of type choice Fix vuln status transition in bulk create API (mark closed vulns as re-opened when they are triggered again) Fix bug when using non-existent workspaces in Faraday GTK Client Set service name as required in the Web UI Validate the start date of a workspace is not greater than the end date Fix command API when year is invalid When SSL misconfigurations cause websockets to fails it doesn't block server from starting Check for invalid service port number in the Web UI Fix dashboard tooltips for vulnerability Fix bug when GTK client lost connection to the server Fix style issues in \"Hosts by Service\" modal of the dashboard Add API for bulk delete of vulnerabilities Add missing vuln attributes to exported CSV faraday-manage support now displays the Operating System version Notify when faraday-manage can't run becasue of PostgreSQL HBA config error 3.9.3 [Nov 12 th , 2019]: \u00b6 Fix unicode error when exporting vulns to CSV Add vuln attributes to CSV Fix hostname parsing and add external ID to Qualys plugin 3.9 [Oct 3th, 2019]: \u00b6 Add agents feature for distributed plugin execution Add an API endpoint to to perform a bulk create of many objects (hosts, services, vulns, commands and credentials). This is used to avoid doing a lot of API requests to upload data. Now one request should be enough Major style and color changes to the Web UI Add API token authentication method Use server side stored sessions to properly invalidate cookies of logged out users Add \"New\" button to create credentials without host or service assigned yet Allow filtering hosts by its service's ports in the Web UI Performance improvements in vulnerabilities and vulnerability templates API (they were doing a lot of SQL queries because of a programming bug) Require being in the faraday-manage group when running faraday from a .deb or .rpm package Change the first page shown after the user logs in. Now it displays a workspace selection dialog Add API endpoint to import Vuln Templates from a CSV file Create the exported CSV of the status report in the backend instead of in the problem, which was much slower Add API endpoint to import hosts from a CSV file Add faraday-manage rename-user command to change a user's username Allow resizing columns in Vulnerability Templates view Avoid copying technical details when a vuln template is generated from the status report Use exact matches when searching vulns by target Add API endpoint to get which tools impacted in a host Add pagination to activity feed Add ordering for date and creator to vuln templates view Modify tabs in vuln template, add Details tab Add copy IP to clipboard button in hosts view Add creator and create date columns to vuln template view When a plugin creates a host with its IP set to a domain name, resolve the IP address of that domain Add support for logging in RFC5254 format Add active filter in workspaces view. Only show active workspaces in other parts of the Web UI Enforce end date to be greater than start date in workspaces API Fix bug in faraday-manage create-tables that incorrectly marked schema migrations as applied Fix bug in many plugins that loaded hostnames incorrectly (one hostname per chararcter) Improve references parsing in OpenVAS plugin Fix a bug in Nessus plugin when parsing reports without host_start Fix bug hostname search is now working in status-report Fix showing of services with large names in the Web UI Fix broken select all hosts checkbox Fix bug viewing an attachment/evidence when its filename contained whitespaces Fix \"Are you sure you want to quit Faraday?\" dialog showing twice in GTK 3.8.1 [Jun 19 th , 2019]: \u00b6 Add configurations for websocket ssl 3.8 [Jun 4 th , 2019]: \u00b6 Refactor the project to use absolute imports to make the installation easier (with a setup.py file). This also was a first step to make our codebase compatible with python 3. Change the commands used to run faraday. ./faraday-server.py , ./manage.py , ./faraday.py and bin/flugin are replaced for faraday-server , faraday-manage , faraday-client and fplugin respectively Changed suggested installation method. Now we provide binary executables with all python dependencies embedded into them Add admin panel to the Web UI to manage custom fields Fix slow host list when creating vulns in a workspace with many hosts Usability improvements in status report: change the way vulns are selected and confirmed Improve workspace workspace creation from the Web UI Fix attachment api when file was not found in .faraday/storage Fix visualization of the fields Policy Violations and References. Add a setting in server.ini to display the Vulnerability Cost widget of the Dashboard Fix status report resize when the browser console closes. Fix severity dropdown when creating vulnerability templates Update OS icons in the Web UI. Fix bug when using custom fields, we must use the field_name instead of the display_name Prevent creation of custom fields with the same name Add custom fields to vuln templates. Fix user's menu visibily when vuln detail is open Remove \"show all\" option in the status report pagination The activity feed widget of the dashboard now displays the hostname of the machine that runned each command Add loading spinner in hosts report. Fix \"invalid dsn\" bug in sql-shell Fix hostnames bug in Nikto and Core Impact plugins Change Openvas plugin: Low and Debug threats are not taken as vulnerabilities. Add fplugin command to close vulns created after a certain time Add list-plugins command to faraday-manage to see all available plugins Fix a logging error in PluginBase class Fix an error when using NexposePlugin from command line. Add CSV parser to Dnsmap Plugin Fix bug when creating web vulnerabilities in dirb plugin Change Nexpose Severity Mappings. 3.7.3 [May 3 rd , 2019]: \u00b6 Add parser for connection string at PGCli connection Fix bug when using custom fields, we must use the field_name instead of the display_name Fix user's menu visibily when vuln detail is open. Fix bug in status report that incorrectly showed standard vulns like if they were vulnwebs 3.7: \u00b6 Add vulnerability preview to status report Update Fierce Plugin. Import can be done from GTK console. Update Goohost plugin and now Faraday imports Goohost .txt report. Update plugin for support WPScan v-3.4.5 Update Qualysguard plugin to its 8.17.1.0.2 version Update custom fields with Searcher Update Recon-ng Plugin so that it accepts XML reports Add postres version to status-change command Couchdb configuration section will not be added anymore Add unit test for config/default.xml 3.6 [Feb 21th, 2019]: \u00b6 Fix CSRF (Cross-Site Request Forgery) vulnerability in vulnerability attachments API. This allowed an attacker to upload evidence to vulns. He/she required to know the desired workspace name and vulnerability id so it complicated the things a bit. We classified this vuln as a low impact one. Readonly and disabled workspaces Add fields 'impact', 'easeofresolution' and 'policyviolations' to vulnerability_template Add pagination in 'Command history', 'Last Vulnerabilities', 'Activity logs' into dashboard Add status_code field to web vulnerability Preserve selection after bulk edition of vulnerabilities in the Web UI Faraday's database will be created using UTF-8 encoding Fix bug of \"select a different workspace\" from an empty list loop. Fix bug when creating duplicate custom fields Fix bug when loading in server.ini with extra configs Fix ./manage.py command . It wasn't working since the last schema migration ./manage.py createsuperuser command renamed to ./manage.py create-superuser Fix bug when non-numeric vulnerability IDs were passed to the attachments API Fix logic in search exploits Add ability to 'Searcher' to execute rules in loop with dynamic variables Send searcher alert with custom mail Add gitlab-ci.yml file to execute test and pylint on gitlab runner Fix 500 error when updating services and vulns with specific read-only parameters set Fix SQLMap plugin to support newer versions of the tool Improve service's parser for Lynis plugin Fix bug when parsing URLs in Acunetix reports Fix and update NetSparker Plugin Fix bug in nessus plugin. It was trying to create a host without IP. Enabled logs on the server for plugin processing (use --debug) Fix bug when parsing hostnames in Nessus reports Fix SSLyze report automatic detection, so reports can be imported from the web ui Update Dnsmap Plugin 3.5 [Jan 16 th , 2019]: \u00b6 Redesgin of new/edit vulnerability forms Add new custom fields feature to vulnerabilities Add ./manage.py migrate to perform alembic migrations Faraday will use webargs==4.4.1 because webargs==5.0.0 fails with Python2 New system for online plugins using Threads, a few fixes for metasploit plugin online also. Fix Command \"python manage.py process-reports\" now stops once all reports have been processed Fix bug in query when it checks if a vulnerability or a workspace exists Fix Once a workspace is created through the web UI, a folder with its name is created inside ~/.faraday/report/ The manage.py now has a new support funtionality that creates a .zip file with all the information faraday's support team will need to throubleshoot your issue Status-check checks PostgreSQL encoding Fix a bug when fail importation of reports, command duration say \"In Progress\" forever. Fix confirmed bug in vulns API Update websockets code to use latest lib version bootstrap updated to v3.4.0 Manage.py support now throws a message once it finishes the process. Update Lynis to its version 2.7.1 Updated arp-scan plugin, added support in the Host class for mac address which was deprecated before v3.0 OpenVAS Plugin now supports OpenVAS v-9.0.3 3.4 [December 6 th , 2018]: \u00b6 In GTK, check active_workspace its not null Add fbruteforce services fplugin Attachments can be added to a vulnerability through the API. Catch gaierror error on lynis plugin Add OR and NOT with parenthesis support on status report search Info API now is public Web UI now detects Appscan plugin Improve performance on the workspace using cusotm query Workspaces can be set as active/disable in welcome page. Change Nmap plugin, response field in VulnWeb now goes to Data field. Update code to support latest SQLAlchemy version Fix create_vuln fplugin bug that incorrectly reported duplicated vulns Attachments on a vulnerability can be deleted through the API. Improvement in the coverage of the tests. 3.3 [Novemeber 14 th , 2018]: \u00b6 Add workspace disable feature Add mac vendor to host and services Fix typos and add sorting in workspace name (workspace list view) Improve warning when you try to select hosts instead of services as targets of a Vulnerability Web Deleted old Nexpose plugin. Now Faraday uses Nexpose-Full. Update sqlmap plugin Add updated zap plugin Add hostnames to nessus plugin Python interpreter in SSLCheck plugin is not hardcoded anymore. Fix importer key error when some data from couchdb didn't contain the \"type\" key Fix AttributeError when importing vulns without exploitation from CouchDB Fix KeyError in importer.py. This issue occurred during the import of Vulnerability Templates Fix error when file config.xml doesn't exist as the moment of executing initdb Improve invalid credentials warning by indicating the user to run Faraday GTK with --login option Fix typos in VulnDB and add two new vulnerabilities (Default Credentials, Privilege Escalation) Improved tests performance with new versions of the Faker library abort() calls were checked and changed to flask.abort() 3.2 [October 17 th , 2018]: \u00b6 Added logical operator AND to status report search Restkit dependency removed. Improvement on manage.py change-password Add feature to show only unconfirmed vulns. Add ssl information to manage.py status-check Update wpscan plugin to support latest version. Allow workspace names starting with numbers. September 21, 2018: \u00b6 Fix bug: manage.py status_check Fix bug: manage.py initdb September 17, 2018: \u00b6 Fix get exploits API New searcher feature Added host_os column to status report Fix and error while trying to execute server with --start Added option --choose-password to initdb Continous scan updated for Nessus 7 Refactor on server.config to remove globals Added a directory for custom templates for executive reports (pro and corp) Activity feed shows more results and allows to filter empty results Allow ot create workspace that start with numbers Added more variables to executive reports (pro and corp) Fixed some value checking on tasks api (date field) OpenVas plugin updated Appscan plugin update Added no confirmed vulns to report api Fixed a bug on workspace API when the workspace already exists on database Fix owner filter on status report Fixes on import_csv fplugin when the api returned 409 Fixes on status_check Fixed a bug on webui when workspace permission was changed (pro and corp) Update nexpose plugin uigrid library updated to latest version Bug fix on plugin automatic detection Fixed a bug on executive reports when multiple reports were scheduled Avoid closing the executive report and new vuln modal when the form has data Status report open new tab for evidence added change_password to manage.py Update wapiti plugin Fixed vuln count on executive report (pro and corp) Fixed css align in some tables Fixed No ports available error on the client August 17, 2018: \u00b6 Updated code to use Flask 1.0 Add threadfix integration (corp only) Fix create_service fplugin Executive report bug fix on tags Persistence server bug fix on impact and ease of resolution Fix unicode error bug on executive reports Updated code to support latest Twisted version Updated all requirements to use >= Fix dry run on create_host fplugin Fixed del_all_vulns_with and del_all_hosts Improved executive reports status update refresh Websocket port is configurable now Change minimum font size in tag cloud Fixed a problem with shodan icon on dashboard Updated license check on deleted users Users with role client was not able to change password, bug fixed Updated code to support pip 10 Added ldap to status check Credentials icon aligned Deamon now allows to execute faraday sever in more than one port and more than one process for multiplexation All views now check for permissions on workspace Pull requests #229, #231, #239 and #240 are merged Avoid polling deleted executive reports Added documentation to project Fix self xss on webshell Add postgres locks check on status_check Vuln counter fix when confirmed is on July 26, 2018: \u00b6 Interface removed from model and from persistence server lib (fplugin) Performance iprovements on the backend Add quick change workspace name (from all views) Changed the scope field of a workspace from a free text input to a list of targets New faraday styles in all webui views Add search by id for vulnerabilities Add new plugin sslyze Add new plugin wfuzz Add xsssniper plugin Fix W3af, Zap plugins Add brutexss plugin Allow to upload report file from external tools from the web Fix sshcheck import file from GTK Add reconng plugin Add sublist3r plugin Add HP Webinspect plugin Add dirsearch plugin Add ip360 plugin CouchDB was replaced by PostgreSQL :) Host object changed, now the name property is called ip Interface object was removed Note object was removed and replaced with Comment Communication object was removed and replaced with Comment Show credentials count in summarized report on the dashboard Remove vuln template CWE fields, join it with references Allow to search hosts by hostname, os and service name Allow the user to specify the desired fields of the host list table Add optional hostnames, services, MAC and description fields to the host list Workspace names can be changed from the Web UI Exploitation and severity fields only allow certain values. CWE CVEs were fixed to be valid. A script to convert custom CSVs was added. Web UI path changed from /_ui/ to / (_ui has now a redirection to / for keeping backwards compatibility) dirb plugin creates an informational vulnerability instead of a note. Add confirmed column to exported csv from webui Fixes in Arachni plugin Add new parameters --keep-old and --keep-new for faraday CLI Add new screenshot fplugin which takes a screenshot of the ip:ports of a given protocol Add fix for net sparker regular and cloud fix on severity Removed Chat feature (data is kept inside notes) Add CVSS score to reference field in Nessus plugin. Fix unicode characters bug in Netsparker plugin. Fix qualys plugin. Fix bugs with MACOS and GTK. April 10, 2018: \u00b6 Fix bug with tornado version 5.0 and GTK client. November 17, 2017: \u00b6 Fix bug with tags in models. November 5, 2017: \u00b6 Added \"Last modified\" and \"Created\" in Hosts view Fixed bug when trying to run Faraday as second process and closing the terminal (&!) Fixed bug where it asked for dependencies eternally when you have a different version than the one required Fixed small bug in the update_from_document method Fixed bug, makes the python library dependencies specific to the desired version Fixed GitHub language bar to reflect real code percentage Merge PR #195: Create gentoo_requirements_extras.txt (New Github wiki page) Merge PR #225: Add references to found vulnerabilities in nmap plugin New plugin: Netsparker cloud New plugin: Lynis (Winner of Faraday Challenge 2017) New Fplugin: changes the status of all vulnerabilities of an specific workspace to closed New Fplugin: combines the \"create_interface\" and \"create_host\" scripts into one (create_interface_and_host script) New Fplugin: import_csv , now you can import Faraday objects from a CSV August 11, 2017: \u00b6 Add check to the vuln creation modal for empty targets in the Web UI August 9, 2017: \u00b6 No changes August 7, 2017: \u00b6 Updated Core Impact plugin to be compatible with 2016 version Improved loading of fields request and website in Burp Plugin Improved Nexpose Full plugin Improved Acunetix plugin to avoid conflicts and missing imported data, and to correctly parse URLs and resolutions July 19, 2017: \u00b6 Added the ability to select more than one target when creating a vuln in the Web UI Merged PR #182 - problems with zonatransfer.me Fixed bug in Download CSV of Status report with old versions of Firefox. Fixed formula injection vulnerability in export to CSV feature Fixed DOM-based XSS in the Top Services widget of the dashboard Fix in AppScan plugin. Fix HTML injection in Vulnerability template. Add new plugin: Junit XML Improved pagination in new vuln modal of status report Added \"Policy Violations\" field for Vulnerabilities May 24, 2017: \u00b6 Fixed bug when editing workspaces created in GTK Improved host search in the WEB UI Extended the config to support different searching engines in the WEB UI Check that client and server versions match when connecting Adds the 'v' and 'version' argument for both the server and the client Fixed \"refresh\" button in the Web UI Fix API on /ws/ with duration object None Added a CRUD for Credentials to the Web UI Bug fixes on the Burp Online Plugin Added a script to connect with Reposify Fixed Hostname import in Nessus Plugin Make plugin methods log() and devlog() work again Fixed bug in SQLMap plugin that made the client freeze Improved SQLMap plugin to support more options and to show errors in GTK log console Fixed bug when creating/updating Credentials Improve plugins usage of vulnweb URL fields Fixed order of Report Plugins in the GTK import list March 17, 2017: \u00b6 Added link to name column in Hosts list Created a requirements_extras.txt file to handle optional packages for specific features Fixed bug in SQLMap plugin that made the client freeze Fixed bug when creating/updating Credentials Fixed bug in the WEB UI - menu explanation bubbles were hidden behind inputs Fixed conflict resolution when the object was deleted from another client before resolving the conflict Improved fplugin Improved the installation process Improved SQLMap plugin to support --tables and --columns options Improved navigation in Web UI Merged PR #137 - CScan improvements: bug fixing, change plugin format and removed unnecessary file output Merged PR #173 - Hostnames: added hostnames to plugins Merged PR #105 - OSint: added the possibility of using a DB other than Shodan The Status Report now remembers the sorting column and order February 8, 2017: \u00b6 Fixed max amount of vulns pagination bug in Web UI Fixed Maltego plugin January 30, 2017: \u00b6 Added an activity feed panel in the Dashboard. Added AppScan plugin. Improved Burp's Online plugin. Added fields and removed HTML tags. Refactor remaining modules to be compatible with JS Strict Mode. Fixed bug that prevented GTK from closing when user clicked CANCEL on WS creation. Fixed size of Workspace creation dialog. New cwe databases: English and Spanish. Added Hping plugin. Enhancements to Wpscan plugin. November 10, 2016: \u00b6 New library to connect with Faraday Server. Fixed Fplugin, now it uses the new library to communicate with the Server. New field for Vulnerabilities: plugin creator and status. Refactor in Faraday Core and GTK Client. Bug fixing in Faraday Client and Server. Added Faraday news notifications in GTK and Web UI. New plugins: Dirb, Netdiscover, FruityWifi, Sentinel. Improvements on the WPscan plugin. Fixed Licenses search. Refactor Licenses module to be compatible with JS Strict Mode. September 19, 2016: \u00b6 Major refactor of Faraday Client: now we support massive workspaces (100.000+ hosts). Fixed more than 10 minor bugs on the Web UI. Fixed searching with spaces character on Web UI Updated URL shown when starting Faraday. Dashboard is now refreshed automatically every 60 seconds. Fixed Propecia plugin. New plugin: WPscan Host Sidebar on GTK now adds information more intelligently and will never block the application. Evidence screenshots in report generation is now bigger. Help menu in GTK with links to interesting links. Added Help section to WEB UI. August 12, 2016: \u00b6 Added Faraday Server Improved performance in web UI Added some basic APIs to Faraday Server Added licenses management section in web UI Totally removed QT3, GTK is now the only GUI Deprecated FileSystem databses: now Faraday works exclusively with Faraday Server and CouchDB Added a button to go to the Faraday Web directly from GTK Fixed bug when deleting objects from Faraday Web Fixed bug where icons where not copied to correct folder on initialization Fixed bug where current workspace wouldn't correspond to selected workspace on the sidebar on GTK Fixed bug in 'Refresh Workspace' button on GTK Fixed bug where Host Sidebar and Statusbar information wasn't correctly updated on GTK Fixed bug in service editing Fixed sqlmap plugin Fixed metapsloit plugin Jul 1, 2016: \u00b6 GTK is the default interface now. Added new plugin : Ndiff. Added new plugin : Netcat (Gnu netcat - OpenBSD netcat - Original netcat) Added button to edit your host in the GTK interface. Hosts sidebar now can be sorted by amout of vulnerabilities and OS. Changes in installation: install.sh now installs only GTK, QT is considered deprecated. Changes in installation: Faraday now runs with the last versions of Python modules. Changes in installation: fixed names of packages in setup_server.sh Usability: Enter key in GTK dialogs works as OK button Improved handling of lost connection to CouchDB database First steps towards deprecating Filesystem databases Fixed a bug when workspace was changed Fixed a bug with Import Reports Dialog in GTK GUI on OS X. Fixed a bug with Ctrl+Shift+C and Ctrl+Shift+V in some desktops managers. Fixed a bug with mapper of vulnerabilities. Jun 13, 2016: \u00b6 Added Import Report dialog to Faraday GTK Added a 'Loading workspace...' dialog to Faraday GTK Added host sidebar to Faraday GTK Added host information dialog to Faraday GTK with the full data about a host, its interfaces, services and vulnerabilities Added support for run faraday from other directories. Fixed log reapparing after being disabled if user created a new tab Fixed bug regarding exception handling in Faraday GTK Now Faraday GTK supports Ctrl+Shift+C / Ctrl+Shift+V to Copy/Paste Faraday will now not crash if you suddenly lose connection to your CouchDB May 23, 2016: \u00b6 Removed description from Hosts list in WEB UI Fixed sort in Hosts list in WEB UI Fixed ports sorting in Host view in WEB UI Added search link for OS in Hosts list in WEB UI Removed description from Services list in WEB UI Added version to Services list in WEB UI Modified false values in Hosts list in WEB UI Added search links in Services list in WEB UI Added scrollbar in Gtk Terminal. Added workspace status in Gtk interface Added conflict resolution support for the Gtk interface Added search entry for workspaces in Gtk Added support for 'exit' command inside Faraday's Gtk terminal Improved handling of uncaught exceptions in Gtk interface Improved text formatting in Gtk's log console Fixed several small bugs in Faraday GTK Added support for resize workspace bar. Added a quote for imported reports in WEB UI. Added support for a new type of report in Qualysguard plugin. Fixed bugs in plugins: Acunetix - Nmap - Nikto. Apr 29, 2016: \u00b6 Added Open services count to Hosts list in WEB UI Improved zsh integration Added GTK3 interface prototype Added plugin detection through report name Fixed an error in wcscan script Fixed nikto plugin Fixed openvas plugin Apr 04, 2016 \u00b6 Added cli mode (see wiki for usage instructions) Support for multiple Faraday instances in the same host Fixed bug for editing web vulns in bulk Fixed bug for select all in web UI Fixed bugs in Qualys, ZAP, nikto, w3af, openVas plugins Added some new scripts and helpers Feb 26, 2016: \u00b6 Fixed bug in pip debian BugFix pip install. Checks additionals about dependencies in installation. Warning about a upgrade to experimental in debian installation. Fixed small bug in CSV importing Fixed styles for Status Report Fixed bug on Status Report filter after editing Added support for Kali Rolling Edition Notify user when the current Workspace doesn't exist Show all evidence files in Status Report Added script to remove all vulns with a specific severity value (parameterized) Fixed Arachni Plugin bugs Added new version for Maltego Plugin Added support for Mint 17 Dec 18, 2015: \u00b6 Immunity Canvas plugin added Added Dig plugin Added Traceroute plugin Fixed bug in first run of Faraday with log path and API errors Added parametrization for port configuration on APIs Refactor Plugin Base to update active WS name in var Refactor Plugins to use current WS in temp filename under $HOME/.faraday/data. Affected Plugins: amap dnsmap nmap sslcheck wcscan webfuzzer nikto Fixed bug get_installed_distributions from handler exceptions Added Wiki information about running Faraday without configuring CouchDB Fixed Unicode bug in Nexpose-full Plugin Filter false-positives in Status Report Fixed bug that prevented the use of \"reports\" and \"cwe\" strings in Workspace names Added port to Service type target in new vuln modal Added new scripts for faraday plugin: /bin/delAllVulnsWith.py - delete all vulns that match a regex /bin/getAllbySrv.py - get all IP addresses that have defined open port /bin/getAllIpsNotServices.py added - get all IPs from targets without services Fixed bug null last workspace Fixed bugs in CSV export/import in QT Oct 2, 2015: \u00b6 Continuous Scanning Tool cscan added to ./scripts/cscan Fix for saving objects without parent Hosts and Services views now have pagination and search Updates version number on Faraday Start Visual fixes on Firefox Migrate graphs from D3.js to Chart.js Added Services columns to Status Report Added sections of Commercial versions Converted references to links in Status Report. Support for CVE, CWE, Exploit Database and Open Source Vulnerability Database Added Peepingtom, SSHdefaultscan and pasteAnalyzer plugins Fixed Debian install Sep 10, 2015: \u00b6 Adding filename path information of report imported in history command Remove old couchdb upgrade process Adding Iceweasel browser > 38.2.0 support Adding more navigability in differents GUI Web (Dashboard/Services/Views) Fixed bug copy clipboard offline (update path of ngClip dependeces) Added class to set colors to severities in new/edit vuln view Medusa, Hydra & Metasploit plug-in now added discovered weak credentials as a vulnerability Nmap plug-in applyies a severity depending on the result of a NSE script Fixed small bug for empty ease of resolution Adding more time to generation shells QT Added \"Search in Shodan\" links in different views (Status Report, Host View, Service View) Removed required of name field service bulk edition Added ng-disabled on Edit button if select more of 1 host on Host View WEB UI Refactored GUI Web: Icon added for Modal Error OS, Creator, Date for modal-services-by-host.html Fixed typo in Host Edit, the popup message was wrong First version for in estilos.css for clear mode Also, added hover to grey boxes in the Dashboard. Added vulns count for Hosts in WEB UI Updated w3af plugin to support report version 1.7.6 Ignored cwe database from updater and QT views Plugin for Nexpose XML Export 2.0 Added masscan plugin (1.0.3) Aug 19, 2015: \u00b6 Exported CSV contains filters and columns from Status Report in WEB UI Vulnerability counter on Status Report in WEB UI Added quick vuln edit and delete in WEB UI Expanded Unit Tests for WEB UI XML Cleaner Kali 2.0 support Improve plugins running status log (Adding log information on report importing) Clean dev log on plugins w3af plugin refactoring Fix Debian \u215e.1 install support Aug 05, 2015: \u00b6 Added CWE database and integration with vulns creation Added ENTER shortcut on modals Progress bar for workspace in the dashboard Bug fixing in workspaces and status report components Unit testing for vulns, status report and workspaces components Debian 8.1 support Jun 30, 2015: \u00b6 Added hosts CRUD Added services CRUD Fix ubuntu 15.04 installation bug Small bug in burp plugin \"Import new vulnerabilities\" checkbox issue Added an interactive visualization to calculate the value of a Workspace Fixed several bugs in WEB UI Added a URL filter functionality to the status report, allowing searches by fields Apr 17, 2015: \u00b6 You can get the new version here: https://github.com/infobyte/faraday/archive/v1.0.10.tar.gz Changes: Styles changes in WEB UI: fancy component selection, improved workspaces selection. Bugfixes: * Date on Workspace creation * Tables in Firefox Apr 7, 2015: \u00b6 You can get the new version here: * https://github.com/infobyte/faraday/archive/v1.0.9.tar.gz Changes: Performance improvement in the dashboard Fix bug OSX install Bug fixes Mar 9, 2015: \u00b6 You can get the new version here: https://github.com/infobyte/faraday/archive/v1.0.8.tar.gz Changes: WcScan script and plugin (scripts/wcscan.py) New Dashboard D3 with AngularJS Easy access to Vulnerability pages in the Status Report Easy access to the Host pages on the dashboard Creation and Editing capabilities for the Workspace from the UI Web Support installation for the latest version of Debian/Ubuntu/Kali sqlmap version 1.0-dev support updated API Status Check in both ZSH & QT GUI Field added for resolution of vulnerabilities classification with plug-ins updated to support the new function. Field added for rating \"ease of resolution\" for vulnerabilities Adjustments for Resolution field New Faraday plugin for Burp. Version 1.2 -Corrections for the vulnerabilities duplication for the burp plugin -New tab section to configure the new Vulnerabilities downloads for Faraday Automated backup for couch database Ability to upload evidence of a vulnerability (as an attachment) Ability to assign Vulnerability Impact (confidentiality, integrity, availability). Dec 12, 2014: \u00b6 You can get the new version here: https://github.com/infobyte/faraday/archive/v1.0.7.tar.gz Changes: Improved Vulnerability Edition usability, selecting a vuln will load it's content. ZSH UI now is showing notifications. ZSH UI now is showing active workspace. Faraday now asks confirmation on exit, If you have pending conflicts to solve it will show the number of each. Vulnerability creation is now suported in the status report. Introducing SSLCheck, a tool for verify bugs in SSL/TLS Certificates on remote hosts. This is integrated with Faraday with a plugin. Shodan Plugin is now working with the new API. Some cosmetic changes in the status report. Bugfixes: Sorting collumns in the Status Report now is working. Workspace icon is based on the type of the workspace. Opening the reports in QT UI now opens the active workspace. UI Web dates fixes, we were showing dates with a off-by-one error. Vulnerability edition was missing 'critical' severity. Objects merge bugfixing Metadata recursive save fix Nov 7, 2014: \u00b6 You can get the new version here: https://github.com/infobyte/faraday/archive/v1.0.6.tar.gz Changes: Status report modifications: Web vulnerability edition support. Variable columns in status report. New field called \"Data\" with extra information about a vulnerability. Bug fixes Oct 17, 2014: \u00b6 infobyte/faraday@a81c637 Status report now have edition capabilities Introducing batch vulnerability edition and deletion. Now you can edit your status report. Lots of bug fixes Ubuntu 14.04 support fixes Mac support fixes Sep 26, 2014: \u00b6 infobyte/faraday@440858e New Dashboard design with summarized information. D3.js Fancy visualizations. Vulnerability Status report. Command run user/host identification. Vulnerability Statistics. Optimization Refactor. Jun 06, 2014: \u00b6 infobyte/faraday@e616bdb Notifications: Updating objets on faraday now results in a beautiful notification in the QT ui. Performance: Enhacing performance when lots of workspaces are available. We now load each workspace whe it's needed instead of loading ahead the full workspace list. UI: Workspace split, now you can select the workspace to visualize. We are now using bootstrap. API: New operations on the Rest API (this is just for the following UI modifications). Vulnerability update and delete operations. May 14, 2014: \u00b6 infobyte/faraday@9dfa9ad Improving (web interface, vulnerability classification) Apr 30, 2014: \u00b6 infobyte/faraday@931865f MacOS Support Apr 04, 2014: \u00b6 infobyte/faraday@0fe6978 We are proud to present two new features that will enhace the Faraday experience. Taking feedback from our users we took account that each of them had particular needs from their consoles (completion, size, fonts, so on so forth) and their need to be able to know what commands where run during an engagement. 1 2 * A brand new ZSH based Terminal UI * The Command Run execution history","title":"Faraday Server"},{"location":"RELEASE/#new-features-in-the-latest-update","text":"","title":"New features in the latest update"},{"location":"RELEASE/#3190-dec-27th-2021","text":"Add v3 bulks endpoints DELETE and EDIT (PATCH) Add logs of loggin, logout and log error to main log Fix bug in bulk update for m2m fields Add clear settings command Add open medium, high and critical vulns histogram Fix integrity constraint error on cve update Fix static content for react Add cvss within vulnerability model Add check to see if workspace name is longer than 250 characters. In that case raises an error Change concat in urlstrings for join or urljoin Add cve to csv export","title":"3.19.0 [Dec 27th, 2021]:"},{"location":"RELEASE/#3181-nov-5th-2021","text":"Fix CVE issue","title":"3.18.1 [Nov 5th, 2021]:"},{"location":"RELEASE/#3180-oct-21st-2021","text":"Remove attachments in vulns filter endpoint Add open and confirmed vulns in workspace stats Add user id to session API endpoint Add cve to vulnerability model Change funcs to views FIX report import Add last_run_agent_date field to workspace endpoint Fix cve parsing in vulnerability create and bulk create Fix order_by in filters api Fix 500 status code with invalid executor arguments","title":"3.18.0 [Oct 21st, 2021]:"},{"location":"RELEASE/#3171-aug-20th-2021","text":"FIX bug when starting the server, creates a pool for reporting that breaks.","title":"3.17.1 [Aug 20th, 2021]:"},{"location":"RELEASE/#3170-aug-10th-2021","text":"ADD --data parameter to faraday-manage settings MOD Process report files in a separate process MOD Make bulk_create requests asynchronous","title":"3.17.0 [Aug 10th, 2021]:"},{"location":"RELEASE/#3162-jul-2nd-2021","text":"FIX bug where workspaces are not updatable by UI","title":"3.16.2 [Jul 2nd, 2021]:"},{"location":"RELEASE/#3161-jul-2nd-2021","text":"MOD only show settings of this version in faraday-manage settings FIX update minimum version of click dependency","title":"3.16.1 [Jul 2nd, 2021]:"},{"location":"RELEASE/#3160-jun-29th-2021","text":"BREAKING CHANGE: API V2 discontinued BREAKING CHANGE: Changed minimum version of python to 3.7 ADD agent parameters has types (protocol with agent and its APIs) ADD move settings from server.in to a db model ADD (optional) query logs MOD new threads management MOD vulnerabilities' endpoint no longer loads evidence unless requested with get_evidence=true FIX now it is not possible to create workspace of name \"filter\" FIX bug with dates in the future FIX bug with click 8 FIX bug using --port command FIX endpoints returning 500 as status code REMOVE the need tom CSRF token from evidence upload api Changes in Faraday Professional: ADD reports can contain user comments ADD special characters restrictions to faraday-manage create-superuser ADD randomized id within the generated executive reports ADD API limited by license presence ADD redis support as session storage. ADD server configuration by API MOD Roles now works with the security library, making API and database changes MOD code style improvements FIX endpoints returning 500 as status code Changes in Faraday Corporate: ADD improved regex for scheduled agents ADD issue types gotten from directly from the user Jira instance's API MOD match ServiceNow OAuth endpoint's URL with the same format as Jira FIX typo when running faraday-manage database-schema FIX error downloading logs using LDAP REMOVE unnecessary data sent to integrations endpoints","title":"3.16.0 [Jun 29th, 2021]:"},{"location":"RELEASE/#3150-may-18th-2021","text":"ADD Basic Auth support ADD support for GET method in websocket_tokens, POST will be deprecated in the future ADD CVSS(String), CWE(String), CVE(relationship) columns to vulnerability model and API ADD agent token's API says the renewal cycling duration MOD Improve database model to be able to delete workspaces fastly MOD Improve code style and uses (less flake8 exceptions, py3 super style, Flask app as singleton, etc) MOD workspaces' names regex to verify they cannot contain forward slash ( / ) MOD Improve bulk create logs FIX Own schema breaking Marshmallow 3.11.0+ UPD flask_security_too to version 4.0.0+","title":"3.15.0 [May 18th, 2021]:"},{"location":"RELEASE/#3144-apr-15th-2021","text":"Updated plugins package, which update appscan plugin","title":"3.14.4 [Apr 15th, 2021]:"},{"location":"RELEASE/#3143-mar-30th-2021","text":"MOD MAYOR Breaking change: Use frontend from other repository ADD last_run to executors and agents ADD ignore info vulns option (from faraday-plugins 1.4.3) ADD invalid logins are registered in audit.log ADD agent registration tokens are now 6-digit short and automatically regenerated every 30 seconds MOD Fix logout redirect loop REMOVE support for native SSL","title":"3.14.3 [Mar 30th, 2021]:"},{"location":"RELEASE/#3142-feb-26th-2021","text":"ADD New plugins: microsoft baseline security analyzer nextnet openscap FIX old versions of Nessus plugins bugs","title":"3.14.2 [Feb 26th, 2021]:"},{"location":"RELEASE/#3141-feb-17th-2021","text":"ADD forgot password ADD update services by bulk_create ADD FARADAY_DISABLE_LOGS varibale to disable logs to filesystem ADD security logs in audit.log file UPD security dependency Flask-Security-Too v3.4.4 MOD rename total_rows field in filter host response MOD improved Export cvs performance by reducing the number of queries MOD sanitize the content of vulns' request and response MOD dont strip new line in description when exporting csv MOD improved threads management on exception MOD improved performance on vulnerability filter MOD improved API documentation FIX upload a report with invalid custom fields ADD v3 API, which includes: All endpoints ends without / PATCH {model}/id endpoints ~~Bulk update via PATCH {model} endpoints~~ In a future release ~~Bulk delete via DELETE {model} endpoints~~ In a future release Endpoints removed: /v2/ws/<workspace_id>/activate/ /v2/ws/<workspace_id>/change_readonly/ /v2/ws/<workspace_id>/deactivate/ /v2/ws/<workspace_name>/hosts/bulk_delete/ /v2/ws/<workspace_name>/vulns/bulk_delete/ Endpoints updated: /v2/ws/<workspace_name>/vulns/<int:vuln_id>/attachments/ => \\ /v3/ws/<workspace_name>/vulns/<int:vuln_id>/attachment","title":"3.14.1 [Feb 17th, 2021]:"},{"location":"RELEASE/#3140-dec-23th-2020","text":"ADD RESTless filter to multiples views, improving the searchs ADD \"extras\" modal in options menu, linking to other Faraday resources ADD import vulnerability templates command to faraday-manage ADD generate nginx config command to faraday-manage ADD vulnerabilities severities count to host ADD Active Agent columns to workspace ADD critical vulns count to workspace ADD Remember me login option ADD distinguish host flag ADD a create_date field to comments FIX to use new webargs version FIX Custom Fields view in KB (Vulnerability Templates) FIX bug on filter endpoint for vulnerabilities with offset and limit parameters FIX bug raising 403 Forbidden HTTP error when the first workspace was not active FIX bug when changing the token expiration change FIX bug in Custom Fields type Choice when choice name is too long. FIX Vulnerability Filter endpoint Performance improvement using joinedload. Removed several nplusone uses MOD Updating the template.ini for new installations MOD Improve SMTP configuration MOD The agent now indicates how much time it had run (faraday-agent-dispatcher v1.4.0) MOD Type \"Vulnerability Web\" cannot have \"Host\" type as a parent when creating data in bulk MOD Expiration default time from 1 month to 12 hour MOD Improve data reference when uploading a new report MOD Refactor Knowledge Base's bulk create to take to take also multiple creation from vulns in status report. MOD All HTTP OPTIONS endpoints are now public MOD Change documentation and what's new links in about REMOVE Flask static endpoint REMOVE of our custom logger","title":"3.14.0 [Dec 23th, 2020]:"},{"location":"RELEASE/#312-sep-3rd-2020","text":"Now agents can upload data to multiples workspaces Add agent and executor data to Activity Feed Add session timeout configuration to server.ini configuration file Add hostnames to already existing hosts when importing a report Add new faraday background image Display an error when uploading an invalid report Use minimized JS libraries to improve page load time Fix aspect ratio distortion in evidence tab of vulnerability preview Fix broken Knowledge Base upload modal Fix closing of websocket connections when communicating with Agents Change Custom Fields names in exported CSV to make columns compatible with faraday_csv plugin Fix import CSV for vuln template: some values were overwritten with default values. Catch errors in faraday-manage commands when the connection string is not specified in the server.ini file Fix bug that generated a session when using Token authentication Fix bug that requested to the API when an invalid filter is used Cleanup old sessions when a user logs in Remove unmaintained Flask-Restless dependency Remove pbkdf2_sha1 and plain password schemes. We only support bcrypt","title":"3.12 [Sep 3rd, 2020]:"},{"location":"RELEASE/#3112","text":"","title":"3.11.2:"},{"location":"RELEASE/#3111-jun-3rd-2020","text":"Fix missing shodan icon and invalid link in dashboard and hosts list Upgrade marshmallow, webargs, werkzeug and flask-login dependencies to latest versions in order to make packaging for distros easier","title":"3.11.1 [Jun 3rd, 2020]:"},{"location":"RELEASE/#311-apr-22nd-2020","text":"Move GTK client to another repository to improve release times. Fix formula injection vulnerability when exporting vulnerability data to CSV. This was considered a low impact vulnerability. Remove \"--ssl\" parameter. Read SSL information from the config file. Add OpenAPI autogenerated documentation support Show agent information in command history Add bulk delete endpoint for hosts API Add column with information to track agent execution data Add tool attribute to vulnerability to avoid incorrectly showing \"Web UI\" as creator tool Add sorting by target in credentials view Add creator information when uploading reports or using de bulk create api Add feature to disable rules in the searcher Add API endpoint to export Faraday data to Metasploit XML format Change websocket url route from / to /websockets Use run date instead of creation date when plugins report specifies it Improve knowledge base UX Improve workspace table and status report table UX. Improve format of exported CSV to include more fields Sort results in count API endpoint Limit description width in knowledge base Change log date format to ISO 8601 Fix parsing server port config in server.ini Fix bug when _rev was send to the hosts API Send JSON response when you get a 500 or 404 error Fix bug parsing invalid data in NullToBlankString Changes in plugins (only available through Web UI, not in GTK client yet): New plugins: Checkmarx Faraday_csv (output of exported Faraday csv) Qualyswebapp Whitesource Updated plugins: Acunetix AppScan Arachni Nessus Netspaker Netspaker cloud Nexpose Openvas QualysGuard Retina W3af WPScan Webinspect Zap","title":"3.11 [Apr 22nd, 2020]:"},{"location":"RELEASE/#3102-jan-30th-2020","text":"Fix Cross-Site Request Forgery (CSRF) vulnerability in all JSON API endpoints. This was caused because a third-party library doesn't implement proper Content-Type header validation. To mitigate the vulnerability, we set the session cookie to have the SameSite: Lax property. Fix Faraday Server logs were always in debug Add update date column when exporting vulnerabilities to CSV Fix unicode error when exporting vulnerabilities to CSV","title":"3.10.2 [Jan 30th, 2020]:"},{"location":"RELEASE/#3101-jan-10th-2020","text":"Fix installation with pip install --no-binary :all: faradaysec Force usage of webargs 5 (webargs 6 broke backwards compatibility) Use latest version of faraday-plugins Fix broken \"Faraday Plugin\" menu entry in the GTK client Extract export csv to reuse for reports","title":"3.10.1 [Jan 10th, 2020]:"},{"location":"RELEASE/#310-dec-19th-2019","text":"Use Python 3 instead of Python 2 in the Faraday Server Add ability to manage agents with multiple executors Agents can be run with custom arguments Improved processing of uploaded reports. Now it is much faster! Add custom fields of type choice Fix vuln status transition in bulk create API (mark closed vulns as re-opened when they are triggered again) Fix bug when using non-existent workspaces in Faraday GTK Client Set service name as required in the Web UI Validate the start date of a workspace is not greater than the end date Fix command API when year is invalid When SSL misconfigurations cause websockets to fails it doesn't block server from starting Check for invalid service port number in the Web UI Fix dashboard tooltips for vulnerability Fix bug when GTK client lost connection to the server Fix style issues in \"Hosts by Service\" modal of the dashboard Add API for bulk delete of vulnerabilities Add missing vuln attributes to exported CSV faraday-manage support now displays the Operating System version Notify when faraday-manage can't run becasue of PostgreSQL HBA config error","title":"3.10 [Dec 19th, 2019]:"},{"location":"RELEASE/#393-nov-12th-2019","text":"Fix unicode error when exporting vulns to CSV Add vuln attributes to CSV Fix hostname parsing and add external ID to Qualys plugin","title":"3.9.3 [Nov 12th, 2019]:"},{"location":"RELEASE/#39-oct-3th-2019","text":"Add agents feature for distributed plugin execution Add an API endpoint to to perform a bulk create of many objects (hosts, services, vulns, commands and credentials). This is used to avoid doing a lot of API requests to upload data. Now one request should be enough Major style and color changes to the Web UI Add API token authentication method Use server side stored sessions to properly invalidate cookies of logged out users Add \"New\" button to create credentials without host or service assigned yet Allow filtering hosts by its service's ports in the Web UI Performance improvements in vulnerabilities and vulnerability templates API (they were doing a lot of SQL queries because of a programming bug) Require being in the faraday-manage group when running faraday from a .deb or .rpm package Change the first page shown after the user logs in. Now it displays a workspace selection dialog Add API endpoint to import Vuln Templates from a CSV file Create the exported CSV of the status report in the backend instead of in the problem, which was much slower Add API endpoint to import hosts from a CSV file Add faraday-manage rename-user command to change a user's username Allow resizing columns in Vulnerability Templates view Avoid copying technical details when a vuln template is generated from the status report Use exact matches when searching vulns by target Add API endpoint to get which tools impacted in a host Add pagination to activity feed Add ordering for date and creator to vuln templates view Modify tabs in vuln template, add Details tab Add copy IP to clipboard button in hosts view Add creator and create date columns to vuln template view When a plugin creates a host with its IP set to a domain name, resolve the IP address of that domain Add support for logging in RFC5254 format Add active filter in workspaces view. Only show active workspaces in other parts of the Web UI Enforce end date to be greater than start date in workspaces API Fix bug in faraday-manage create-tables that incorrectly marked schema migrations as applied Fix bug in many plugins that loaded hostnames incorrectly (one hostname per chararcter) Improve references parsing in OpenVAS plugin Fix a bug in Nessus plugin when parsing reports without host_start Fix bug hostname search is now working in status-report Fix showing of services with large names in the Web UI Fix broken select all hosts checkbox Fix bug viewing an attachment/evidence when its filename contained whitespaces Fix \"Are you sure you want to quit Faraday?\" dialog showing twice in GTK","title":"3.9 [Oct 3th, 2019]:"},{"location":"RELEASE/#381-jun-19th-2019","text":"Add configurations for websocket ssl","title":"3.8.1 [Jun 19th, 2019]:"},{"location":"RELEASE/#38-jun-4th-2019","text":"Refactor the project to use absolute imports to make the installation easier (with a setup.py file). This also was a first step to make our codebase compatible with python 3. Change the commands used to run faraday. ./faraday-server.py , ./manage.py , ./faraday.py and bin/flugin are replaced for faraday-server , faraday-manage , faraday-client and fplugin respectively Changed suggested installation method. Now we provide binary executables with all python dependencies embedded into them Add admin panel to the Web UI to manage custom fields Fix slow host list when creating vulns in a workspace with many hosts Usability improvements in status report: change the way vulns are selected and confirmed Improve workspace workspace creation from the Web UI Fix attachment api when file was not found in .faraday/storage Fix visualization of the fields Policy Violations and References. Add a setting in server.ini to display the Vulnerability Cost widget of the Dashboard Fix status report resize when the browser console closes. Fix severity dropdown when creating vulnerability templates Update OS icons in the Web UI. Fix bug when using custom fields, we must use the field_name instead of the display_name Prevent creation of custom fields with the same name Add custom fields to vuln templates. Fix user's menu visibily when vuln detail is open Remove \"show all\" option in the status report pagination The activity feed widget of the dashboard now displays the hostname of the machine that runned each command Add loading spinner in hosts report. Fix \"invalid dsn\" bug in sql-shell Fix hostnames bug in Nikto and Core Impact plugins Change Openvas plugin: Low and Debug threats are not taken as vulnerabilities. Add fplugin command to close vulns created after a certain time Add list-plugins command to faraday-manage to see all available plugins Fix a logging error in PluginBase class Fix an error when using NexposePlugin from command line. Add CSV parser to Dnsmap Plugin Fix bug when creating web vulnerabilities in dirb plugin Change Nexpose Severity Mappings.","title":"3.8 [Jun 4th, 2019]:"},{"location":"RELEASE/#373-may-3rd-2019","text":"Add parser for connection string at PGCli connection Fix bug when using custom fields, we must use the field_name instead of the display_name Fix user's menu visibily when vuln detail is open. Fix bug in status report that incorrectly showed standard vulns like if they were vulnwebs","title":"3.7.3 [May 3rd, 2019]:"},{"location":"RELEASE/#37","text":"Add vulnerability preview to status report Update Fierce Plugin. Import can be done from GTK console. Update Goohost plugin and now Faraday imports Goohost .txt report. Update plugin for support WPScan v-3.4.5 Update Qualysguard plugin to its 8.17.1.0.2 version Update custom fields with Searcher Update Recon-ng Plugin so that it accepts XML reports Add postres version to status-change command Couchdb configuration section will not be added anymore Add unit test for config/default.xml","title":"3.7:"},{"location":"RELEASE/#36-feb-21th-2019","text":"Fix CSRF (Cross-Site Request Forgery) vulnerability in vulnerability attachments API. This allowed an attacker to upload evidence to vulns. He/she required to know the desired workspace name and vulnerability id so it complicated the things a bit. We classified this vuln as a low impact one. Readonly and disabled workspaces Add fields 'impact', 'easeofresolution' and 'policyviolations' to vulnerability_template Add pagination in 'Command history', 'Last Vulnerabilities', 'Activity logs' into dashboard Add status_code field to web vulnerability Preserve selection after bulk edition of vulnerabilities in the Web UI Faraday's database will be created using UTF-8 encoding Fix bug of \"select a different workspace\" from an empty list loop. Fix bug when creating duplicate custom fields Fix bug when loading in server.ini with extra configs Fix ./manage.py command . It wasn't working since the last schema migration ./manage.py createsuperuser command renamed to ./manage.py create-superuser Fix bug when non-numeric vulnerability IDs were passed to the attachments API Fix logic in search exploits Add ability to 'Searcher' to execute rules in loop with dynamic variables Send searcher alert with custom mail Add gitlab-ci.yml file to execute test and pylint on gitlab runner Fix 500 error when updating services and vulns with specific read-only parameters set Fix SQLMap plugin to support newer versions of the tool Improve service's parser for Lynis plugin Fix bug when parsing URLs in Acunetix reports Fix and update NetSparker Plugin Fix bug in nessus plugin. It was trying to create a host without IP. Enabled logs on the server for plugin processing (use --debug) Fix bug when parsing hostnames in Nessus reports Fix SSLyze report automatic detection, so reports can be imported from the web ui Update Dnsmap Plugin","title":"3.6 [Feb 21th, 2019]:"},{"location":"RELEASE/#35-jan-16th-2019","text":"Redesgin of new/edit vulnerability forms Add new custom fields feature to vulnerabilities Add ./manage.py migrate to perform alembic migrations Faraday will use webargs==4.4.1 because webargs==5.0.0 fails with Python2 New system for online plugins using Threads, a few fixes for metasploit plugin online also. Fix Command \"python manage.py process-reports\" now stops once all reports have been processed Fix bug in query when it checks if a vulnerability or a workspace exists Fix Once a workspace is created through the web UI, a folder with its name is created inside ~/.faraday/report/ The manage.py now has a new support funtionality that creates a .zip file with all the information faraday's support team will need to throubleshoot your issue Status-check checks PostgreSQL encoding Fix a bug when fail importation of reports, command duration say \"In Progress\" forever. Fix confirmed bug in vulns API Update websockets code to use latest lib version bootstrap updated to v3.4.0 Manage.py support now throws a message once it finishes the process. Update Lynis to its version 2.7.1 Updated arp-scan plugin, added support in the Host class for mac address which was deprecated before v3.0 OpenVAS Plugin now supports OpenVAS v-9.0.3","title":"3.5 [Jan 16th, 2019]:"},{"location":"RELEASE/#34-december-6th-2018","text":"In GTK, check active_workspace its not null Add fbruteforce services fplugin Attachments can be added to a vulnerability through the API. Catch gaierror error on lynis plugin Add OR and NOT with parenthesis support on status report search Info API now is public Web UI now detects Appscan plugin Improve performance on the workspace using cusotm query Workspaces can be set as active/disable in welcome page. Change Nmap plugin, response field in VulnWeb now goes to Data field. Update code to support latest SQLAlchemy version Fix create_vuln fplugin bug that incorrectly reported duplicated vulns Attachments on a vulnerability can be deleted through the API. Improvement in the coverage of the tests.","title":"3.4 [December 6th, 2018]:"},{"location":"RELEASE/#33-novemeber-14th-2018","text":"Add workspace disable feature Add mac vendor to host and services Fix typos and add sorting in workspace name (workspace list view) Improve warning when you try to select hosts instead of services as targets of a Vulnerability Web Deleted old Nexpose plugin. Now Faraday uses Nexpose-Full. Update sqlmap plugin Add updated zap plugin Add hostnames to nessus plugin Python interpreter in SSLCheck plugin is not hardcoded anymore. Fix importer key error when some data from couchdb didn't contain the \"type\" key Fix AttributeError when importing vulns without exploitation from CouchDB Fix KeyError in importer.py. This issue occurred during the import of Vulnerability Templates Fix error when file config.xml doesn't exist as the moment of executing initdb Improve invalid credentials warning by indicating the user to run Faraday GTK with --login option Fix typos in VulnDB and add two new vulnerabilities (Default Credentials, Privilege Escalation) Improved tests performance with new versions of the Faker library abort() calls were checked and changed to flask.abort()","title":"3.3 [Novemeber 14th, 2018]:"},{"location":"RELEASE/#32-october-17th-2018","text":"Added logical operator AND to status report search Restkit dependency removed. Improvement on manage.py change-password Add feature to show only unconfirmed vulns. Add ssl information to manage.py status-check Update wpscan plugin to support latest version. Allow workspace names starting with numbers.","title":"3.2 [October 17th, 2018]:"},{"location":"RELEASE/#september-21-2018","text":"Fix bug: manage.py status_check Fix bug: manage.py initdb","title":"September 21, 2018:"},{"location":"RELEASE/#september-17-2018","text":"Fix get exploits API New searcher feature Added host_os column to status report Fix and error while trying to execute server with --start Added option --choose-password to initdb Continous scan updated for Nessus 7 Refactor on server.config to remove globals Added a directory for custom templates for executive reports (pro and corp) Activity feed shows more results and allows to filter empty results Allow ot create workspace that start with numbers Added more variables to executive reports (pro and corp) Fixed some value checking on tasks api (date field) OpenVas plugin updated Appscan plugin update Added no confirmed vulns to report api Fixed a bug on workspace API when the workspace already exists on database Fix owner filter on status report Fixes on import_csv fplugin when the api returned 409 Fixes on status_check Fixed a bug on webui when workspace permission was changed (pro and corp) Update nexpose plugin uigrid library updated to latest version Bug fix on plugin automatic detection Fixed a bug on executive reports when multiple reports were scheduled Avoid closing the executive report and new vuln modal when the form has data Status report open new tab for evidence added change_password to manage.py Update wapiti plugin Fixed vuln count on executive report (pro and corp) Fixed css align in some tables Fixed No ports available error on the client","title":"September 17, 2018:"},{"location":"RELEASE/#august-17-2018","text":"Updated code to use Flask 1.0 Add threadfix integration (corp only) Fix create_service fplugin Executive report bug fix on tags Persistence server bug fix on impact and ease of resolution Fix unicode error bug on executive reports Updated code to support latest Twisted version Updated all requirements to use >= Fix dry run on create_host fplugin Fixed del_all_vulns_with and del_all_hosts Improved executive reports status update refresh Websocket port is configurable now Change minimum font size in tag cloud Fixed a problem with shodan icon on dashboard Updated license check on deleted users Users with role client was not able to change password, bug fixed Updated code to support pip 10 Added ldap to status check Credentials icon aligned Deamon now allows to execute faraday sever in more than one port and more than one process for multiplexation All views now check for permissions on workspace Pull requests #229, #231, #239 and #240 are merged Avoid polling deleted executive reports Added documentation to project Fix self xss on webshell Add postgres locks check on status_check Vuln counter fix when confirmed is on","title":"August 17, 2018:"},{"location":"RELEASE/#july-26-2018","text":"Interface removed from model and from persistence server lib (fplugin) Performance iprovements on the backend Add quick change workspace name (from all views) Changed the scope field of a workspace from a free text input to a list of targets New faraday styles in all webui views Add search by id for vulnerabilities Add new plugin sslyze Add new plugin wfuzz Add xsssniper plugin Fix W3af, Zap plugins Add brutexss plugin Allow to upload report file from external tools from the web Fix sshcheck import file from GTK Add reconng plugin Add sublist3r plugin Add HP Webinspect plugin Add dirsearch plugin Add ip360 plugin CouchDB was replaced by PostgreSQL :) Host object changed, now the name property is called ip Interface object was removed Note object was removed and replaced with Comment Communication object was removed and replaced with Comment Show credentials count in summarized report on the dashboard Remove vuln template CWE fields, join it with references Allow to search hosts by hostname, os and service name Allow the user to specify the desired fields of the host list table Add optional hostnames, services, MAC and description fields to the host list Workspace names can be changed from the Web UI Exploitation and severity fields only allow certain values. CWE CVEs were fixed to be valid. A script to convert custom CSVs was added. Web UI path changed from /_ui/ to / (_ui has now a redirection to / for keeping backwards compatibility) dirb plugin creates an informational vulnerability instead of a note. Add confirmed column to exported csv from webui Fixes in Arachni plugin Add new parameters --keep-old and --keep-new for faraday CLI Add new screenshot fplugin which takes a screenshot of the ip:ports of a given protocol Add fix for net sparker regular and cloud fix on severity Removed Chat feature (data is kept inside notes) Add CVSS score to reference field in Nessus plugin. Fix unicode characters bug in Netsparker plugin. Fix qualys plugin. Fix bugs with MACOS and GTK.","title":"July 26, 2018:"},{"location":"RELEASE/#april-10-2018","text":"Fix bug with tornado version 5.0 and GTK client.","title":"April 10, 2018:"},{"location":"RELEASE/#november-17-2017","text":"Fix bug with tags in models.","title":"November 17, 2017:"},{"location":"RELEASE/#november-5-2017","text":"Added \"Last modified\" and \"Created\" in Hosts view Fixed bug when trying to run Faraday as second process and closing the terminal (&!) Fixed bug where it asked for dependencies eternally when you have a different version than the one required Fixed small bug in the update_from_document method Fixed bug, makes the python library dependencies specific to the desired version Fixed GitHub language bar to reflect real code percentage Merge PR #195: Create gentoo_requirements_extras.txt (New Github wiki page) Merge PR #225: Add references to found vulnerabilities in nmap plugin New plugin: Netsparker cloud New plugin: Lynis (Winner of Faraday Challenge 2017) New Fplugin: changes the status of all vulnerabilities of an specific workspace to closed New Fplugin: combines the \"create_interface\" and \"create_host\" scripts into one (create_interface_and_host script) New Fplugin: import_csv , now you can import Faraday objects from a CSV","title":"November 5, 2017:"},{"location":"RELEASE/#august-11-2017","text":"Add check to the vuln creation modal for empty targets in the Web UI","title":"August 11, 2017:"},{"location":"RELEASE/#august-9-2017","text":"No changes","title":"August 9, 2017:"},{"location":"RELEASE/#august-7-2017","text":"Updated Core Impact plugin to be compatible with 2016 version Improved loading of fields request and website in Burp Plugin Improved Nexpose Full plugin Improved Acunetix plugin to avoid conflicts and missing imported data, and to correctly parse URLs and resolutions","title":"August 7, 2017:"},{"location":"RELEASE/#july-19-2017","text":"Added the ability to select more than one target when creating a vuln in the Web UI Merged PR #182 - problems with zonatransfer.me Fixed bug in Download CSV of Status report with old versions of Firefox. Fixed formula injection vulnerability in export to CSV feature Fixed DOM-based XSS in the Top Services widget of the dashboard Fix in AppScan plugin. Fix HTML injection in Vulnerability template. Add new plugin: Junit XML Improved pagination in new vuln modal of status report Added \"Policy Violations\" field for Vulnerabilities","title":"July 19, 2017:"},{"location":"RELEASE/#may-24-2017","text":"Fixed bug when editing workspaces created in GTK Improved host search in the WEB UI Extended the config to support different searching engines in the WEB UI Check that client and server versions match when connecting Adds the 'v' and 'version' argument for both the server and the client Fixed \"refresh\" button in the Web UI Fix API on /ws/ with duration object None Added a CRUD for Credentials to the Web UI Bug fixes on the Burp Online Plugin Added a script to connect with Reposify Fixed Hostname import in Nessus Plugin Make plugin methods log() and devlog() work again Fixed bug in SQLMap plugin that made the client freeze Improved SQLMap plugin to support more options and to show errors in GTK log console Fixed bug when creating/updating Credentials Improve plugins usage of vulnweb URL fields Fixed order of Report Plugins in the GTK import list","title":"May 24, 2017:"},{"location":"RELEASE/#march-17-2017","text":"Added link to name column in Hosts list Created a requirements_extras.txt file to handle optional packages for specific features Fixed bug in SQLMap plugin that made the client freeze Fixed bug when creating/updating Credentials Fixed bug in the WEB UI - menu explanation bubbles were hidden behind inputs Fixed conflict resolution when the object was deleted from another client before resolving the conflict Improved fplugin Improved the installation process Improved SQLMap plugin to support --tables and --columns options Improved navigation in Web UI Merged PR #137 - CScan improvements: bug fixing, change plugin format and removed unnecessary file output Merged PR #173 - Hostnames: added hostnames to plugins Merged PR #105 - OSint: added the possibility of using a DB other than Shodan The Status Report now remembers the sorting column and order","title":"March 17, 2017:"},{"location":"RELEASE/#february-8-2017","text":"Fixed max amount of vulns pagination bug in Web UI Fixed Maltego plugin","title":"February 8, 2017:"},{"location":"RELEASE/#january-30-2017","text":"Added an activity feed panel in the Dashboard. Added AppScan plugin. Improved Burp's Online plugin. Added fields and removed HTML tags. Refactor remaining modules to be compatible with JS Strict Mode. Fixed bug that prevented GTK from closing when user clicked CANCEL on WS creation. Fixed size of Workspace creation dialog. New cwe databases: English and Spanish. Added Hping plugin. Enhancements to Wpscan plugin.","title":"January 30, 2017:"},{"location":"RELEASE/#november-10-2016","text":"New library to connect with Faraday Server. Fixed Fplugin, now it uses the new library to communicate with the Server. New field for Vulnerabilities: plugin creator and status. Refactor in Faraday Core and GTK Client. Bug fixing in Faraday Client and Server. Added Faraday news notifications in GTK and Web UI. New plugins: Dirb, Netdiscover, FruityWifi, Sentinel. Improvements on the WPscan plugin. Fixed Licenses search. Refactor Licenses module to be compatible with JS Strict Mode.","title":"November 10, 2016:"},{"location":"RELEASE/#september-19-2016","text":"Major refactor of Faraday Client: now we support massive workspaces (100.000+ hosts). Fixed more than 10 minor bugs on the Web UI. Fixed searching with spaces character on Web UI Updated URL shown when starting Faraday. Dashboard is now refreshed automatically every 60 seconds. Fixed Propecia plugin. New plugin: WPscan Host Sidebar on GTK now adds information more intelligently and will never block the application. Evidence screenshots in report generation is now bigger. Help menu in GTK with links to interesting links. Added Help section to WEB UI.","title":"September 19, 2016:"},{"location":"RELEASE/#august-12-2016","text":"Added Faraday Server Improved performance in web UI Added some basic APIs to Faraday Server Added licenses management section in web UI Totally removed QT3, GTK is now the only GUI Deprecated FileSystem databses: now Faraday works exclusively with Faraday Server and CouchDB Added a button to go to the Faraday Web directly from GTK Fixed bug when deleting objects from Faraday Web Fixed bug where icons where not copied to correct folder on initialization Fixed bug where current workspace wouldn't correspond to selected workspace on the sidebar on GTK Fixed bug in 'Refresh Workspace' button on GTK Fixed bug where Host Sidebar and Statusbar information wasn't correctly updated on GTK Fixed bug in service editing Fixed sqlmap plugin Fixed metapsloit plugin","title":"August 12, 2016:"},{"location":"RELEASE/#jul-1-2016","text":"GTK is the default interface now. Added new plugin : Ndiff. Added new plugin : Netcat (Gnu netcat - OpenBSD netcat - Original netcat) Added button to edit your host in the GTK interface. Hosts sidebar now can be sorted by amout of vulnerabilities and OS. Changes in installation: install.sh now installs only GTK, QT is considered deprecated. Changes in installation: Faraday now runs with the last versions of Python modules. Changes in installation: fixed names of packages in setup_server.sh Usability: Enter key in GTK dialogs works as OK button Improved handling of lost connection to CouchDB database First steps towards deprecating Filesystem databases Fixed a bug when workspace was changed Fixed a bug with Import Reports Dialog in GTK GUI on OS X. Fixed a bug with Ctrl+Shift+C and Ctrl+Shift+V in some desktops managers. Fixed a bug with mapper of vulnerabilities.","title":"Jul 1, 2016:"},{"location":"RELEASE/#jun-13-2016","text":"Added Import Report dialog to Faraday GTK Added a 'Loading workspace...' dialog to Faraday GTK Added host sidebar to Faraday GTK Added host information dialog to Faraday GTK with the full data about a host, its interfaces, services and vulnerabilities Added support for run faraday from other directories. Fixed log reapparing after being disabled if user created a new tab Fixed bug regarding exception handling in Faraday GTK Now Faraday GTK supports Ctrl+Shift+C / Ctrl+Shift+V to Copy/Paste Faraday will now not crash if you suddenly lose connection to your CouchDB","title":"Jun 13, 2016:"},{"location":"RELEASE/#may-23-2016","text":"Removed description from Hosts list in WEB UI Fixed sort in Hosts list in WEB UI Fixed ports sorting in Host view in WEB UI Added search link for OS in Hosts list in WEB UI Removed description from Services list in WEB UI Added version to Services list in WEB UI Modified false values in Hosts list in WEB UI Added search links in Services list in WEB UI Added scrollbar in Gtk Terminal. Added workspace status in Gtk interface Added conflict resolution support for the Gtk interface Added search entry for workspaces in Gtk Added support for 'exit' command inside Faraday's Gtk terminal Improved handling of uncaught exceptions in Gtk interface Improved text formatting in Gtk's log console Fixed several small bugs in Faraday GTK Added support for resize workspace bar. Added a quote for imported reports in WEB UI. Added support for a new type of report in Qualysguard plugin. Fixed bugs in plugins: Acunetix - Nmap - Nikto.","title":"May 23, 2016:"},{"location":"RELEASE/#apr-29-2016","text":"Added Open services count to Hosts list in WEB UI Improved zsh integration Added GTK3 interface prototype Added plugin detection through report name Fixed an error in wcscan script Fixed nikto plugin Fixed openvas plugin","title":"Apr 29, 2016:"},{"location":"RELEASE/#apr-04-2016","text":"Added cli mode (see wiki for usage instructions) Support for multiple Faraday instances in the same host Fixed bug for editing web vulns in bulk Fixed bug for select all in web UI Fixed bugs in Qualys, ZAP, nikto, w3af, openVas plugins Added some new scripts and helpers","title":"Apr 04, 2016"},{"location":"RELEASE/#feb-26-2016","text":"Fixed bug in pip debian BugFix pip install. Checks additionals about dependencies in installation. Warning about a upgrade to experimental in debian installation. Fixed small bug in CSV importing Fixed styles for Status Report Fixed bug on Status Report filter after editing Added support for Kali Rolling Edition Notify user when the current Workspace doesn't exist Show all evidence files in Status Report Added script to remove all vulns with a specific severity value (parameterized) Fixed Arachni Plugin bugs Added new version for Maltego Plugin Added support for Mint 17","title":"Feb 26, 2016:"},{"location":"RELEASE/#dec-18-2015","text":"Immunity Canvas plugin added Added Dig plugin Added Traceroute plugin Fixed bug in first run of Faraday with log path and API errors Added parametrization for port configuration on APIs Refactor Plugin Base to update active WS name in var Refactor Plugins to use current WS in temp filename under $HOME/.faraday/data. Affected Plugins: amap dnsmap nmap sslcheck wcscan webfuzzer nikto Fixed bug get_installed_distributions from handler exceptions Added Wiki information about running Faraday without configuring CouchDB Fixed Unicode bug in Nexpose-full Plugin Filter false-positives in Status Report Fixed bug that prevented the use of \"reports\" and \"cwe\" strings in Workspace names Added port to Service type target in new vuln modal Added new scripts for faraday plugin: /bin/delAllVulnsWith.py - delete all vulns that match a regex /bin/getAllbySrv.py - get all IP addresses that have defined open port /bin/getAllIpsNotServices.py added - get all IPs from targets without services Fixed bug null last workspace Fixed bugs in CSV export/import in QT","title":"Dec 18, 2015:"},{"location":"RELEASE/#oct-2-2015","text":"Continuous Scanning Tool cscan added to ./scripts/cscan Fix for saving objects without parent Hosts and Services views now have pagination and search Updates version number on Faraday Start Visual fixes on Firefox Migrate graphs from D3.js to Chart.js Added Services columns to Status Report Added sections of Commercial versions Converted references to links in Status Report. Support for CVE, CWE, Exploit Database and Open Source Vulnerability Database Added Peepingtom, SSHdefaultscan and pasteAnalyzer plugins Fixed Debian install","title":"Oct 2, 2015:"},{"location":"RELEASE/#sep-10-2015","text":"Adding filename path information of report imported in history command Remove old couchdb upgrade process Adding Iceweasel browser > 38.2.0 support Adding more navigability in differents GUI Web (Dashboard/Services/Views) Fixed bug copy clipboard offline (update path of ngClip dependeces) Added class to set colors to severities in new/edit vuln view Medusa, Hydra & Metasploit plug-in now added discovered weak credentials as a vulnerability Nmap plug-in applyies a severity depending on the result of a NSE script Fixed small bug for empty ease of resolution Adding more time to generation shells QT Added \"Search in Shodan\" links in different views (Status Report, Host View, Service View) Removed required of name field service bulk edition Added ng-disabled on Edit button if select more of 1 host on Host View WEB UI Refactored GUI Web: Icon added for Modal Error OS, Creator, Date for modal-services-by-host.html Fixed typo in Host Edit, the popup message was wrong First version for in estilos.css for clear mode Also, added hover to grey boxes in the Dashboard. Added vulns count for Hosts in WEB UI Updated w3af plugin to support report version 1.7.6 Ignored cwe database from updater and QT views Plugin for Nexpose XML Export 2.0 Added masscan plugin (1.0.3)","title":"Sep 10, 2015:"},{"location":"RELEASE/#aug-19-2015","text":"Exported CSV contains filters and columns from Status Report in WEB UI Vulnerability counter on Status Report in WEB UI Added quick vuln edit and delete in WEB UI Expanded Unit Tests for WEB UI XML Cleaner Kali 2.0 support Improve plugins running status log (Adding log information on report importing) Clean dev log on plugins w3af plugin refactoring Fix Debian \u215e.1 install support","title":"Aug 19, 2015:"},{"location":"RELEASE/#aug-05-2015","text":"Added CWE database and integration with vulns creation Added ENTER shortcut on modals Progress bar for workspace in the dashboard Bug fixing in workspaces and status report components Unit testing for vulns, status report and workspaces components Debian 8.1 support","title":"Aug 05, 2015:"},{"location":"RELEASE/#jun-30-2015","text":"Added hosts CRUD Added services CRUD Fix ubuntu 15.04 installation bug Small bug in burp plugin \"Import new vulnerabilities\" checkbox issue Added an interactive visualization to calculate the value of a Workspace Fixed several bugs in WEB UI Added a URL filter functionality to the status report, allowing searches by fields","title":"Jun 30, 2015:"},{"location":"RELEASE/#apr-17-2015","text":"You can get the new version here: https://github.com/infobyte/faraday/archive/v1.0.10.tar.gz Changes: Styles changes in WEB UI: fancy component selection, improved workspaces selection. Bugfixes: * Date on Workspace creation * Tables in Firefox","title":"Apr 17, 2015:"},{"location":"RELEASE/#apr-7-2015","text":"You can get the new version here: * https://github.com/infobyte/faraday/archive/v1.0.9.tar.gz Changes: Performance improvement in the dashboard Fix bug OSX install Bug fixes","title":"Apr 7, 2015:"},{"location":"RELEASE/#mar-9-2015","text":"You can get the new version here: https://github.com/infobyte/faraday/archive/v1.0.8.tar.gz Changes: WcScan script and plugin (scripts/wcscan.py) New Dashboard D3 with AngularJS Easy access to Vulnerability pages in the Status Report Easy access to the Host pages on the dashboard Creation and Editing capabilities for the Workspace from the UI Web Support installation for the latest version of Debian/Ubuntu/Kali sqlmap version 1.0-dev support updated API Status Check in both ZSH & QT GUI Field added for resolution of vulnerabilities classification with plug-ins updated to support the new function. Field added for rating \"ease of resolution\" for vulnerabilities Adjustments for Resolution field New Faraday plugin for Burp. Version 1.2 -Corrections for the vulnerabilities duplication for the burp plugin -New tab section to configure the new Vulnerabilities downloads for Faraday Automated backup for couch database Ability to upload evidence of a vulnerability (as an attachment) Ability to assign Vulnerability Impact (confidentiality, integrity, availability).","title":"Mar 9, 2015:"},{"location":"RELEASE/#dec-12-2014","text":"You can get the new version here: https://github.com/infobyte/faraday/archive/v1.0.7.tar.gz Changes: Improved Vulnerability Edition usability, selecting a vuln will load it's content. ZSH UI now is showing notifications. ZSH UI now is showing active workspace. Faraday now asks confirmation on exit, If you have pending conflicts to solve it will show the number of each. Vulnerability creation is now suported in the status report. Introducing SSLCheck, a tool for verify bugs in SSL/TLS Certificates on remote hosts. This is integrated with Faraday with a plugin. Shodan Plugin is now working with the new API. Some cosmetic changes in the status report. Bugfixes: Sorting collumns in the Status Report now is working. Workspace icon is based on the type of the workspace. Opening the reports in QT UI now opens the active workspace. UI Web dates fixes, we were showing dates with a off-by-one error. Vulnerability edition was missing 'critical' severity. Objects merge bugfixing Metadata recursive save fix","title":"Dec 12, 2014:"},{"location":"RELEASE/#nov-7-2014","text":"You can get the new version here: https://github.com/infobyte/faraday/archive/v1.0.6.tar.gz Changes: Status report modifications: Web vulnerability edition support. Variable columns in status report. New field called \"Data\" with extra information about a vulnerability. Bug fixes","title":"Nov 7, 2014:"},{"location":"RELEASE/#oct-17-2014","text":"infobyte/faraday@a81c637 Status report now have edition capabilities Introducing batch vulnerability edition and deletion. Now you can edit your status report. Lots of bug fixes Ubuntu 14.04 support fixes Mac support fixes","title":"Oct 17, 2014:"},{"location":"RELEASE/#sep-26-2014","text":"infobyte/faraday@440858e New Dashboard design with summarized information. D3.js Fancy visualizations. Vulnerability Status report. Command run user/host identification. Vulnerability Statistics. Optimization Refactor.","title":"Sep 26, 2014:"},{"location":"RELEASE/#jun-06-2014","text":"infobyte/faraday@e616bdb Notifications: Updating objets on faraday now results in a beautiful notification in the QT ui. Performance: Enhacing performance when lots of workspaces are available. We now load each workspace whe it's needed instead of loading ahead the full workspace list. UI: Workspace split, now you can select the workspace to visualize. We are now using bootstrap. API: New operations on the Rest API (this is just for the following UI modifications). Vulnerability update and delete operations.","title":"Jun 06, 2014:"},{"location":"RELEASE/#may-14-2014","text":"infobyte/faraday@9dfa9ad Improving (web interface, vulnerability classification)","title":"May 14, 2014:"},{"location":"RELEASE/#apr-30-2014","text":"infobyte/faraday@931865f MacOS Support","title":"Apr 30, 2014:"},{"location":"RELEASE/#apr-04-2014","text":"infobyte/faraday@0fe6978 We are proud to present two new features that will enhace the Faraday experience. Taking feedback from our users we took account that each of them had particular needs from their consoles (completion, size, fonts, so on so forth) and their need to be able to know what commands where run during an engagement. 1 2 * A brand new ZSH based Terminal UI * The Command Run execution history","title":"Apr 04, 2014:"},{"location":"Remote-PostgreSQL/","text":"Remote PostgreSQL configuration \u00b6 Faraday uses a connection string stored in /home/faraday/.faraday/config/server.ini to connect to the database. You can use faraday-manage initdb to configure a localhost database (same server as Faraday Server runs). If you opt to use a remote database you will need to create a database role, database and create the schema. Step 0: Install PostgreSQL \u00b6 sudo apt install postgresql-12 or sudo yum install postgresql-12 Step 1: Configure PostgreSQL for remote connection \u00b6 Warning Make sure you understand this step. Using the wrong settings could leave your database server insecure First, open the hba_config file, to locate the file execute: sudo -u postgres psql -c \"show hba_file\" Add a line for the faraday-server host all all 192.168.1.2/24 md5 Then, open /etc/postgresql/9.X/main/postgresql.conf Allow to listen on the interface or use * for all interfaces: listen_addresses = '*' Step 2: Create PostgreSQL role \u00b6 Login into the database server and execute: createuser faraday_postgresql -P Now, create the database: createdb faraday Step 3: Configure Faraday Server \u00b6 Now on the Faraday Server instance, open the file /home/faraday/.faraday/config/server.ini and append the database configuration: [database] connection_string = postgresql+psycopg2://faraday_postgresql:SECRET_PASSWORD@REMOTE_IP/faraday Step 4: Create tables \u00b6 Now you are ready to create the tables: faraday-manage create-tables","title":"Remote PostgreSQL"},{"location":"Remote-PostgreSQL/#remote-postgresql-configuration","text":"Faraday uses a connection string stored in /home/faraday/.faraday/config/server.ini to connect to the database. You can use faraday-manage initdb to configure a localhost database (same server as Faraday Server runs). If you opt to use a remote database you will need to create a database role, database and create the schema.","title":"Remote PostgreSQL configuration"},{"location":"Remote-PostgreSQL/#step-0-install-postgresql","text":"sudo apt install postgresql-12 or sudo yum install postgresql-12","title":"Step 0: Install PostgreSQL"},{"location":"Remote-PostgreSQL/#step-1-configure-postgresql-for-remote-connection","text":"Warning Make sure you understand this step. Using the wrong settings could leave your database server insecure First, open the hba_config file, to locate the file execute: sudo -u postgres psql -c \"show hba_file\" Add a line for the faraday-server host all all 192.168.1.2/24 md5 Then, open /etc/postgresql/9.X/main/postgresql.conf Allow to listen on the interface or use * for all interfaces: listen_addresses = '*'","title":"Step 1: Configure PostgreSQL for remote connection"},{"location":"Remote-PostgreSQL/#step-2-create-postgresql-role","text":"Login into the database server and execute: createuser faraday_postgresql -P Now, create the database: createdb faraday","title":"Step 2: Create PostgreSQL role"},{"location":"Remote-PostgreSQL/#step-3-configure-faraday-server","text":"Now on the Faraday Server instance, open the file /home/faraday/.faraday/config/server.ini and append the database configuration: [database] connection_string = postgresql+psycopg2://faraday_postgresql:SECRET_PASSWORD@REMOTE_IP/faraday","title":"Step 3: Configure Faraday Server"},{"location":"Remote-PostgreSQL/#step-4-create-tables","text":"Now you are ready to create the tables: faraday-manage create-tables","title":"Step 4: Create tables"},{"location":"Report-v4/","text":"Executive Report \u00b6 The Executive Report feature lets you create (as the name implies) reports using the results obtained in each workspace. When an Executive Report is created, all the data from the Status Report is automatically processed and placed in a Word compatible document or PDF that can then be downloaded from Faraday Managing Executive Reports \u00b6 To manage your reports you need to access Faraday's Web UI and go to the report icon on the left panel and hit on Create New Report . All the reports will be listed, including their information, status and link to download. Making a report \u00b6 To create a new report, click on New . A form will open asking for the following fields: Title - this is the name that will be used to create the cover of the report. Client Name - Client name to be used inside the report. Template - select the template to use as a base for your report. Depending on the selected dataset the options will change. To edit a report, select it and click on the Edit button. A modal will appear allowing you to modify all the report fields. Save it and a brand new report will be generated, keeping the original version intact. If, instead, you want a new report that is exactly like an existing one but with the current data of your workspace, you can click on the Regenerate button in the reports list. Reports can only be regenerated one at a time, so the regeneration buttons are disabled while this action is being performed. Executive and Technical details tabs \u00b6 The following are a sort of placeholder fields for information that's commonly added to most reports. They are text fields and can be used for any relevant information, not just for what they're named after: Summary Conclusions Recommendations Scope Objectives Faraday processes all the information and spits out a shiny new report that is automatically available for download. Filtering \u00b6 If you need a custom report that includes only some findings in the workspace, you can also use the filters to bring those specific vulnerabilities. These filters can be mixed to create different outcomes. Deleting a Report \u00b6 From the Executive Report window, select the document and click on Delete . Templates \u00b6 We use Jinja2 to create Report Templates. Check this Article to get more information! Datasets \u00b6 Faraday provides two different datasets to create Executive Reports - generic and grouped . Generic The generic dataset provides one entry for each individual vulnerability with all of its fields readily available as a dictionary. The field parent contains an ID corresponding to the Vulnerability's parent (either a Host or a Service). Grouped The grouped dataset groups vulnerabilities by name and description. If two or more vulnerabilities share the same name and description, they will be presented as one. The field parent contains a Python Dictionary-style object with the parent IDs as keys and a Python Dictionary-style object containing evidence_subdoc, data and target as values. Tags and references will be merged for vulnerabilities that are grouped and not separated by parent. Info Keep in mind that each template should be designed for a specific dataset and that these are not interchangeable. The default templates that come with your instance are located at /home/faraday/.faraday/executive_reports_templates/","title":"What is Report"},{"location":"Report-v4/#executive-report","text":"The Executive Report feature lets you create (as the name implies) reports using the results obtained in each workspace. When an Executive Report is created, all the data from the Status Report is automatically processed and placed in a Word compatible document or PDF that can then be downloaded from Faraday","title":"Executive Report"},{"location":"Report-v4/#managing-executive-reports","text":"To manage your reports you need to access Faraday's Web UI and go to the report icon on the left panel and hit on Create New Report . All the reports will be listed, including their information, status and link to download.","title":"Managing Executive Reports"},{"location":"Report-v4/#making-a-report","text":"To create a new report, click on New . A form will open asking for the following fields: Title - this is the name that will be used to create the cover of the report. Client Name - Client name to be used inside the report. Template - select the template to use as a base for your report. Depending on the selected dataset the options will change. To edit a report, select it and click on the Edit button. A modal will appear allowing you to modify all the report fields. Save it and a brand new report will be generated, keeping the original version intact. If, instead, you want a new report that is exactly like an existing one but with the current data of your workspace, you can click on the Regenerate button in the reports list. Reports can only be regenerated one at a time, so the regeneration buttons are disabled while this action is being performed.","title":"Making a report"},{"location":"Report-v4/#executive-and-technical-details-tabs","text":"The following are a sort of placeholder fields for information that's commonly added to most reports. They are text fields and can be used for any relevant information, not just for what they're named after: Summary Conclusions Recommendations Scope Objectives Faraday processes all the information and spits out a shiny new report that is automatically available for download.","title":"Executive and Technical details tabs"},{"location":"Report-v4/#filtering","text":"If you need a custom report that includes only some findings in the workspace, you can also use the filters to bring those specific vulnerabilities. These filters can be mixed to create different outcomes.","title":"Filtering"},{"location":"Report-v4/#deleting-a-report","text":"From the Executive Report window, select the document and click on Delete .","title":"Deleting a Report"},{"location":"Report-v4/#templates","text":"We use Jinja2 to create Report Templates. Check this Article to get more information!","title":"Templates"},{"location":"Report-v4/#datasets","text":"Faraday provides two different datasets to create Executive Reports - generic and grouped . Generic The generic dataset provides one entry for each individual vulnerability with all of its fields readily available as a dictionary. The field parent contains an ID corresponding to the Vulnerability's parent (either a Host or a Service). Grouped The grouped dataset groups vulnerabilities by name and description. If two or more vulnerabilities share the same name and description, they will be presented as one. The field parent contains a Python Dictionary-style object with the parent IDs as keys and a Python Dictionary-style object containing evidence_subdoc, data and target as values. Tags and references will be merged for vulnerabilities that are grouped and not separated by parent. Info Keep in mind that each template should be designed for a specific dataset and that these are not interchangeable. The default templates that come with your instance are located at /home/faraday/.faraday/executive_reports_templates/","title":"Datasets"},{"location":"SAML-Auth0/","text":"SAML with Auth0 \u00b6 Here are the steps to integrate SAML to Faraday using Auth0: Step 1 : Navigate to Auth0 website . Step 2 : Sing in with your admin account. Step 3 : Navigate to Applications \u2192 Applications in the left Menu . Step 4 : Click Create Application button. Step 5 : On the Create application page: * Enter the name of the custom app. * (Optional) Choose an application type . Then click Create . Step 6 : In your new app page, go to the Addons tab and turn on the SAML2 WEB APP plugin. The addon configuration page will pop up. Step 7 : On the Usage tab, you should copy the Issuer ( Identity ID in Faraday settings) and the Identity Provider Login URL ( SSO URL in Faraday settings). Also download the Identity Provider Certificate ( IdP Certificate in Faraday settings). Paste them on Faraday's SAML configuration . Step 8 : Click on Settings tab. Here you should enter an Application Callback URL with following format: * Application Callback URL : https:// /_api/saml/acs Then click Save Step 9 : Back in your new app page, go to the Settings tab and scroll down to the Application URIs section. There you should enter the Application Login URI , the Allowed Logout URLs , the Allowed Web Origins and the Allowed Origins (CORS) with the following format: * Application Login URI : https:// /_api/saml/login * Allowed Logout URLs : https:// /_api/saml/logout * Allowed Web Origins : https:// / * Allowed Origins (CORS) : https:// / Then scroll all the way down and click Save Changes . Step 10 : Run this command at a Terminal : openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 1825 -out certificate.pem This command will return a key that goes into SP Private Key field and a certificate that goes into SP Certificate field on Faraday's SAML configuration . For more information about configuring a custom SAML app in Auth0, please visit their documentation page about this topic.","title":"Auth0 integration"},{"location":"SAML-Auth0/#saml-with-auth0","text":"Here are the steps to integrate SAML to Faraday using Auth0: Step 1 : Navigate to Auth0 website . Step 2 : Sing in with your admin account. Step 3 : Navigate to Applications \u2192 Applications in the left Menu . Step 4 : Click Create Application button. Step 5 : On the Create application page: * Enter the name of the custom app. * (Optional) Choose an application type . Then click Create . Step 6 : In your new app page, go to the Addons tab and turn on the SAML2 WEB APP plugin. The addon configuration page will pop up. Step 7 : On the Usage tab, you should copy the Issuer ( Identity ID in Faraday settings) and the Identity Provider Login URL ( SSO URL in Faraday settings). Also download the Identity Provider Certificate ( IdP Certificate in Faraday settings). Paste them on Faraday's SAML configuration . Step 8 : Click on Settings tab. Here you should enter an Application Callback URL with following format: * Application Callback URL : https:// /_api/saml/acs Then click Save Step 9 : Back in your new app page, go to the Settings tab and scroll down to the Application URIs section. There you should enter the Application Login URI , the Allowed Logout URLs , the Allowed Web Origins and the Allowed Origins (CORS) with the following format: * Application Login URI : https:// /_api/saml/login * Allowed Logout URLs : https:// /_api/saml/logout * Allowed Web Origins : https:// / * Allowed Origins (CORS) : https:// / Then scroll all the way down and click Save Changes . Step 10 : Run this command at a Terminal : openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 1825 -out certificate.pem This command will return a key that goes into SP Private Key field and a certificate that goes into SP Certificate field on Faraday's SAML configuration . For more information about configuring a custom SAML app in Auth0, please visit their documentation page about this topic.","title":"SAML with Auth0"},{"location":"SAML-Google/","text":"SAML with Google \u00b6 Here are the steps to integrate SAML to Faraday using Google: Step 1 : Navigate to Google admin website . Step 2 : Sign in using an account with super administrator privileges . Step 3 : In the Admin console go to Menu \u2192 Apps \u2192 Web and mobile apps . Step 4 : Click Add app \u2192 Add custom SAML app . Step 5 : On the App Details page: * Enter the name of the custom app. * (Optional) Upload an app icon . Then click Continue . Step 6 : From the Google Identity Provider details page copy the SSO URL , the Entity ID ( Identity ID on Faraday's SAML configuration) and the IDP Certificate . Paste them on Faraday's SAML configuration . Click on Continue . Step 7 : Run this command at a Terminal : openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 1825 -out certificate.pem This command will return a key that goes into SP Private Key field and a certificate that goes into SP Certificate field on Faraday's SAML configuration . Step 8 : In the Service Provider Details , enter an ASC URL , Entity ID and Start URL with following format: * ASC URL : https:// /_api/saml/acs * Entity ID : https:// /_api/saml/metadata.xml * Start URL : https:// /_api/saml/login Finally, check the Signed response checkbox. Then configure your Name ID and click Continue . Step 9 : In Attributes mapping page you should select Primary email and define the App attribute as username . Then click Finish . Step 10 : In the Admin console go to Menu \u2192 Apps \u2192 Web and mobile apps . Select your SAML app and click User access . Step 11 : To turn on the service for everyone in your organization, click On for everyone , and then click Save . For more information about configuring a custom SAML app in Google, please visit their support page about this topic.","title":"Google integration"},{"location":"SAML-Google/#saml-with-google","text":"Here are the steps to integrate SAML to Faraday using Google: Step 1 : Navigate to Google admin website . Step 2 : Sign in using an account with super administrator privileges . Step 3 : In the Admin console go to Menu \u2192 Apps \u2192 Web and mobile apps . Step 4 : Click Add app \u2192 Add custom SAML app . Step 5 : On the App Details page: * Enter the name of the custom app. * (Optional) Upload an app icon . Then click Continue . Step 6 : From the Google Identity Provider details page copy the SSO URL , the Entity ID ( Identity ID on Faraday's SAML configuration) and the IDP Certificate . Paste them on Faraday's SAML configuration . Click on Continue . Step 7 : Run this command at a Terminal : openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 1825 -out certificate.pem This command will return a key that goes into SP Private Key field and a certificate that goes into SP Certificate field on Faraday's SAML configuration . Step 8 : In the Service Provider Details , enter an ASC URL , Entity ID and Start URL with following format: * ASC URL : https:// /_api/saml/acs * Entity ID : https:// /_api/saml/metadata.xml * Start URL : https:// /_api/saml/login Finally, check the Signed response checkbox. Then configure your Name ID and click Continue . Step 9 : In Attributes mapping page you should select Primary email and define the App attribute as username . Then click Finish . Step 10 : In the Admin console go to Menu \u2192 Apps \u2192 Web and mobile apps . Select your SAML app and click User access . Step 11 : To turn on the service for everyone in your organization, click On for everyone , and then click Save . For more information about configuring a custom SAML app in Google, please visit their support page about this topic.","title":"SAML with Google"},{"location":"SAML-Okta/","text":"SAML with OKTA \u00b6 Here are the steps to integrate SAML to Faraday using OKTA: Step 1 : Navigate to OKTA's website . Step 2 : Log in into your developer account as a user with administrative privileges. Step 3 : In the Admin console go to Applications \u2192 Applications . Step 4 : Click Create App Integration . Step 5 : Select SAML 2.0 in the Sign-in method section. Click Next . Step 6 : On the General Settings page: * Enter the name of your integration (e.g. Faraday). * (Optional) Upload a logo . Then click Next . Step 7 : On the Configure SAML tab, enter the Assertion Consumer Service (ACS) URL into the Single Sign On URL field and the Entity ID into the Audience Restriction field with the following format: * Single Sign On URL : https:// /_api/saml/acs * Audience Restriction : https:// /_api/saml/metadata.xml After that, in the Attribute Statements section, define the Name of the attribute as username and the Value as user.email . Then click Next . Step 8 : In the final creation step, you should select the options that suits your company and click Finish . Step 9 : On the General tab, in the Application area, you can access to the Identity Provider Configuration. There you should copy the Identity Provider Single Sign-On URL ( SSO URL in Faraday settings), the Identity Provider Issuer ( Identity ID in Faraday settings) and the X.509 Certificate ( IdP Certificate in Faraday settings). Paste them on Faraday's SAML configuration . Click on Save . Step 10 : Run this command at a Terminal : openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 1825 -out certificate.pem This command will return a key that goes into SP Private Key field and a certificate that goes into SP Certificate field on Faraday's SAML configuration . For more information about configuring a custom SAML app in Okta, please visit their documentation page about this topic.","title":"Okta integration"},{"location":"SAML-Okta/#saml-with-okta","text":"Here are the steps to integrate SAML to Faraday using OKTA: Step 1 : Navigate to OKTA's website . Step 2 : Log in into your developer account as a user with administrative privileges. Step 3 : In the Admin console go to Applications \u2192 Applications . Step 4 : Click Create App Integration . Step 5 : Select SAML 2.0 in the Sign-in method section. Click Next . Step 6 : On the General Settings page: * Enter the name of your integration (e.g. Faraday). * (Optional) Upload a logo . Then click Next . Step 7 : On the Configure SAML tab, enter the Assertion Consumer Service (ACS) URL into the Single Sign On URL field and the Entity ID into the Audience Restriction field with the following format: * Single Sign On URL : https:// /_api/saml/acs * Audience Restriction : https:// /_api/saml/metadata.xml After that, in the Attribute Statements section, define the Name of the attribute as username and the Value as user.email . Then click Next . Step 8 : In the final creation step, you should select the options that suits your company and click Finish . Step 9 : On the General tab, in the Application area, you can access to the Identity Provider Configuration. There you should copy the Identity Provider Single Sign-On URL ( SSO URL in Faraday settings), the Identity Provider Issuer ( Identity ID in Faraday settings) and the X.509 Certificate ( IdP Certificate in Faraday settings). Paste them on Faraday's SAML configuration . Click on Save . Step 10 : Run this command at a Terminal : openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 1825 -out certificate.pem This command will return a key that goes into SP Private Key field and a certificate that goes into SP Certificate field on Faraday's SAML configuration . For more information about configuring a custom SAML app in Okta, please visit their documentation page about this topic.","title":"SAML with OKTA"},{"location":"SAML/","text":"SAML \u00b6 You can configure SAML single sing-on and keep using local users. But you can't use both LDAP and SAML users at the same time. Configuration by command line \u00b6 In order to configure SAML , run the following command: faraday-manage settings -a update saml Then update every field according to the configuration on-prem. $ faraday-manage settings -a update saml Update settings for: saml enabled [False]: display_name [Identity Provider]: user_role [admin]: admin_group []: attribute_identifier []: sso_url [http://localhost/saml/login]: sp_certificate []: sp_private_key []: idp_certificate []: Do you confirm your changes on saml? [Y/n]: Remember to restart the server after doing changes! systemctl restart faraday-server Configuration by UI Preferences \u00b6 You can access to SAML configuration on the Authentication section in the menu of your Preferences . Services available to integrate SAML to Faraday \u00b6 Here is a list of services with a link to its articles: Integrate SAML with Google Integrate SAML with Auth0 Integrate SAML with Okta","title":"Faraday configuration"},{"location":"SAML/#saml","text":"You can configure SAML single sing-on and keep using local users. But you can't use both LDAP and SAML users at the same time.","title":"SAML"},{"location":"SAML/#configuration-by-command-line","text":"In order to configure SAML , run the following command: faraday-manage settings -a update saml Then update every field according to the configuration on-prem. $ faraday-manage settings -a update saml Update settings for: saml enabled [False]: display_name [Identity Provider]: user_role [admin]: admin_group []: attribute_identifier []: sso_url [http://localhost/saml/login]: sp_certificate []: sp_private_key []: idp_certificate []: Do you confirm your changes on saml? [Y/n]: Remember to restart the server after doing changes! systemctl restart faraday-server","title":"Configuration by command line"},{"location":"SAML/#configuration-by-ui-preferences","text":"You can access to SAML configuration on the Authentication section in the menu of your Preferences .","title":"Configuration by UI Preferences"},{"location":"SAML/#services-available-to-integrate-saml-to-faraday","text":"Here is a list of services with a link to its articles: Integrate SAML with Google Integrate SAML with Auth0 Integrate SAML with Okta","title":"Services available to integrate SAML to Faraday"},{"location":"Scheduling/","text":"Scheduling \u00b6 In order to arrange or plan an event to take place at a particular time we've created Scheduler, it will allow to use the POSIX local format, the execution will be made by an agent . To configure a schedule click on Automation button on the left navigation and then click on scheduler, to do a new schedule click on Create Schedule. Provide a description, interval pattern, select a Tool to run, destination Workspace and click on the Accept button. The POSIX cron format is the below: Field Possible Values Syntax Description a - Minute 0-59 7 * * The cron job is initiated every time the system clock shows 7 in the minute\u2019s position. b - Hour 0-23 0 7 * * * The cron job runs any time the system clock shows 7am (7pm would be coded as 19). c - Day 0-31 0 0 7 * * The day of the month is 7 which means that the job runs every 7 th day of the month. d - Month 0 = none and 12 = December 0 0 0 7 * The numerical month is 7 which determines that the job runs only in July. In addition to running the agents manually with their \"Run\" button, you can also schedule them to run periodically. This can be done from the web if you have our Corporate/Pro version : or with simple cronjobs using faraday-cli if you are using the Community version create an script.sh with this contents: #!/bin/bash echo '{\"target\": \"www.google.com\"}' | faraday-cli agent run -a 1 -e nmap --stdin Edit your crontab using the bellow command crontab -e 1 0 * * 0 /pathtoyourscript/script.sh > /dev/null 2>&1","title":"Scheduler"},{"location":"Scheduling/#scheduling","text":"In order to arrange or plan an event to take place at a particular time we've created Scheduler, it will allow to use the POSIX local format, the execution will be made by an agent . To configure a schedule click on Automation button on the left navigation and then click on scheduler, to do a new schedule click on Create Schedule. Provide a description, interval pattern, select a Tool to run, destination Workspace and click on the Accept button. The POSIX cron format is the below: Field Possible Values Syntax Description a - Minute 0-59 7 * * The cron job is initiated every time the system clock shows 7 in the minute\u2019s position. b - Hour 0-23 0 7 * * * The cron job runs any time the system clock shows 7am (7pm would be coded as 19). c - Day 0-31 0 0 7 * * The day of the month is 7 which means that the job runs every 7 th day of the month. d - Month 0 = none and 12 = December 0 0 0 7 * The numerical month is 7 which determines that the job runs only in July. In addition to running the agents manually with their \"Run\" button, you can also schedule them to run periodically. This can be done from the web if you have our Corporate/Pro version : or with simple cronjobs using faraday-cli if you are using the Community version create an script.sh with this contents: #!/bin/bash echo '{\"target\": \"www.google.com\"}' | faraday-cli agent run -a 1 -e nmap --stdin Edit your crontab using the bellow command crontab -e 1 0 * * 0 /pathtoyourscript/script.sh > /dev/null 2>&1","title":"Scheduling"},{"location":"Scripts/","text":"Scripts \u00b6 The scripts located at $FARADAY/scripts/ are tools shipped with Faraday and refined to work seamlessly with it. Nevertheless, at their core, they are standalone tools totally capable of performing their function on their own. Faraday ships with two of these scripts: Shodan Faraday SSL Check Shodan - Faraday \u00b6 A command line tool to get information from Shodan located at $FARADAY/scripts/shodan_faraday.py . usage: shodan_faraday [-h] -q SHODAN_QUERY [-c COUNT] [-a SKEY] [--faradayapi FARADAYAPI] [--debug DEBUG] [--version] The following command will incorporate all the servers with Apache in Faraday ./shodan_faraday -q apache -a (SHODANKEY) We provide a couple of wordlists to find specific queries using Shodan. ls -lha $faraday/scripts/shodan_strings/ scada.txt webcam.txt You can see an sample usage of these queries in this video SSL Check \u00b6 Located at $FARADAY/scripts/sslcheck.py , SSL Check is a tool to verify SSL/TLS errors in remote hosts. With code from OpenSSL, this scripts lets a user check the SSL/TLS remote server. The potential vulnerabilities appear in red on the analysis report, which can be easily exported to XML. As noted above, the preferred way of using these scripts is with Faraday, although it is not necessary. To run the script from Faraday, just open the program, cd to the scripts folders and run ./sslcheck.py TARGET1 TARGE2 TARGET3 ... For example: ./sslcheck.py 192.168.10.254 google.com 192.168.5.210 facebook.com","title":"Scripts"},{"location":"Scripts/#scripts","text":"The scripts located at $FARADAY/scripts/ are tools shipped with Faraday and refined to work seamlessly with it. Nevertheless, at their core, they are standalone tools totally capable of performing their function on their own. Faraday ships with two of these scripts: Shodan Faraday SSL Check","title":"Scripts"},{"location":"Scripts/#shodan-faraday","text":"A command line tool to get information from Shodan located at $FARADAY/scripts/shodan_faraday.py . usage: shodan_faraday [-h] -q SHODAN_QUERY [-c COUNT] [-a SKEY] [--faradayapi FARADAYAPI] [--debug DEBUG] [--version] The following command will incorporate all the servers with Apache in Faraday ./shodan_faraday -q apache -a (SHODANKEY) We provide a couple of wordlists to find specific queries using Shodan. ls -lha $faraday/scripts/shodan_strings/ scada.txt webcam.txt You can see an sample usage of these queries in this video","title":"Shodan - Faraday"},{"location":"Scripts/#ssl-check","text":"Located at $FARADAY/scripts/sslcheck.py , SSL Check is a tool to verify SSL/TLS errors in remote hosts. With code from OpenSSL, this scripts lets a user check the SSL/TLS remote server. The potential vulnerabilities appear in red on the analysis report, which can be easily exported to XML. As noted above, the preferred way of using these scripts is with Faraday, although it is not necessary. To run the script from Faraday, just open the program, cd to the scripts folders and run ./sslcheck.py TARGET1 TARGE2 TARGET3 ... For example: ./sslcheck.py 192.168.10.254 google.com 192.168.5.210 facebook.com","title":"SSL Check"},{"location":"Settings-v4/","text":"In order to make Faraday's usage smoother, we have created the Settings section. Here, you can create new Custom Fields, change the account settings, customize the output of the reports and edit Ticketing tools configuration. To go into Settings, click on User's menu and then click on Settings: As you can see, for now we have two sections: Custom Fields and Preferences. Custom Fields \u00b6 You can create/edit/delete a Custom Field from Settings. Let's create one as an example: You must fill the following fields in order to create a Custom Field: Name: the name of the field (must be unique). Type: data type of the field, it can be: Integer, List, String, Markdown, Choice. Inside the Custom Fields menu you can view the list of all custom fields Preferences \u00b6 Within the Preferences menu you will be able to modify the configuration of different tabs, such as Account , Report and Ticketing Tools Account \u00b6 Inside account menu you would be able to modify your password, enable Two Factor Authentification and log in into the last used Workspace Report \u00b6 On the Report menu you can customize the output of your reports Ticketing Tools \u00b6 Inside this menu you would be able to choose your preferred Ticketing Tool , this will provide you an extended follow up capabilities Each Ticketing Tools has different configurations. Jira Gitlab ServiceNow SolarWinds","title":"Settings"},{"location":"Settings-v4/#custom-fields","text":"You can create/edit/delete a Custom Field from Settings. Let's create one as an example: You must fill the following fields in order to create a Custom Field: Name: the name of the field (must be unique). Type: data type of the field, it can be: Integer, List, String, Markdown, Choice. Inside the Custom Fields menu you can view the list of all custom fields","title":"Custom Fields"},{"location":"Settings-v4/#preferences","text":"Within the Preferences menu you will be able to modify the configuration of different tabs, such as Account , Report and Ticketing Tools","title":"Preferences"},{"location":"Settings-v4/#account","text":"Inside account menu you would be able to modify your password, enable Two Factor Authentification and log in into the last used Workspace","title":"Account"},{"location":"Settings-v4/#report","text":"On the Report menu you can customize the output of your reports","title":"Report"},{"location":"Settings-v4/#ticketing-tools","text":"Inside this menu you would be able to choose your preferred Ticketing Tool , this will provide you an extended follow up capabilities Each Ticketing Tools has different configurations. Jira Gitlab ServiceNow SolarWinds","title":"Ticketing Tools"},{"location":"Tasks/","text":"You can create your own custom Methodologies, add Tasks, tag them and keep track of your whole project directly from Faraday. Faraday comes with Methodologies loaded by default that allow you to get to work quickly without having to create your own. A few of our default Methodologies: PCI DSS 11.2 Hardware Top 10 Mobile Security Network Pentest Owasp Top 10 Loading a default Methodology All default Methodology files are available at the bottom of this page. Download them, then use the \"New\" button and select the option \"From template\", give this new methodology a name and that's it! You can download the methodologies at the bottom of this article. Creating you own Methodology \u00b6 Create a .csv file with the following fields: name description Then, use the \"Import\" button and select your new .csv to load your custom Methodology to Faraday. Downloading your preferred Methodology \u00b6 Do you have a custom Methodology created from scratch? Click in \"Download CSV for current Methodology\" and you will download a .csv file with the information for it! Kanban View \u00b6 If you click on the Methodology name, you'll access the Kanban view for it. You can use drag and drop to change the status of the different Tasks, or you can create a new one. You can also edit or delete a task. Task \u00b6 Methodologies contain Tasks, which include the following fields: Name Description Due date Status Users assigned Tags With that, you can assign a specific Task with a due date to a pentester. Also, tag a chunk of Tasks for a better appreciation in the Kanban view. Download links \u00b6 Methodology Hardware Top 10 Methodology Mobile Security Methodology Network Pentest Methodology OWASP Top 10 Methodology PCI DSS 6.5 Methodology PCI DSS 11.2","title":"Tasks"},{"location":"Tasks/#creating-you-own-methodology","text":"Create a .csv file with the following fields: name description Then, use the \"Import\" button and select your new .csv to load your custom Methodology to Faraday.","title":"Creating you own Methodology"},{"location":"Tasks/#downloading-your-preferred-methodology","text":"Do you have a custom Methodology created from scratch? Click in \"Download CSV for current Methodology\" and you will download a .csv file with the information for it!","title":"Downloading your preferred Methodology"},{"location":"Tasks/#kanban-view","text":"If you click on the Methodology name, you'll access the Kanban view for it. You can use drag and drop to change the status of the different Tasks, or you can create a new one. You can also edit or delete a task.","title":"Kanban View"},{"location":"Tasks/#task","text":"Methodologies contain Tasks, which include the following fields: Name Description Due date Status Users assigned Tags With that, you can assign a specific Task with a due date to a pentester. Also, tag a chunk of Tasks for a better appreciation in the Kanban view.","title":"Task"},{"location":"Tasks/#download-links","text":"Methodology Hardware Top 10 Methodology Mobile Security Methodology Network Pentest Methodology OWASP Top 10 Methodology PCI DSS 6.5 Methodology PCI DSS 11.2","title":"Download links"},{"location":"Troubleshooting/","text":"Intro \u00b6 This guide is intended to provide solutions for common problems. If your problem is not listed below, make sure to contact us ! Before moving on, verify that you are using the latest available version running the Client and the Server using --version or -v . To get the latest available version visit GitHub We recommend upgrading to the latest version before proceeding. Also, to get a better understanding of most problems you can run the Faraday Client using --debug or -d option. Traceback Troubleshooting \u00b6 For traceback troubleshooting you need to open the Faraday logs and search for the string ERROR . Logs are located on /home/faraday/.faraday/logs . In this section we will show common errors and possible solutions. We recommend to search part of the error in this page and try to match the error with possible solutions. Index \u00b6 I can't access the Web GUI Faraday is not importing my report A plugin added too much information to my database How to reset Faraday Server password Can't access Faraday Server remotely [Errno 2] No such file or directory: '/home/USERNAME/.faraday/config/config.xml' Updating Nginx Configuration Error while backing up the database No ports available UnicodeEncodeError: 'ascii' codec can't encode character Database encoding incompatibility executing initdb Answers \u00b6 I can't access the Web GUI \u00b6 Is Faraday Server running? Try running: $ faraday-manage status-check That will give some information about the state Faraday is in at the moment. If the Server is not running try: $ faraday-server Faraday is not importing my report \u00b6 First let's make sure there is a Plugin to parse it so make sure your tool is listed in our Plugin List . Not there? Code your own or ask us to do it Community , Pro and Corp users You can also try to force Faraday to process a report with a certain plugin. For example, let's say you have a Metasploit report that Faraday is not detecting. You can change the report so that it ends with _faraday_Metasploit (first letter of the plugin in uppercase), so it ends up as myreport_faraday_Metasploit.xml , and then copy it to /home/faraday/.faraday/reports/{workspacename} in the Client. This of course works for any plugin, not only Metasploit. Keep in mind that Plugins don't run on the Server, so if you're trying to copy the report file, make sure you're doint it on the Client . A plugin added too much information to my database \u00b6 You can go to your Activity Feed in the Web GUI, filter the vulnerabilities by whichever parameter you'd like, select them all and then click on Delete to remove them form the database. How to reset Faraday Server password \u00b6 If you forgot the password, or you don't know your Faraday Server password, you can use the command faraday-manage to change it: $ faraday-manage change-password Can't access Faraday Server remotely \u00b6 In your Server machine, go to /home/faraday/.faraday/config/server.ini and check if you're listening only on the localhost. You should see something like this: [faraday_server] port=5985 bind_address=localhost If your Clients are on different machines than the Server, then you'll need to change the bind_address to your private IP (or all your interfaces). For example: bind_address=0.0.0.0 Updating Nginx configuration \u00b6 Note: This only applies if you are using Nginx and https. Please, make sure you have this settings on your Nginx config: 1 2 proxy_pass http :// localhost : 5985 /; proxy_redirect http :// $ scheme ://; Error while backing up the database \u00b6 If you get this error: \u201cpci_q1\u201d failed: FATAL: role \u201croot\u201d does not exist while trying to execute: pg_dump <name of workspace> > <name of what I want the backup file to be> Run: sudo -u postgres -i And then try again. No ports available \u00b6 If you see this traceback: Traceback (most recent call last): File \"/usr/share/python-faraday/model/application.py\", line 145, in start CONF.getApiRestfulConInfoPort() File \"/usr/share/python-faraday/apis/rest/api.py\", line 67, in startAPIs raise Exception(\"No ports available!\") Exception: No ports available! Go into the file user.xml locates in /home/USERNAME/.faraday/config/ ~ localhost ~ 127.0.0.1 9876 9977 Change localhost for 127.0.0.1 and try again. UnicodeEncodeError: 'ascii' codec can't encode character \u00b6 If you see a Traceback that ends something like this: UnicodeEncodeError: 'ascii' codec can't encode character u'\\xf3' in position 1: ordinal not in range(128) Go into your Faraday folder and run the following command: 1 $ faraday-manage sql-shell Once inside the shell execute: SHOW SERVER_ENCODING If you are using symbols not supported by ASCII, you need to change database's encoding to UTF-8. 1. Dump your database 2. Drop your database, 3. Create new database with the different encoding 4. Reload your data. Make sure the client encoding is set correctly during this process. Database encoding incompatibility executing initdb \u00b6 If you got the following error when running the command faraday-manage initdb : ERROR: createdb: database creation failed: ERROR: new encoding (UTF8) is incompatible with the encoding of the template database (SQL_ASCII) HINT: Use the same encoding as in the template database, or use template0 as template. You can follow the instructions provided in this link . Once you get the solution above, you can try to initialize the database once more: faraday-manage initdb Is your question not listed here? Contact us SMTP is not being saved from the UI \u00b6 For this is needed to update manually the configuration on the server side. faraday-manage settings -a update smtp properly set the configuration needed, actually faraday doesn't support accounts without password/user. LDAP reconfigure after Faraday 3.15.0 \u00b6 As part of the constant grow there were introduced new security rules on LDAP and as a consequence when upgrading Faraday to 3.16 it LDAP needs to be reconfigured. Steps to do it: faraday-manage settings -a update ldap Then update every field according to the on-prem configuration . $ faraday-manage settings -a update ldap Update settings for: ldap enabled [False]: use_local_roles [True]: default_local_role [admin]: admin_group []: asset_owner_group []: client_group []: pentester_group []: disconnect_timeout [2.0]: server []: port [389]: use_ldaps [False]: use_start_tls [False]: domain []: domain_dn []: bind_format [CN]: bind_dn []: user_class [user]: user_attribute [sAMAccountName]: group_class [group]: paginated_fetch [False]: Do you confirm your changes on ldap? ---------------------- enabled: False use_local_roles: True default_local_role: admin admin_group: asset_owner_group: client_group: pentester_group: disconnect_timeout: 2.0 server: port: 389 use_ldaps: False use_start_tls: False domain: domain_dn: bind_format: CN bind_dn: user_class: user user_attribute: sAMAccountName group_class: group paginated_fetch: False [Y/n]: my reports disappeaered after activating markdown \u00b6 remember that markdown reports are stored at: Generic: ~/.faraday/executive_reports_templates/markdown_generic Grouped /.faraday/executive_reports_templates/markdown_grouped","title":"Troubleshooting"},{"location":"Troubleshooting/#intro","text":"This guide is intended to provide solutions for common problems. If your problem is not listed below, make sure to contact us ! Before moving on, verify that you are using the latest available version running the Client and the Server using --version or -v . To get the latest available version visit GitHub We recommend upgrading to the latest version before proceeding. Also, to get a better understanding of most problems you can run the Faraday Client using --debug or -d option.","title":"Intro"},{"location":"Troubleshooting/#traceback-troubleshooting","text":"For traceback troubleshooting you need to open the Faraday logs and search for the string ERROR . Logs are located on /home/faraday/.faraday/logs . In this section we will show common errors and possible solutions. We recommend to search part of the error in this page and try to match the error with possible solutions.","title":"Traceback Troubleshooting"},{"location":"Troubleshooting/#index","text":"I can't access the Web GUI Faraday is not importing my report A plugin added too much information to my database How to reset Faraday Server password Can't access Faraday Server remotely [Errno 2] No such file or directory: '/home/USERNAME/.faraday/config/config.xml' Updating Nginx Configuration Error while backing up the database No ports available UnicodeEncodeError: 'ascii' codec can't encode character Database encoding incompatibility executing initdb","title":"Index"},{"location":"Troubleshooting/#answers","text":"","title":"Answers"},{"location":"Troubleshooting/#i-cant-access-the-web-gui","text":"Is Faraday Server running? Try running: $ faraday-manage status-check That will give some information about the state Faraday is in at the moment. If the Server is not running try: $ faraday-server","title":"I can't access the Web GUI"},{"location":"Troubleshooting/#faraday-is-not-importing-my-report","text":"First let's make sure there is a Plugin to parse it so make sure your tool is listed in our Plugin List . Not there? Code your own or ask us to do it Community , Pro and Corp users You can also try to force Faraday to process a report with a certain plugin. For example, let's say you have a Metasploit report that Faraday is not detecting. You can change the report so that it ends with _faraday_Metasploit (first letter of the plugin in uppercase), so it ends up as myreport_faraday_Metasploit.xml , and then copy it to /home/faraday/.faraday/reports/{workspacename} in the Client. This of course works for any plugin, not only Metasploit. Keep in mind that Plugins don't run on the Server, so if you're trying to copy the report file, make sure you're doint it on the Client .","title":"Faraday is not importing my report"},{"location":"Troubleshooting/#a-plugin-added-too-much-information-to-my-database","text":"You can go to your Activity Feed in the Web GUI, filter the vulnerabilities by whichever parameter you'd like, select them all and then click on Delete to remove them form the database.","title":"A plugin added too much information to my database"},{"location":"Troubleshooting/#how-to-reset-faraday-server-password","text":"If you forgot the password, or you don't know your Faraday Server password, you can use the command faraday-manage to change it: $ faraday-manage change-password","title":"How to reset Faraday Server password"},{"location":"Troubleshooting/#cant-access-faraday-server-remotely","text":"In your Server machine, go to /home/faraday/.faraday/config/server.ini and check if you're listening only on the localhost. You should see something like this: [faraday_server] port=5985 bind_address=localhost If your Clients are on different machines than the Server, then you'll need to change the bind_address to your private IP (or all your interfaces). For example: bind_address=0.0.0.0","title":"Can't access Faraday Server remotely"},{"location":"Troubleshooting/#updating-nginx-configuration","text":"Note: This only applies if you are using Nginx and https. Please, make sure you have this settings on your Nginx config: 1 2 proxy_pass http :// localhost : 5985 /; proxy_redirect http :// $ scheme ://;","title":"Updating Nginx configuration"},{"location":"Troubleshooting/#error-while-backing-up-the-database","text":"If you get this error: \u201cpci_q1\u201d failed: FATAL: role \u201croot\u201d does not exist while trying to execute: pg_dump <name of workspace> > <name of what I want the backup file to be> Run: sudo -u postgres -i And then try again.","title":"Error while backing up the database"},{"location":"Troubleshooting/#no-ports-available","text":"If you see this traceback: Traceback (most recent call last): File \"/usr/share/python-faraday/model/application.py\", line 145, in start CONF.getApiRestfulConInfoPort() File \"/usr/share/python-faraday/apis/rest/api.py\", line 67, in startAPIs raise Exception(\"No ports available!\") Exception: No ports available! Go into the file user.xml locates in /home/USERNAME/.faraday/config/ ~ localhost ~ 127.0.0.1 9876 9977 Change localhost for 127.0.0.1 and try again.","title":"No ports available"},{"location":"Troubleshooting/#unicodeencodeerror-ascii-codec-cant-encode-character","text":"If you see a Traceback that ends something like this: UnicodeEncodeError: 'ascii' codec can't encode character u'\\xf3' in position 1: ordinal not in range(128) Go into your Faraday folder and run the following command: 1 $ faraday-manage sql-shell Once inside the shell execute: SHOW SERVER_ENCODING If you are using symbols not supported by ASCII, you need to change database's encoding to UTF-8. 1. Dump your database 2. Drop your database, 3. Create new database with the different encoding 4. Reload your data. Make sure the client encoding is set correctly during this process.","title":"UnicodeEncodeError: 'ascii' codec can't encode character"},{"location":"Troubleshooting/#database-encoding-incompatibility-executing-initdb","text":"If you got the following error when running the command faraday-manage initdb : ERROR: createdb: database creation failed: ERROR: new encoding (UTF8) is incompatible with the encoding of the template database (SQL_ASCII) HINT: Use the same encoding as in the template database, or use template0 as template. You can follow the instructions provided in this link . Once you get the solution above, you can try to initialize the database once more: faraday-manage initdb Is your question not listed here? Contact us","title":"Database encoding incompatibility executing initdb"},{"location":"Troubleshooting/#smtp-is-not-being-saved-from-the-ui","text":"For this is needed to update manually the configuration on the server side. faraday-manage settings -a update smtp properly set the configuration needed, actually faraday doesn't support accounts without password/user.","title":"SMTP is not being saved from the UI"},{"location":"Troubleshooting/#ldap-reconfigure-after-faraday-3150","text":"As part of the constant grow there were introduced new security rules on LDAP and as a consequence when upgrading Faraday to 3.16 it LDAP needs to be reconfigured. Steps to do it: faraday-manage settings -a update ldap Then update every field according to the on-prem configuration . $ faraday-manage settings -a update ldap Update settings for: ldap enabled [False]: use_local_roles [True]: default_local_role [admin]: admin_group []: asset_owner_group []: client_group []: pentester_group []: disconnect_timeout [2.0]: server []: port [389]: use_ldaps [False]: use_start_tls [False]: domain []: domain_dn []: bind_format [CN]: bind_dn []: user_class [user]: user_attribute [sAMAccountName]: group_class [group]: paginated_fetch [False]: Do you confirm your changes on ldap? ---------------------- enabled: False use_local_roles: True default_local_role: admin admin_group: asset_owner_group: client_group: pentester_group: disconnect_timeout: 2.0 server: port: 389 use_ldaps: False use_start_tls: False domain: domain_dn: bind_format: CN bind_dn: user_class: user user_attribute: sAMAccountName group_class: group paginated_fetch: False [Y/n]:","title":"LDAP reconfigure after Faraday 3.15.0"},{"location":"Troubleshooting/#my-reports-disappeaered-after-activating-markdown","text":"remember that markdown reports are stored at: Generic: ~/.faraday/executive_reports_templates/markdown_generic Grouped /.faraday/executive_reports_templates/markdown_grouped","title":"my reports disappeaered after activating markdown"},{"location":"Update/","text":"Updating Faraday \u00b6 Faraday will be installed as a service if you use .deb or .rpm. To update Faraday, please follow these instructions: Download the latest .deb or .rpm Faraday Server Installer Community Edition from our GitHub Professional/Corporate version from the Faraday Portal Run: sudo service faraday-server stop sudo apt install ./faraday-amd64.deb or sudo yum install ./faraday-amd64.rpm In order for the update to work, these steps must be followed in every instance of Faraday. Once you have updated Faraday, you can take a look at Faraday Server's status by running: sudo service faraday-server status","title":"Update"},{"location":"Update/#updating-faraday","text":"Faraday will be installed as a service if you use .deb or .rpm. To update Faraday, please follow these instructions: Download the latest .deb or .rpm Faraday Server Installer Community Edition from our GitHub Professional/Corporate version from the Faraday Portal Run: sudo service faraday-server stop sudo apt install ./faraday-amd64.deb or sudo yum install ./faraday-amd64.rpm In order for the update to work, these steps must be followed in every instance of Faraday. Once you have updated Faraday, you can take a look at Faraday Server's status by running: sudo service faraday-server status","title":"Updating Faraday"},{"location":"Upload-Report/","text":"This wiki will help you to learn the different ways that Faraday has to import a report. Through the Web UI. \u00b6 Go to the tab Status Report and click on the button: Click on Select File in order to select the report that you are going to upload. Once you have selected the report, click on Upload File and your file will be uploaded. Through Faraday-Cli \u00b6 Faraday-Cli must be running in each case. Faraday-Cli (Community) \u00b6 It's possible to use Faraday in Command-Line Interface (CLI) mode, allowing you to process your reports in batch. So lets say you want to process the XML output of an nmap scan located in /tmp/nmap_scan.xml and send the results to a workspace called project_one . The way to do it using CLI mode would be to run: 1 $ faraday-client --cli --workspace project_one --report /tmp/nmap_scan.xml Cli (Professional and Corporate versions) \u00b6 If you're using a Professional or Corporate version, you'll probably need to run Faraday as a certain user, with permissions to access your workspaces. You can pass your credentials using a simple json file that contains both your username and password. You have a template in the directory of your Faraday installation called credentials.json, but you are allowed to use any path and filename for this json file. The structure is this: 1 2 3 4 { \"username\": \"your_user_here\", \"password\": \"your_password_here\" } And then run Faraday: 1 $ faraday-client --cli --workspace project_one --report /tmp/nmap_scan.xml --creds-file /path/to/file/credentials.json Through the API \u00b6 In order to see information about uploading a report through the API, follow this link .","title":"Upload Report"},{"location":"Upload-Report/#through-the-web-ui","text":"Go to the tab Status Report and click on the button: Click on Select File in order to select the report that you are going to upload. Once you have selected the report, click on Upload File and your file will be uploaded.","title":"Through the Web UI."},{"location":"Upload-Report/#through-faraday-cli","text":"Faraday-Cli must be running in each case.","title":"Through Faraday-Cli"},{"location":"Upload-Report/#faraday-cli-community","text":"It's possible to use Faraday in Command-Line Interface (CLI) mode, allowing you to process your reports in batch. So lets say you want to process the XML output of an nmap scan located in /tmp/nmap_scan.xml and send the results to a workspace called project_one . The way to do it using CLI mode would be to run: 1 $ faraday-client --cli --workspace project_one --report /tmp/nmap_scan.xml","title":"Faraday-Cli (Community)"},{"location":"Upload-Report/#cli-professional-and-corporate-versions","text":"If you're using a Professional or Corporate version, you'll probably need to run Faraday as a certain user, with permissions to access your workspaces. You can pass your credentials using a simple json file that contains both your username and password. You have a template in the directory of your Faraday installation called credentials.json, but you are allowed to use any path and filename for this json file. The structure is this: 1 2 3 4 { \"username\": \"your_user_here\", \"password\": \"your_password_here\" } And then run Faraday: 1 $ faraday-client --cli --workspace project_one --report /tmp/nmap_scan.xml --creds-file /path/to/file/credentials.json","title":"Cli (Professional and Corporate versions)"},{"location":"Upload-Report/#through-the-api","text":"In order to see information about uploading a report through the API, follow this link .","title":"Through the API"},{"location":"Users/","text":"Users (V3 Deprecated) \u00b6 During the Faraday Server setup process an administrator user is created. Default username is faraday and the password will be created randomly. Store this password to be able to change it later on if needed. Info If you wish to change your password, run faraday-manage change-password. To manage users start a session in the Web UI and then click on the Faraday slider menu on the right of the screen and then on Users : A list containing all the users will show up, including buttons to create, edit or delete. Roles \u00b6 Faraday supports four types of Roles with different levels of access to the application. Admin: This role lets the administrator manipulate options regarding users, workspaces, vulnerabilities, reports, etc. Pentester: This role is allowed to access permitted workspaces and create, edit or erase vulnerabilities. Asset Owner: This role is similar to the Client role, but can modify Vulnerabilities' Status and add Comments, so it's useful for people working in remediation. Client: This role is allowed to access permitted workspaces without being able to modify anything. Advanced user management \u00b6 You have further options for user management available by using the faraday-manage command inside your Faraday Server instance. With said command, you can change-password: Changes the password of a user. create-superuser: Create ADMIN user for your Faraday instance. rename-user: Change username of a user. LDAP/AD Integration \u00b6 You can also enhance your User management inside Faraday with our LDAP/Active Directory integration. More information available here .","title":"Users **(V3 Deprecated)**"},{"location":"Users/#users-v3-deprecated","text":"During the Faraday Server setup process an administrator user is created. Default username is faraday and the password will be created randomly. Store this password to be able to change it later on if needed. Info If you wish to change your password, run faraday-manage change-password. To manage users start a session in the Web UI and then click on the Faraday slider menu on the right of the screen and then on Users : A list containing all the users will show up, including buttons to create, edit or delete.","title":"Users (V3 Deprecated)"},{"location":"Users/#roles","text":"Faraday supports four types of Roles with different levels of access to the application. Admin: This role lets the administrator manipulate options regarding users, workspaces, vulnerabilities, reports, etc. Pentester: This role is allowed to access permitted workspaces and create, edit or erase vulnerabilities. Asset Owner: This role is similar to the Client role, but can modify Vulnerabilities' Status and add Comments, so it's useful for people working in remediation. Client: This role is allowed to access permitted workspaces without being able to modify anything.","title":"Roles"},{"location":"Users/#advanced-user-management","text":"You have further options for user management available by using the faraday-manage command inside your Faraday Server instance. With said command, you can change-password: Changes the password of a user. create-superuser: Create ADMIN user for your Faraday instance. rename-user: Change username of a user.","title":"Advanced user management"},{"location":"Users/#ldapad-integration","text":"You can also enhance your User management inside Faraday with our LDAP/Active Directory integration. More information available here .","title":"LDAP/AD Integration"},{"location":"Using-custom-fields-from-the-API/","text":"Custom Attributes usage with Faraday API \u00b6 Custom Attributes allows you to extend the vulnerability's model by adding more fields. Custom Attributes type can be int , str or list . You can learn more about Custom Attributes creation on this wiki page . In this small tutorial, we are going to use Python's library Requests and Faraday's API to authenticate, create a vulnerability and modify its Custom Attributes. Step 1: Authentication \u00b6 To authenticate in Faraday, we are going to use a function called faraday_authentication(). This function will return an authenticated request session. def faraday_authentication ( host , username , password ): \"\"\" @host: Faraday server host, e.g: http://127.0.0.1:5985 @username: Faraday username @password: username's password Return requests session object \"\"\" session = requests . Session () headers = { 'Content-Type' : 'application/json' , # Very important! send this content-type header!! } data = '{\"email\":username,\"password\": password}' response = s . post ( ' {0} /_api/login' . format ( host ), headers = headers , data = data ) assert response . status_code == 200 return session Step 2: Create Custom Attributes \u00b6 In order to create a new Custom Attribute, follow the steps specified in this wiki page . Step 3: Create a vulnerability from the API \u00b6 Before using the API, you need to understand how to send the data to the server. Faraday Server accepts JSON. Assuming that you created a custom attribute with the following data: Field name: cvss , Display name: CVSS and assuming that this vulnerability has as CVSS, the score \"4\", the JSON format for creating this vulnerability is the following: { \"metadata\": { \"update_time\": 1549569790.632, \"update_user\": \"\", \"update_action\": 0, \"creator\": \"UI Web\", \"create_time\": 1549569790.632, \"update_controller_action\": \"UI Web New\", \"owner\": \"faraday\" }, \"obj_id\": \"\", \"owner\": \"faraday\", \"parent\": 24, \"parent_type\": \"Host\", \"type\": \"Vulnerability\", \"ws\": \"demo_workspace\", \"confirmed\": true, \"data\": \"\", \"desc\": \"Test\", \"easeofresolution\": null, \"impact\": { \"accountability\": false, \"availability\": false, \"confidentiality\": false, \"integrity\": false }, \"name\": \"dsadsadsa\", \"owned\": false, \"policyviolations\": [], \"refs\": [], \"resolution\": \"\", \"severity\": \"unclassified\", \"issuetracker\": \"\", \"status\": \"opened\", \"custom_fields\": { \"CVSS\" : \"4\" }, \"_attachments\": {}, \"description\": \"\", \"protocol\": \"\", \"version\": \"\" } Important * Note that we have a key called \"custom_fields\" (which contains our custom attributes) with its display name and its value: \"custom_fields\": { \"CVSS\" : \"4\" } Two important fields that we need to understand are parent_id and parent_type . In the JSON above, we specified them as follow: \"parent_type\" : \"Host\" \"parent_id\" : \"24\" This mean that in our database we have a Host with id 24 . If you don't specify this two fields, you will get an invalid response. You can learn more about the API Server by following this link Code sample for creating a vulnerability \u00b6 Now, let's see a code sample that will create a new vulnerability called Test inside a workspace named demo_workspace . As vuln_payload we will use the JSON that we specified above: faraday_host = 'http://127.0.0.1:5985' session = faraday_authentication ( faraday_host , 'faraday' , 'secret' ) vulnerability_url = ' {0} //_api/v3/ws/demo_workspace/vulns/386/' . format ( faraday_host ) vuln_payload = '{\"metadata\":{\"update_time\":1549569790.632,\"update_user\":\"\",\"update_action\":0,\"creator\":\"UI Web\",\"create_time\":1549569790.632,\"update_controller_action\":\"UI Web New\",\"owner\":\"faraday\"},\"obj_id\":\"\",\"owner\":\"faraday\",\"parent\":24,\"parent_type\":\"Host\",\"type\":\"Vulnerability\",\"ws\":\"demo_workspace\",\"confirmed\":true,\"data\":\"\",\"desc\":\"dsadsadsa\",\"easeofresolution\":null,\"impact\":{\"accountability\":false,\"availability\":false,\"confidentiality\":false,\"integrity\":false},\"name\":\"Test\",\"owned\":false,\"policyviolations\":[],\"refs\":[],\"resolution\":\"\",\"severity\":\"unclassified\",\"issuetracker\":\"\",\"status\":\"opened\",\"custom_fields\":{\"CVSS\" : \"4\"},\"_attachments\": {} ,\"description\":\"\",\"protocol\":\"\",\"version\":\"\"}' response = session . post ( vulnerability_url , json = vuln_payload ) The server is going to answer with the created vulnerability and it will return status code \"201\" (if the creation was successfull) or \"409\" (if there was any conflict). In our case it returned the status code \"201\" and a JSON with the response. We can get the vulnerability id by getting the key \" id\" from the JSON response. In this case, the vulnerability id is _386 . Important: If you didn't create the Custom Attribute (see step 2), it will not be seen in the vulnerability. Remember to create the custom attribute first. Getting the vulnerability by its ID using the API \u00b6 Now you can do a GET request on the following url to see the vulnerability in JSON format. Note that we are using the same id as the one we get above (386): http://localhost:5985/_api/v3/ws/demo_workspace/vulns/386/ Step 4: Update Custom Attributes \u00b6 In the next example, we are going to update the Custom Attribute \"CVSS\" located in the vulnerability 386. The new value will be \"5\". Note: When you update a vulnerability, you need to send the full JSON body of the vulnerability. faraday_host = 'http://127.0.0.1:5985' session = faraday_authentication ( faraday_host , 'faraday' , 'secret' ) vulnerability_url = ' {0} /_api/v3/ws/demo_workspace/vulns/386/' . format ( faraday_host ) vuln_payload = '{\"metadata\":{\"update_time\":1549569790.632,\"update_user\":\"\",\"update_action\":0,\"creator\":\"UI Web\",\"create_time\":1549569790.632,\"update_controller_action\":\"UI Web New\",\"owner\":\"faraday\"},\"obj_id\":\"\",\"owner\":\"faraday\",\"parent\":24,\"parent_type\":\"Host\",\"type\":\"Vulnerability\",\"ws\":\"demo_workspace\",\"confirmed\":true,\"data\":\"\",\"desc\":\"dsadsadsa\",\"easeofresolution\":null,\"impact\":{\"accountability\":false,\"availability\":false,\"confidentiality\":false,\"integrity\":false},\"name\":\"Test\",\"owned\":false,\"policyviolations\":[],\"refs\":[],\"resolution\":\"\",\"severity\":\"unclassified\",\"issuetracker\":\"\",\"status\":\"opened\",\"custom_fields\":\"CVSS\": \"5\",\"_attachments\": {} ,\"description\":\"\",\"protocol\":\"\",\"version\":\"\"}' response = session . put ( vulnerability_url , json = vuln_payload ) Note that we have changed the value of \"CVSS\" on the JSON: ``` \"custom_fields\": { \"CVSS\" : \"5\" }","title":"Custom Attributes usage with Faraday API"},{"location":"Using-custom-fields-from-the-API/#custom-attributes-usage-with-faraday-api","text":"Custom Attributes allows you to extend the vulnerability's model by adding more fields. Custom Attributes type can be int , str or list . You can learn more about Custom Attributes creation on this wiki page . In this small tutorial, we are going to use Python's library Requests and Faraday's API to authenticate, create a vulnerability and modify its Custom Attributes.","title":"Custom Attributes usage with Faraday API"},{"location":"Using-custom-fields-from-the-API/#step-1-authentication","text":"To authenticate in Faraday, we are going to use a function called faraday_authentication(). This function will return an authenticated request session. def faraday_authentication ( host , username , password ): \"\"\" @host: Faraday server host, e.g: http://127.0.0.1:5985 @username: Faraday username @password: username's password Return requests session object \"\"\" session = requests . Session () headers = { 'Content-Type' : 'application/json' , # Very important! send this content-type header!! } data = '{\"email\":username,\"password\": password}' response = s . post ( ' {0} /_api/login' . format ( host ), headers = headers , data = data ) assert response . status_code == 200 return session","title":"Step 1: Authentication"},{"location":"Using-custom-fields-from-the-API/#step-2-create-custom-attributes","text":"In order to create a new Custom Attribute, follow the steps specified in this wiki page .","title":"Step 2: Create Custom Attributes"},{"location":"Using-custom-fields-from-the-API/#step-3-create-a-vulnerability-from-the-api","text":"Before using the API, you need to understand how to send the data to the server. Faraday Server accepts JSON. Assuming that you created a custom attribute with the following data: Field name: cvss , Display name: CVSS and assuming that this vulnerability has as CVSS, the score \"4\", the JSON format for creating this vulnerability is the following: { \"metadata\": { \"update_time\": 1549569790.632, \"update_user\": \"\", \"update_action\": 0, \"creator\": \"UI Web\", \"create_time\": 1549569790.632, \"update_controller_action\": \"UI Web New\", \"owner\": \"faraday\" }, \"obj_id\": \"\", \"owner\": \"faraday\", \"parent\": 24, \"parent_type\": \"Host\", \"type\": \"Vulnerability\", \"ws\": \"demo_workspace\", \"confirmed\": true, \"data\": \"\", \"desc\": \"Test\", \"easeofresolution\": null, \"impact\": { \"accountability\": false, \"availability\": false, \"confidentiality\": false, \"integrity\": false }, \"name\": \"dsadsadsa\", \"owned\": false, \"policyviolations\": [], \"refs\": [], \"resolution\": \"\", \"severity\": \"unclassified\", \"issuetracker\": \"\", \"status\": \"opened\", \"custom_fields\": { \"CVSS\" : \"4\" }, \"_attachments\": {}, \"description\": \"\", \"protocol\": \"\", \"version\": \"\" } Important * Note that we have a key called \"custom_fields\" (which contains our custom attributes) with its display name and its value: \"custom_fields\": { \"CVSS\" : \"4\" } Two important fields that we need to understand are parent_id and parent_type . In the JSON above, we specified them as follow: \"parent_type\" : \"Host\" \"parent_id\" : \"24\" This mean that in our database we have a Host with id 24 . If you don't specify this two fields, you will get an invalid response. You can learn more about the API Server by following this link","title":"Step 3: Create a vulnerability from the API"},{"location":"Using-custom-fields-from-the-API/#code-sample-for-creating-a-vulnerability","text":"Now, let's see a code sample that will create a new vulnerability called Test inside a workspace named demo_workspace . As vuln_payload we will use the JSON that we specified above: faraday_host = 'http://127.0.0.1:5985' session = faraday_authentication ( faraday_host , 'faraday' , 'secret' ) vulnerability_url = ' {0} //_api/v3/ws/demo_workspace/vulns/386/' . format ( faraday_host ) vuln_payload = '{\"metadata\":{\"update_time\":1549569790.632,\"update_user\":\"\",\"update_action\":0,\"creator\":\"UI Web\",\"create_time\":1549569790.632,\"update_controller_action\":\"UI Web New\",\"owner\":\"faraday\"},\"obj_id\":\"\",\"owner\":\"faraday\",\"parent\":24,\"parent_type\":\"Host\",\"type\":\"Vulnerability\",\"ws\":\"demo_workspace\",\"confirmed\":true,\"data\":\"\",\"desc\":\"dsadsadsa\",\"easeofresolution\":null,\"impact\":{\"accountability\":false,\"availability\":false,\"confidentiality\":false,\"integrity\":false},\"name\":\"Test\",\"owned\":false,\"policyviolations\":[],\"refs\":[],\"resolution\":\"\",\"severity\":\"unclassified\",\"issuetracker\":\"\",\"status\":\"opened\",\"custom_fields\":{\"CVSS\" : \"4\"},\"_attachments\": {} ,\"description\":\"\",\"protocol\":\"\",\"version\":\"\"}' response = session . post ( vulnerability_url , json = vuln_payload ) The server is going to answer with the created vulnerability and it will return status code \"201\" (if the creation was successfull) or \"409\" (if there was any conflict). In our case it returned the status code \"201\" and a JSON with the response. We can get the vulnerability id by getting the key \" id\" from the JSON response. In this case, the vulnerability id is _386 . Important: If you didn't create the Custom Attribute (see step 2), it will not be seen in the vulnerability. Remember to create the custom attribute first.","title":"Code sample for creating a vulnerability"},{"location":"Using-custom-fields-from-the-API/#getting-the-vulnerability-by-its-id-using-the-api","text":"Now you can do a GET request on the following url to see the vulnerability in JSON format. Note that we are using the same id as the one we get above (386): http://localhost:5985/_api/v3/ws/demo_workspace/vulns/386/","title":"Getting the vulnerability by its ID using the API"},{"location":"Using-custom-fields-from-the-API/#step-4-update-custom-attributes","text":"In the next example, we are going to update the Custom Attribute \"CVSS\" located in the vulnerability 386. The new value will be \"5\". Note: When you update a vulnerability, you need to send the full JSON body of the vulnerability. faraday_host = 'http://127.0.0.1:5985' session = faraday_authentication ( faraday_host , 'faraday' , 'secret' ) vulnerability_url = ' {0} /_api/v3/ws/demo_workspace/vulns/386/' . format ( faraday_host ) vuln_payload = '{\"metadata\":{\"update_time\":1549569790.632,\"update_user\":\"\",\"update_action\":0,\"creator\":\"UI Web\",\"create_time\":1549569790.632,\"update_controller_action\":\"UI Web New\",\"owner\":\"faraday\"},\"obj_id\":\"\",\"owner\":\"faraday\",\"parent\":24,\"parent_type\":\"Host\",\"type\":\"Vulnerability\",\"ws\":\"demo_workspace\",\"confirmed\":true,\"data\":\"\",\"desc\":\"dsadsadsa\",\"easeofresolution\":null,\"impact\":{\"accountability\":false,\"availability\":false,\"confidentiality\":false,\"integrity\":false},\"name\":\"Test\",\"owned\":false,\"policyviolations\":[],\"refs\":[],\"resolution\":\"\",\"severity\":\"unclassified\",\"issuetracker\":\"\",\"status\":\"opened\",\"custom_fields\":\"CVSS\": \"5\",\"_attachments\": {} ,\"description\":\"\",\"protocol\":\"\",\"version\":\"\"}' response = session . put ( vulnerability_url , json = vuln_payload ) Note that we have changed the value of \"CVSS\" on the JSON: ``` \"custom_fields\": { \"CVSS\" : \"5\" }","title":"Step 4: Update Custom Attributes"},{"location":"Vulnerability-Templates-%28KB%29/","text":"KB Vulnerability Templates \u00b6 Find yourself writing the same descriptions over and over again? Tired of typos coming up in your reports? Faraday provides a simple solution: unify criteria for naming vulnerabilities and save time and effort to yourself and your team. Write vulns once and use them forever! Faraday Server allows you to import your own CWE Vulnerabilities DB for you to use as templates. Is a simple CSV made using Open Source projects based in the CWE standard and allows you to create vulnerabilities without worrying about finding references, description, etc. Populate your KB \u00b6 Import csv file \u00b6 Download our CWE example: CWE EN CWE ES Navigate into Vulnerability > Vuln Template tab in your Faraday Instance Web UI and click on the Add Template Button: A dropdown will appear and select Import From File. Adding a Template from Vuln \u00b6 You can also create templates manually from a vuln. In the Web UI, select a vuln and select Create template from the dropdown menu. You will get a list of the existing templates in your installation Adding a Template manually \u00b6 Navigate into Vulenrabilty > Vuln Template tab in your Faraday Instance Web UI and click on the Add Template button: You will get a form to generate the template. Usage \u00b6 Creating Vuln from Template \u00b6 Click on new Vulnerability, on the name parameter Templates can be selected easily to select a Template form the name search. You can also duplicate vulnerabilities easily by saving them as a template and later on importing the template. Note Name, Description and Resolution fields are replaced with the information stored in the templates database.","title":"Vulnerability KB"},{"location":"Vulnerability-Templates-%28KB%29/#kb-vulnerability-templates","text":"Find yourself writing the same descriptions over and over again? Tired of typos coming up in your reports? Faraday provides a simple solution: unify criteria for naming vulnerabilities and save time and effort to yourself and your team. Write vulns once and use them forever! Faraday Server allows you to import your own CWE Vulnerabilities DB for you to use as templates. Is a simple CSV made using Open Source projects based in the CWE standard and allows you to create vulnerabilities without worrying about finding references, description, etc.","title":"KB Vulnerability Templates"},{"location":"Vulnerability-Templates-%28KB%29/#populate-your-kb","text":"","title":"Populate your KB"},{"location":"Vulnerability-Templates-%28KB%29/#import-csv-file","text":"Download our CWE example: CWE EN CWE ES Navigate into Vulnerability > Vuln Template tab in your Faraday Instance Web UI and click on the Add Template Button: A dropdown will appear and select Import From File.","title":"Import csv file"},{"location":"Vulnerability-Templates-%28KB%29/#adding-a-template-from-vuln","text":"You can also create templates manually from a vuln. In the Web UI, select a vuln and select Create template from the dropdown menu. You will get a list of the existing templates in your installation","title":"Adding a Template from Vuln"},{"location":"Vulnerability-Templates-%28KB%29/#adding-a-template-manually","text":"Navigate into Vulenrabilty > Vuln Template tab in your Faraday Instance Web UI and click on the Add Template button: You will get a form to generate the template.","title":"Adding a Template manually"},{"location":"Vulnerability-Templates-%28KB%29/#usage","text":"","title":"Usage"},{"location":"Vulnerability-Templates-%28KB%29/#creating-vuln-from-template","text":"Click on new Vulnerability, on the name parameter Templates can be selected easily to select a Template form the name search. You can also duplicate vulnerabilities easily by saving them as a template and later on importing the template. Note Name, Description and Resolution fields are replaced with the information stored in the templates database.","title":"Creating Vuln from Template"},{"location":"Vulns-v4/","text":"To view a full list of yours findings you can access the Vulns view by clicking the Vulnerabilities button on the left menu. The Vulns View provides several options including vulnerability search, filtering and management. Personalize this view by adding or removing columns in the Edit Column Order view, where you can select or deselect them from their checkboxes. You can access this view by clicking this button in the top right corner. Also, you can drag & drop some labels of columns and change their order on the table. These changes will be persisted in your browser from session to session, so you only have to apply them once. There are many ways to add vulnerabilities into Faraday, create them manually, import scan reports, with supported tools, Faraday Agents or using Faraday API. Import Scan Reports \u00b6 You can upload a scan report of your favorite tool to Faraday and have a nice look at your findings through the Vulns View. You can see a list of the tools that Faraday supports by clicking on this link In order to upload a report to Faraday, follow these instructions: Click on the button + Add Vulnerability . Click on the button Import from file and a prompt will be displayed. Click on Browse in order to select the report that you are going to upload, or just drag and drop the file into the box. Once you have selected the report, click on Upload and your file will be uploaded. Refresh the view with the top bar refresh icon. Create a Vulnerability \u00b6 To create vulnerabilities manually, you can go to the Vulns View page and click the + Add Vulnerability button and then click on Manual Creation . You should see a dialog similar to this: The image above shows the tab General that allows you to specify the name, description and severity of your vulnerability. Also, you can specify the ease of resolution, an external ID, its impact, a resolution, its policy violations and references. You also have another tabs in order to add more information to your vulnerability: Technical Details : allows you to add the field data to your vulnerability. If you're creating a web vulnerability, you add information about request and response. Custom Fields : allows you to add information to a field that you have created. For more information about Custom Fields, you can check it here . Assets : when you fill at least the three mandatory fields of the General tab (name, description and severity), the Assets tab becomes available. Here you can select from a select box 1 to N targets (in order to create 1 to N vulnerabilities), or type a new target if it's not yet in the list. Evidence : allows you to add an evidence to the vulnerability. It can be a PNG or JPG image. Make sure you select a host (and a service if the vulnerability applies to it), a name and a description. These fields are mandatory to create a vulnerability Edit Vulnerabilities \u00b6 You can edit the vulnerabilities that you have created or imported. You have multiple ways to edit them. From Vuln Preview \u00b6 You can see a preview of the vulnerability by click on the vuln's name. From here you can edit your vulnerability, and it will be saved automatically. As you can see in the image above, there is a new tab named Comments where you can leave comments and mention other users to notify them about important events in real time. For more information about Comments, you can check it here Edit Button \u00b6 If you click on the Edit icon, the vulnerability edit mode will open Once you finish updating click on SAVE at the end of the section you are changing. Edit Multiple Vulnerabilities \u00b6 You can select and edit multiple vulnerabilities with just one click. Next to the edit button, you will find a three dotted button that will show a dropdown with the multiple values that you can edit at once or actions like, Create vulnerability templates (KB) Delete Vulnerabilities \u00b6 Select one or more vulnerabilities and click Delete icon Confirmed Vulnerabilities \u00b6 You can filter your vulnerabilities by confirmed, unconfirmed by clicking on the Flag icon button: Tags \u00b6 Tags allow you to organize your vulnerabilities by letting you make and edit categories: environment, technology, state, language, projects, etc. You can also use Tags for Reports , allowing you to filter which vulnerabilities you want to generate a report for. How to Tag Vulnerabilities \u00b6 Select the vulnerabilities that you want to tag. Click on the \"Tags\" icon and select if you have a preset tag or Create tag button if you need a new one. If you are going to create one just put a relevant name and a dialogue will be displayed. Now the vulnerability has tags that you can use for filtering, searching or reporting Search and Filter Vulnerabilities \u00b6 Vulns View allows you to filter vulnerabilities, so you can have a better workflow. You can search or filter your data by specifying a keyword or multiple keywords. Field values are not case-sensitive How To Filter \u00b6 In order to perform a search, first click on the search bar and follow these steps: Select if you want to filter by Vulnerabilities or Assets . Enter the name of the field (e.g. severity ) and select from the list displayed. Select the connector type that you need to perform the wanted filter (these connectors vary according to the field selected). Finally, type your query or select an option from the list displayed, according to the field and connector selected. Repeat steps 2 to 4 if you want to filter by more than one field. Examples: You can also click on blue fields of the vulnerability like Service, Hostnames, Target, Owner, etc. to trigger a search on the specific field Filter Fields \u00b6 Now, let's take a look at which fields are available for filtering with an example. All of them are searched through the search field Name | = | TCP timestamps Description | contains | Vulnerability testing Severity | = | Medium Target | = | 127.0.0.1 Service name | contains | https Service port | >= | 5000 Ease of Resolution | = | Moderate Status | != | Closed Resolution | contains | Resolution for testing vuln Data | contains | Search and filter Request | contains | json Response | = | OK Method | = | POST Path | = | Vulnerability Path Creator command id | != | 1 Type | = | Vulnerability Web Confirmed | = | True ID | = | 57448 Tag | = | my_tag From the Vulns view you will be able to find the information using the tags parameter For example: tags:\"MY TAG\" as shown in the image below Saved Filters and Quick Filters \u00b6 The filters that you create from the search bar, you can save them in order to use them in other opportunities. You can access to these saved filters from the filters button in the top right corner. When you click that button, a dialog opens, in addition to selecting a saved filter, you will be able to select from a varied list of quick filters, as shown in the image below. Download a Filtered Workspace \u00b6 You can download a csv file of the filtered workspace (or the full workspace if no filters applied). In order to do so, you have to click on the Download Filtered Workspace button located next to the filters button in the top right corner. Context Menu \u00b6 A new feature in Faraday is the Context Menu , which you can access by right-clicking on the Vulns view. Single selection context menu \u00b6 If you have a single vulnerability selected you will access to the single selection context menu. It should be noted that if you don't have any vulnerability selected yet, the vulnerability of the row where you perform the right click will be selected in order to be used by the context menu. This menu allows the user to execute some actions in a faster manner, such as: Filter By Name: creates and executes a filter of the form Name | contains | {name_of_selected_vuln} . Service name: creates and executes a filter of the form Service name | = | {service_name_of_selected_vuln} . Target: creates and executes a filter of the form Target | = | {target_of_selected_vuln} . Date: creates and executes a filter of the form Creation Date | = | {creation_date_of_selected_vuln} . Status: creates and executes a filter of the form Status | = | {status_of_selected_vuln} . Tags: creates and executes a filter for each tag the selected vulnerability has, of the form Tag | = | {tag_of_selected_vuln} . Copy Link: copies to the clipboard the link of the detailed view of the selected vulnerability. Copy Api Call Link: copies to the clipboard the path of the selected vulnerability in order to be managed through Faraday API. Edit: enables the edition of some fields of the selected vulnerability: Name Data Description Resolution References Impact Policy violation Ease of resolution Tag: enables the addition of a created tag to the selected vulnerability and the creation of a new tag. Severity: allows you to select a new severity for the selected vulnerability. Status: allows you to select a new status for the selected vulnerability. Add Comment: allows you to add a comment on the selected vulnerability. Add Evidence: allows you to add an evidence on the selected vulnerability. Create Template: allows you to create a vulnerability template from the selected vulnerability. Delete: deletes the selected vulnerability. Multiple selection context menu \u00b6 If you selected more than one vulnerability, you will access to the multiple selection context menu. It's a shortened version of the regular context menu: Edit: enables the bulk edition of some fields of the selected vulnerabilities: Name Data Description Resolution References Impact Policy violation Confirm/False positive Ease of resolution Tag: enables the addition of a created tag to the selected vulnerabilities and the creation of a new tag. Severity: allows you to select a new severity for the selected vulnerabilities. Status: allows you to select a new status for the selected vulnerabilities. Create Template: allows you to create a vulnerability template from each of the selected vulnerabilities. Bulk Delete: performs a bulk delete of the selected vulnerabilities.","title":"Vulnerability Management"},{"location":"Vulns-v4/#import-scan-reports","text":"You can upload a scan report of your favorite tool to Faraday and have a nice look at your findings through the Vulns View. You can see a list of the tools that Faraday supports by clicking on this link In order to upload a report to Faraday, follow these instructions: Click on the button + Add Vulnerability . Click on the button Import from file and a prompt will be displayed. Click on Browse in order to select the report that you are going to upload, or just drag and drop the file into the box. Once you have selected the report, click on Upload and your file will be uploaded. Refresh the view with the top bar refresh icon.","title":"Import Scan Reports"},{"location":"Vulns-v4/#create-a-vulnerability","text":"To create vulnerabilities manually, you can go to the Vulns View page and click the + Add Vulnerability button and then click on Manual Creation . You should see a dialog similar to this: The image above shows the tab General that allows you to specify the name, description and severity of your vulnerability. Also, you can specify the ease of resolution, an external ID, its impact, a resolution, its policy violations and references. You also have another tabs in order to add more information to your vulnerability: Technical Details : allows you to add the field data to your vulnerability. If you're creating a web vulnerability, you add information about request and response. Custom Fields : allows you to add information to a field that you have created. For more information about Custom Fields, you can check it here . Assets : when you fill at least the three mandatory fields of the General tab (name, description and severity), the Assets tab becomes available. Here you can select from a select box 1 to N targets (in order to create 1 to N vulnerabilities), or type a new target if it's not yet in the list. Evidence : allows you to add an evidence to the vulnerability. It can be a PNG or JPG image. Make sure you select a host (and a service if the vulnerability applies to it), a name and a description. These fields are mandatory to create a vulnerability","title":"Create a Vulnerability"},{"location":"Vulns-v4/#edit-vulnerabilities","text":"You can edit the vulnerabilities that you have created or imported. You have multiple ways to edit them.","title":"Edit Vulnerabilities"},{"location":"Vulns-v4/#from-vuln-preview","text":"You can see a preview of the vulnerability by click on the vuln's name. From here you can edit your vulnerability, and it will be saved automatically. As you can see in the image above, there is a new tab named Comments where you can leave comments and mention other users to notify them about important events in real time. For more information about Comments, you can check it here","title":"From Vuln Preview"},{"location":"Vulns-v4/#edit-button","text":"If you click on the Edit icon, the vulnerability edit mode will open Once you finish updating click on SAVE at the end of the section you are changing.","title":"Edit Button"},{"location":"Vulns-v4/#edit-multiple-vulnerabilities","text":"You can select and edit multiple vulnerabilities with just one click. Next to the edit button, you will find a three dotted button that will show a dropdown with the multiple values that you can edit at once or actions like, Create vulnerability templates (KB)","title":"Edit Multiple Vulnerabilities"},{"location":"Vulns-v4/#delete-vulnerabilities","text":"Select one or more vulnerabilities and click Delete icon","title":"Delete Vulnerabilities"},{"location":"Vulns-v4/#confirmed-vulnerabilities","text":"You can filter your vulnerabilities by confirmed, unconfirmed by clicking on the Flag icon button:","title":"Confirmed Vulnerabilities"},{"location":"Vulns-v4/#tags","text":"Tags allow you to organize your vulnerabilities by letting you make and edit categories: environment, technology, state, language, projects, etc. You can also use Tags for Reports , allowing you to filter which vulnerabilities you want to generate a report for.","title":"Tags"},{"location":"Vulns-v4/#how-to-tag-vulnerabilities","text":"Select the vulnerabilities that you want to tag. Click on the \"Tags\" icon and select if you have a preset tag or Create tag button if you need a new one. If you are going to create one just put a relevant name and a dialogue will be displayed. Now the vulnerability has tags that you can use for filtering, searching or reporting","title":"How to Tag Vulnerabilities"},{"location":"Vulns-v4/#search-and-filter-vulnerabilities","text":"Vulns View allows you to filter vulnerabilities, so you can have a better workflow. You can search or filter your data by specifying a keyword or multiple keywords. Field values are not case-sensitive","title":"Search and Filter Vulnerabilities"},{"location":"Vulns-v4/#how-to-filter","text":"In order to perform a search, first click on the search bar and follow these steps: Select if you want to filter by Vulnerabilities or Assets . Enter the name of the field (e.g. severity ) and select from the list displayed. Select the connector type that you need to perform the wanted filter (these connectors vary according to the field selected). Finally, type your query or select an option from the list displayed, according to the field and connector selected. Repeat steps 2 to 4 if you want to filter by more than one field. Examples: You can also click on blue fields of the vulnerability like Service, Hostnames, Target, Owner, etc. to trigger a search on the specific field","title":"How To Filter"},{"location":"Vulns-v4/#filter-fields","text":"Now, let's take a look at which fields are available for filtering with an example. All of them are searched through the search field Name | = | TCP timestamps Description | contains | Vulnerability testing Severity | = | Medium Target | = | 127.0.0.1 Service name | contains | https Service port | >= | 5000 Ease of Resolution | = | Moderate Status | != | Closed Resolution | contains | Resolution for testing vuln Data | contains | Search and filter Request | contains | json Response | = | OK Method | = | POST Path | = | Vulnerability Path Creator command id | != | 1 Type | = | Vulnerability Web Confirmed | = | True ID | = | 57448 Tag | = | my_tag From the Vulns view you will be able to find the information using the tags parameter For example: tags:\"MY TAG\" as shown in the image below","title":"Filter Fields"},{"location":"Vulns-v4/#saved-filters-and-quick-filters","text":"The filters that you create from the search bar, you can save them in order to use them in other opportunities. You can access to these saved filters from the filters button in the top right corner. When you click that button, a dialog opens, in addition to selecting a saved filter, you will be able to select from a varied list of quick filters, as shown in the image below.","title":"Saved Filters and Quick Filters"},{"location":"Vulns-v4/#download-a-filtered-workspace","text":"You can download a csv file of the filtered workspace (or the full workspace if no filters applied). In order to do so, you have to click on the Download Filtered Workspace button located next to the filters button in the top right corner.","title":"Download a Filtered Workspace"},{"location":"Vulns-v4/#context-menu","text":"A new feature in Faraday is the Context Menu , which you can access by right-clicking on the Vulns view.","title":"Context Menu"},{"location":"Vulns-v4/#single-selection-context-menu","text":"If you have a single vulnerability selected you will access to the single selection context menu. It should be noted that if you don't have any vulnerability selected yet, the vulnerability of the row where you perform the right click will be selected in order to be used by the context menu. This menu allows the user to execute some actions in a faster manner, such as: Filter By Name: creates and executes a filter of the form Name | contains | {name_of_selected_vuln} . Service name: creates and executes a filter of the form Service name | = | {service_name_of_selected_vuln} . Target: creates and executes a filter of the form Target | = | {target_of_selected_vuln} . Date: creates and executes a filter of the form Creation Date | = | {creation_date_of_selected_vuln} . Status: creates and executes a filter of the form Status | = | {status_of_selected_vuln} . Tags: creates and executes a filter for each tag the selected vulnerability has, of the form Tag | = | {tag_of_selected_vuln} . Copy Link: copies to the clipboard the link of the detailed view of the selected vulnerability. Copy Api Call Link: copies to the clipboard the path of the selected vulnerability in order to be managed through Faraday API. Edit: enables the edition of some fields of the selected vulnerability: Name Data Description Resolution References Impact Policy violation Ease of resolution Tag: enables the addition of a created tag to the selected vulnerability and the creation of a new tag. Severity: allows you to select a new severity for the selected vulnerability. Status: allows you to select a new status for the selected vulnerability. Add Comment: allows you to add a comment on the selected vulnerability. Add Evidence: allows you to add an evidence on the selected vulnerability. Create Template: allows you to create a vulnerability template from the selected vulnerability. Delete: deletes the selected vulnerability.","title":"Single selection context menu"},{"location":"Vulns-v4/#multiple-selection-context-menu","text":"If you selected more than one vulnerability, you will access to the multiple selection context menu. It's a shortened version of the regular context menu: Edit: enables the bulk edition of some fields of the selected vulnerabilities: Name Data Description Resolution References Impact Policy violation Confirm/False positive Ease of resolution Tag: enables the addition of a created tag to the selected vulnerabilities and the creation of a new tag. Severity: allows you to select a new severity for the selected vulnerabilities. Status: allows you to select a new status for the selected vulnerabilities. Create Template: allows you to create a vulnerability template from each of the selected vulnerabilities. Bulk Delete: performs a bulk delete of the selected vulnerabilities.","title":"Multiple selection context menu"},{"location":"Workspace-Comparison/","text":"Workspace Comparison (V3 Deprecated) \u00b6 Workspace Comparison This feature lets you easily see and assess the differences between two of your Workspaces. Select the workspaces you would like to compare.","title":"Workspace Comparison **(V3 Deprecated)**"},{"location":"Workspace-Comparison/#workspace-comparison-v3-deprecated","text":"Workspace Comparison This feature lets you easily see and assess the differences between two of your Workspaces. Select the workspaces you would like to compare.","title":"Workspace Comparison (V3 Deprecated)"},{"location":"Workspaces-v4/","text":"Information is organized into various Workspaces . Each Workspace contains a pentest team's assignments and all the intel that is discovered. The workspaces are used to hold the information re-collected from the different tools and/ or commands used in the \"actions\" for each Penetration Test. Each workspace integrates all the results from pentesters from a given project in the Web console allowing you to identify and manage your information in one place. How to Manage Workspaces \u00b6 To manage your workspaces you need to access your Faraday Web UI and click on the Faraday Logo on the left top of the screen and then on Wokspaces A list of workspaces and summary are displayed where you can create, edit or delete them Create a Workspace \u00b6 From the workspaces window click on + Add Workspace button and complete below Workspace Name Start Date/ End Date Description Make Workspace public (all users can see it) Assign Users Edit a Workspace \u00b6 From the workspace window select the workspace and click on Edit icon Delete a Workspace \u00b6 From the workspaces window select the workspace and click on Delete trash icon Read Only Workspaces \u00b6 You can make a workspace READ ONLY from the Workspace View (padlock icon) When the padlock icon is closed, the workspace became READ ONLY Once a workspace is READ ONLY , you can't add/modify/delete Vulnerablities, Hosts or Services. You need click on the padlock (padlock open) to put the Workspace in write mode The amount of Workspaces allowed will depend on your license type, workspaces in READ ONLY state has not limits. Active Workspaces \u00b6 Note: If you click on the green ACTIVE icon of a workspace, it will disapear from the list, basically making it Archived You need to click Show archived to displayed them, click on ACTIVE icon again to work on them","title":"Workspaces"},{"location":"Workspaces-v4/#how-to-manage-workspaces","text":"To manage your workspaces you need to access your Faraday Web UI and click on the Faraday Logo on the left top of the screen and then on Wokspaces A list of workspaces and summary are displayed where you can create, edit or delete them","title":"How to Manage Workspaces"},{"location":"Workspaces-v4/#create-a-workspace","text":"From the workspaces window click on + Add Workspace button and complete below Workspace Name Start Date/ End Date Description Make Workspace public (all users can see it) Assign Users","title":"Create a Workspace"},{"location":"Workspaces-v4/#edit-a-workspace","text":"From the workspace window select the workspace and click on Edit icon","title":"Edit a Workspace"},{"location":"Workspaces-v4/#delete-a-workspace","text":"From the workspaces window select the workspace and click on Delete trash icon","title":"Delete a Workspace"},{"location":"Workspaces-v4/#read-only-workspaces","text":"You can make a workspace READ ONLY from the Workspace View (padlock icon) When the padlock icon is closed, the workspace became READ ONLY Once a workspace is READ ONLY , you can't add/modify/delete Vulnerablities, Hosts or Services. You need click on the padlock (padlock open) to put the Workspace in write mode The amount of Workspaces allowed will depend on your license type, workspaces in READ ONLY state has not limits.","title":"Read Only Workspaces"},{"location":"Workspaces-v4/#active-workspaces","text":"Note: If you click on the green ACTIVE icon of a workspace, it will disapear from the list, basically making it Archived You need to click Show archived to displayed them, click on ACTIVE icon again to work on them","title":"Active Workspaces"},{"location":"Workspaces/","text":"(V3 Deprecated) Information is organized into various Workspaces . Each Workspace contains a pentest team's assignments and all the intel that is discovered. The workspaces are used to hold the information re-collected from the different tools and/ or commands used in the \"actions\" for each Penetration Test. Each workspace integrates all the results from pentesters from a given project in the Web console allowing you to identify and manage your information in one place. How to Manage Workspaces \u00b6 To manage your workspaces you need to access your Faraday Web UI and click on your User Name slider menu on the right top of the screen and then on Wokspaces A list of workspaces and summary are displayed where you can create, edit or delete them Create a Workspace \u00b6 From the workspaces window click on New button and complete below Workspace Name Description Start Date / End Date Make it public (all users can see it) Scope Users Permission Edit a Workspace \u00b6 From the workspace window select the workspace and click on Edit icon Delete a Workspace \u00b6 From the workspaces window select the workspace and click on Delete trash icon Read Only Workspaces \u00b6 You can make a workspace READ ONLY from the Workspace View (padlock icon) When the padlock icon is closed, the workspace became READ ONLY Once a workspace is READ ONLY , you can't add/modify/delete Vulnerablities, Hosts or Services. You need click on the padlock (padlock open) to put the Workspace in write mode The amount of Workspaces allowed will depend on your license type, workspaces in READ ONLY state has not limits. Active Workspaces \u00b6 Note: If you click on the green ACTIVE icon of a workspace, it will disapear from the list, basically making it Archived You need to click Show archived to displayed them, click on ACTIVE icon again to work on them","title":"Workspaces"},{"location":"Workspaces/#how-to-manage-workspaces","text":"To manage your workspaces you need to access your Faraday Web UI and click on your User Name slider menu on the right top of the screen and then on Wokspaces A list of workspaces and summary are displayed where you can create, edit or delete them","title":"How to Manage Workspaces"},{"location":"Workspaces/#create-a-workspace","text":"From the workspaces window click on New button and complete below Workspace Name Description Start Date / End Date Make it public (all users can see it) Scope Users Permission","title":"Create a Workspace"},{"location":"Workspaces/#edit-a-workspace","text":"From the workspace window select the workspace and click on Edit icon","title":"Edit a Workspace"},{"location":"Workspaces/#delete-a-workspace","text":"From the workspaces window select the workspace and click on Delete trash icon","title":"Delete a Workspace"},{"location":"Workspaces/#read-only-workspaces","text":"You can make a workspace READ ONLY from the Workspace View (padlock icon) When the padlock icon is closed, the workspace became READ ONLY Once a workspace is READ ONLY , you can't add/modify/delete Vulnerablities, Hosts or Services. You need click on the padlock (padlock open) to put the Workspace in write mode The amount of Workspaces allowed will depend on your license type, workspaces in READ ONLY state has not limits.","title":"Read Only Workspaces"},{"location":"Workspaces/#active-workspaces","text":"Note: If you click on the green ACTIVE icon of a workspace, it will disapear from the list, basically making it Archived You need to click Show archived to displayed them, click on ACTIVE icon again to work on them","title":"Active Workspaces"},{"location":"agents-v4/","text":"Easier integrations with Faraday Agents \u00b6 Integrating systems is an elusive but mandatory job in any software product's life. Developers have to deal with languages they don't know, undocumented APIs or new paradigms. This leads to the fact that many product teams decide not to open the possibility to integrate to them. In Faraday\u2019s case, we are aware that integrations with other security tools are a critical part of our product. However, we\u2019ve realized that our existing Plugin system wasn\u2019t as easy as we expected to develop some integrations: it required some level of interactivity (either running a command from the console or importing a report), so it was hard to use on a periodic basis. It also forced integration developers to use our Python API, even when the tool to integrate with wasn\u2019t programmed in Python, making it harder for the developer. To solve this problem, we decided to implement the Agents feature in the already released Faraday v3.9. Since we expect this to be a core feature of our product, it will be available both in Community and commercial versions!. Architecture \u00b6 Overview of the Agents Feature \u00b6 An Agent represents a process running continuously in a machine (not necessary the same running the Faraday Server). When a user decides to run an Agent (typically done through the Faraday Web UI), it will execute a code and send data back to a Workspace. In the image above, you can see a workspace with many custom agents. They're in charge of finding hosts in the network with nmap, finding subdomains with sublist3r, and provision data from our Heroku-hosted services. In addition to running the agents manually with their \"Run\" button, you can also schedule them to run periodically. This can be done from the web if you have our Corporate version: Now you can Run an Agent for a single use! or with simple cronjobs if you are using the Community or Paid version. Agents technical details \u00b6 To make integrations with Faraday as easy as possible, we developed a project we called Faraday Agent Dispatcher that is in charge of handling the communication between the Faraday Server and your own agents. The only thing you\u2019ll need to build your own integrations is a script (we call it an Executor) that prints to standard output all the data you want to send to Faraday (hosts info, vulnerabilities, etc.) encoded in JSON. There is no need to use complex APIs or communication methods, as all of this is abstracted by the Dispatcher. You just need to print JSON to standard out, and the Dispatcher will handle the rest! If you want to know a little bit about the idea behind build this project, one of our developers explain a little about it. This also means that you could use virtually any programming language you want to build your integrations, as long as they support printing data to standard output. We've already made agents in Python, Bash, and even a Brainfuckone! We have some official executors, which are ready to go with minimum configuration. If you want to develop and run your own executor, you can configure a custom one! How to start using agents \u00b6 Lets try with an example with Nmap to check the Faraday Agents capabilities both as a custom executor, and run an official one. First of all you must install the Faraday Dispatcher inside the server you want to run the Agent on. You can do so running one of the following commands: $ git clone https://github.com/infobyte/faraday_agent_dispatcher $ git clone https://github.com/infobyte/faraday_agent_parameter__types $ pip3 install faraday_agent_dispatcher After this, you can setup the agent through the Web UI by clicking the tab Create Agent , a windows like this will be displayed Once you choose your desired configuration, you'll be able to select the tools that need to be run After selecting the tools, you'll be able to download the dispatcher.yaml Please follow the instruccions depending on what you are working with, in this case we are using Python, so in order to make this work the dispatcher.yaml must be placed in the following folder $HOME /.faraday/config Now you would be able to run the agent in your server If you have done this correctly, the new agent will be displayed in the Agent view Or you can just do it in the manual way running the configuration wizard: $ faraday-dispatcher config-wizard Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : A Section: server host [ 127 .0.0.1 ] : server.faradaysec.com ssl [ True ] : ssl_port [ 443 ] : ssl_cert [] : Trying to save with empty value workspace [ workspace ] : Section: tokens registration [ ACorrectTokenHas25CharLen ] : ImalA8Cg1L6Z5Qbx2u9CFAsob Section: agent agent_name [ agent ] : nmap Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : E The actual configured executors are: [] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Name: nmap Is a custom executor? ( Y, N ) [ N ] : Y Command to execute [ exit 1 ] : python3 /home/faraday/faraday_agent_dispatcher/static/executors/official/nmap.py Max data sent to server [ 65536 ] : The actual nmap executor 's environment variables are: [] Do you want to [A]dd, [M]odify or [D]elete an environment variable? Do you want to [Q]uit? (A, M, D, Q) [Q]: The actual nmap executor' s arguments are: [] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an argument? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Argument name: port_list Is mandatory? ( Y, N ) : Y The actual nmap executor 's arguments are: [' port_list '] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to [Q]uit? (A, M, D, Q) [Q]: A Argument name: target Is mandatory? (Y, N): Y The actual nmap executor' s arguments are: [ 'port_list' , 'target' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an argument? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : Q The actual configured executors are: [ 'nmap' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Name: nmapOfficial Is a custom executor? ( Y, N ) [ N ] : The executors are: 1 : wpscan.py 2 : sublist3r.sh 3 : nmap.py 4 : nikto2.py 5 : nessus.py +: Next page Q: Don 't choose Choose one: 3 Max data sent to server [65536]: The actual configured executors are: [' nmap ', ' nmapOfficial ' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : All the information you added with the configuration wizard should appear on a new dispatcher.ini file at your /.faraday/config/ directory: $ cat $HOME /.faraday/config/dispatcher.yaml [ server ] host = server.faradaysec.com ssl = True api_port = 443 websocket_port = 443 ssl_cert = workspace = agent_workspaces [ tokens ] registration = ImalA8Cg1L6Z5Qbx2u9CFAsob [ agent ] agent_name = nmap executors = nmap,nmapOfficial [ nmap ] cmd = python3 /Users/famato/dev/faraday_agent_dispatcher/contrib/nmap.py max_size = 65536 [ nmap_params ] port_list = True target = True [ nmap_varenvs ] [ nmapOfficial ] max_size = 65536 repo_executor = nmap.py [ nmapOfficial_params ] port_list = True target = True [ nmapOfficial_varenvs ] Now you have to run the dispatcher to register the Agent on your Faraday Server: $ faraday-dispatcher run 2020 -05-11 21 :14:01,061 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:91 - register ()] token_registration_url: https://server.faradaysec.com:443/_api/v2/ws/agent_workspaces/agent_registration/ 2020 -05-11 21 :14:01,977 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:115 - register ()] Registered successfully 2020 -05-11 21 :14:02,639 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:150 - connect ()] Connection to Faraday server succeeded After this, you\u2019ll see your new Agent on the Web UI. The last step is that you just run the nmap Agent: And the Dispatcher log will give you details about this action: 2022 -02-03 15 :59:29,676 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:153 - register ()] token_registration_url: https://pro-staging.app3.faradaysec.com:443/_api/v3/agent_registration 2022 -02-03 15 :59:30,479 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:192 - register ()] Registered successfully 2022 -02-03 15 :59:31,434 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:235 - connect ()] Connection to Faraday server succeeded 2022 -02-03 16 :10:11,385 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:256 - run_once ()] Parsing data: { \"execution_id\" : 9 , \"agent_id\" : 3 , \"workspace\" : \"my_workspace\" , \"action\" : \"RUN\" , \"executor\" : \"nmap\" , \"args\" : { \"TARGET\" : \"127.0.0.1\" }} 2022 -02-03 16 :10:11,419 - faraday_agent_dispatcher - INFO { MainThread } [ metadata_utils.py:59 - check_commands ()] Dependency check ended. Ready to go 2022 -02-03 16 :10:11,419 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:415 - run_once ()] Running nmap executor { \"hosts\" : [{ \"ip\" : \"127.0.0.1\" , \"os\" : \"unknown\" , \"hostnames\" : [ \"localhost\" ] , \"description\" : \"\" , \"mac\" : \"00:00:00:00:00:00\" , \"credentials\" : [] , \"services\" : [] , \"vulnerabilities\" : [] , \"tags\" : []}] , \"command\" : { \"tool\" : \"Nmap\" , \"command\" : \"Nmap\" , \"params\" : \"\" , \"user\" : \"\" , \"hostname\" : \"\" , \"start_date\" : \"2022-02-03T19:10:11.665787\" , \"duration\" : 46861 , \"import_source\" : \"report\" }} stderr sent empty data, 2022 -02-03 16 :10:13,246 - faraday_agent_dispatcher - INFO { MainThread } [ executor_helper.py:118 - processing ()] Data sent to bulk create 2022 -02-03 16 :10:14,021 - faraday_agent_dispatcher - INFO { MainThread } [ executor_helper.py:148 - end_f ()] Data sent to bulk create stdout sent empty data, 2022 -02-03 16 :10:14,021 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:456 - run_once ()] Executor nmap finished successfully Right after the Agent executes these actions, return to your Workspace and you can review all the information that was found. Now you are ready to deploy your own Faraday Agents through your network! The Dispatcher README file has more detailed documentation to run and build your Agents. Also, we recommend you to check our examples and official executors to get an idea of what a custom integration looks like. What's Next \u00b6 We will continue to improve Agents\u2019 features, usability, and adding new executors into the Dispatcher repository. In the next few releases we would also like to give some Agents read access to their Workspace, so they can benefit from the existing data in order to find more valuable information. We hope you enjoy this feature and find it useful!","title":"Agents"},{"location":"agents-v4/#easier-integrations-with-faraday-agents","text":"Integrating systems is an elusive but mandatory job in any software product's life. Developers have to deal with languages they don't know, undocumented APIs or new paradigms. This leads to the fact that many product teams decide not to open the possibility to integrate to them. In Faraday\u2019s case, we are aware that integrations with other security tools are a critical part of our product. However, we\u2019ve realized that our existing Plugin system wasn\u2019t as easy as we expected to develop some integrations: it required some level of interactivity (either running a command from the console or importing a report), so it was hard to use on a periodic basis. It also forced integration developers to use our Python API, even when the tool to integrate with wasn\u2019t programmed in Python, making it harder for the developer. To solve this problem, we decided to implement the Agents feature in the already released Faraday v3.9. Since we expect this to be a core feature of our product, it will be available both in Community and commercial versions!.","title":"Easier integrations with Faraday Agents"},{"location":"agents-v4/#architecture","text":"","title":"Architecture"},{"location":"agents-v4/#overview-of-the-agents-feature","text":"An Agent represents a process running continuously in a machine (not necessary the same running the Faraday Server). When a user decides to run an Agent (typically done through the Faraday Web UI), it will execute a code and send data back to a Workspace. In the image above, you can see a workspace with many custom agents. They're in charge of finding hosts in the network with nmap, finding subdomains with sublist3r, and provision data from our Heroku-hosted services. In addition to running the agents manually with their \"Run\" button, you can also schedule them to run periodically. This can be done from the web if you have our Corporate version: Now you can Run an Agent for a single use! or with simple cronjobs if you are using the Community or Paid version.","title":"Overview of the Agents Feature"},{"location":"agents-v4/#agents-technical-details","text":"To make integrations with Faraday as easy as possible, we developed a project we called Faraday Agent Dispatcher that is in charge of handling the communication between the Faraday Server and your own agents. The only thing you\u2019ll need to build your own integrations is a script (we call it an Executor) that prints to standard output all the data you want to send to Faraday (hosts info, vulnerabilities, etc.) encoded in JSON. There is no need to use complex APIs or communication methods, as all of this is abstracted by the Dispatcher. You just need to print JSON to standard out, and the Dispatcher will handle the rest! If you want to know a little bit about the idea behind build this project, one of our developers explain a little about it. This also means that you could use virtually any programming language you want to build your integrations, as long as they support printing data to standard output. We've already made agents in Python, Bash, and even a Brainfuckone! We have some official executors, which are ready to go with minimum configuration. If you want to develop and run your own executor, you can configure a custom one!","title":"Agents technical details"},{"location":"agents-v4/#how-to-start-using-agents","text":"Lets try with an example with Nmap to check the Faraday Agents capabilities both as a custom executor, and run an official one. First of all you must install the Faraday Dispatcher inside the server you want to run the Agent on. You can do so running one of the following commands: $ git clone https://github.com/infobyte/faraday_agent_dispatcher $ git clone https://github.com/infobyte/faraday_agent_parameter__types $ pip3 install faraday_agent_dispatcher After this, you can setup the agent through the Web UI by clicking the tab Create Agent , a windows like this will be displayed Once you choose your desired configuration, you'll be able to select the tools that need to be run After selecting the tools, you'll be able to download the dispatcher.yaml Please follow the instruccions depending on what you are working with, in this case we are using Python, so in order to make this work the dispatcher.yaml must be placed in the following folder $HOME /.faraday/config Now you would be able to run the agent in your server If you have done this correctly, the new agent will be displayed in the Agent view Or you can just do it in the manual way running the configuration wizard: $ faraday-dispatcher config-wizard Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : A Section: server host [ 127 .0.0.1 ] : server.faradaysec.com ssl [ True ] : ssl_port [ 443 ] : ssl_cert [] : Trying to save with empty value workspace [ workspace ] : Section: tokens registration [ ACorrectTokenHas25CharLen ] : ImalA8Cg1L6Z5Qbx2u9CFAsob Section: agent agent_name [ agent ] : nmap Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : E The actual configured executors are: [] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Name: nmap Is a custom executor? ( Y, N ) [ N ] : Y Command to execute [ exit 1 ] : python3 /home/faraday/faraday_agent_dispatcher/static/executors/official/nmap.py Max data sent to server [ 65536 ] : The actual nmap executor 's environment variables are: [] Do you want to [A]dd, [M]odify or [D]elete an environment variable? Do you want to [Q]uit? (A, M, D, Q) [Q]: The actual nmap executor' s arguments are: [] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an argument? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Argument name: port_list Is mandatory? ( Y, N ) : Y The actual nmap executor 's arguments are: [' port_list '] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to [Q]uit? (A, M, D, Q) [Q]: A Argument name: target Is mandatory? (Y, N): Y The actual nmap executor' s arguments are: [ 'port_list' , 'target' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an argument? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : Q The actual configured executors are: [ 'nmap' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Name: nmapOfficial Is a custom executor? ( Y, N ) [ N ] : The executors are: 1 : wpscan.py 2 : sublist3r.sh 3 : nmap.py 4 : nikto2.py 5 : nessus.py +: Next page Q: Don 't choose Choose one: 3 Max data sent to server [65536]: The actual configured executors are: [' nmap ', ' nmapOfficial ' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : All the information you added with the configuration wizard should appear on a new dispatcher.ini file at your /.faraday/config/ directory: $ cat $HOME /.faraday/config/dispatcher.yaml [ server ] host = server.faradaysec.com ssl = True api_port = 443 websocket_port = 443 ssl_cert = workspace = agent_workspaces [ tokens ] registration = ImalA8Cg1L6Z5Qbx2u9CFAsob [ agent ] agent_name = nmap executors = nmap,nmapOfficial [ nmap ] cmd = python3 /Users/famato/dev/faraday_agent_dispatcher/contrib/nmap.py max_size = 65536 [ nmap_params ] port_list = True target = True [ nmap_varenvs ] [ nmapOfficial ] max_size = 65536 repo_executor = nmap.py [ nmapOfficial_params ] port_list = True target = True [ nmapOfficial_varenvs ] Now you have to run the dispatcher to register the Agent on your Faraday Server: $ faraday-dispatcher run 2020 -05-11 21 :14:01,061 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:91 - register ()] token_registration_url: https://server.faradaysec.com:443/_api/v2/ws/agent_workspaces/agent_registration/ 2020 -05-11 21 :14:01,977 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:115 - register ()] Registered successfully 2020 -05-11 21 :14:02,639 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:150 - connect ()] Connection to Faraday server succeeded After this, you\u2019ll see your new Agent on the Web UI. The last step is that you just run the nmap Agent: And the Dispatcher log will give you details about this action: 2022 -02-03 15 :59:29,676 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:153 - register ()] token_registration_url: https://pro-staging.app3.faradaysec.com:443/_api/v3/agent_registration 2022 -02-03 15 :59:30,479 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:192 - register ()] Registered successfully 2022 -02-03 15 :59:31,434 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:235 - connect ()] Connection to Faraday server succeeded 2022 -02-03 16 :10:11,385 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:256 - run_once ()] Parsing data: { \"execution_id\" : 9 , \"agent_id\" : 3 , \"workspace\" : \"my_workspace\" , \"action\" : \"RUN\" , \"executor\" : \"nmap\" , \"args\" : { \"TARGET\" : \"127.0.0.1\" }} 2022 -02-03 16 :10:11,419 - faraday_agent_dispatcher - INFO { MainThread } [ metadata_utils.py:59 - check_commands ()] Dependency check ended. Ready to go 2022 -02-03 16 :10:11,419 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:415 - run_once ()] Running nmap executor { \"hosts\" : [{ \"ip\" : \"127.0.0.1\" , \"os\" : \"unknown\" , \"hostnames\" : [ \"localhost\" ] , \"description\" : \"\" , \"mac\" : \"00:00:00:00:00:00\" , \"credentials\" : [] , \"services\" : [] , \"vulnerabilities\" : [] , \"tags\" : []}] , \"command\" : { \"tool\" : \"Nmap\" , \"command\" : \"Nmap\" , \"params\" : \"\" , \"user\" : \"\" , \"hostname\" : \"\" , \"start_date\" : \"2022-02-03T19:10:11.665787\" , \"duration\" : 46861 , \"import_source\" : \"report\" }} stderr sent empty data, 2022 -02-03 16 :10:13,246 - faraday_agent_dispatcher - INFO { MainThread } [ executor_helper.py:118 - processing ()] Data sent to bulk create 2022 -02-03 16 :10:14,021 - faraday_agent_dispatcher - INFO { MainThread } [ executor_helper.py:148 - end_f ()] Data sent to bulk create stdout sent empty data, 2022 -02-03 16 :10:14,021 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:456 - run_once ()] Executor nmap finished successfully Right after the Agent executes these actions, return to your Workspace and you can review all the information that was found. Now you are ready to deploy your own Faraday Agents through your network! The Dispatcher README file has more detailed documentation to run and build your Agents. Also, we recommend you to check our examples and official executors to get an idea of what a custom integration looks like.","title":"How to start using agents"},{"location":"agents-v4/#whats-next","text":"We will continue to improve Agents\u2019 features, usability, and adding new executors into the Dispatcher repository. In the next few releases we would also like to give some Agents read access to their Workspace, so they can benefit from the existing data in order to find more valuable information. We hope you enjoy this feature and find it useful!","title":"What's Next"},{"location":"agents/","text":"Easier integrations with Faraday Agents (V3 Deprecated) \u00b6 Integrating systems is an elusive but mandatory job in any software product's life. Developers have to deal with languages they don't know, undocumented APIs or new paradigms. This leads to the fact that many product teams decide not to open the possibility to integrate to them. In Faraday\u2019s case, we are aware that integrations with other security tools are a critical part of our product. However, we\u2019ve realized that our existing Plugin system wasn\u2019t as easy as we expected to develop some integrations: it required some level of interactivity (either running a command from the console or importing a report), so it was hard to use on a periodic basis. It also forced integration developers to use our Python API, even when the tool to integrate with wasn\u2019t programmed in Python, making it harder for the developer. To solve this problem, we decided to implement the Agents feature in the already released Faraday v3.9. Since we expect this to be a core feature of our product, it will be available both in Community and commercial versions!. Architecture \u00b6 Overview of the Agents Feature \u00b6 An Agent represents a process running continuously in a machine (not necessary the same running the Faraday Server). When a user decides to run an Agent (typically done through the Faraday Web UI), it will execute a code and send data back to a Workspace. In the image above, you can see a workspace with many custom agents. They're in charge of finding hosts in the network with nmap, finding subdomains with sublist3r, and provision data from our Heroku-hosted services. In addition to running the agents manually with their \"Run\" button, you can also schedule them to run periodically. This can be done from the web if you have our Corporate version: Now you can Run an Agent for a single use! or with simple cronjobs if you are using the Community or Paid version. Agents technical details \u00b6 To make integrations with Faraday as easy as possible, we developed a project we called Faraday Agent Dispatcher that is in charge of handling the communication between the Faraday Server and your own agents. The only thing you\u2019ll need to build your own integrations is a script (we call it an Executor) that prints to standard output all the data you want to send to Faraday (hosts info, vulnerabilities, etc.) encoded in JSON. There is no need to use complex APIs or communication methods, as all of this is abstracted by the Dispatcher. You just need to print JSON to standard out, and the Dispatcher will handle the rest! If you want to know a little bit about the idea behind build this project, one of our developers explain a little about it. This also means that you could use virtually any programming language you want to build your integrations, as long as they support printing data to standard output. We've already made agents in Python, Bash, and even a Brainfuckone! We have some official executors, which are ready to go with minimum configuration. If you want to develop and run your own executor, you can configure a custom one! How to start using agents \u00b6 Lets try with an example with Nmap to check the Faraday Agents\u2019 capabilities both as a custom executor, and run an official one. First of all you have to get your Agent\u2019s token. On your Web UI go to Settings > Agents. Your token is: ImalA8Cg1L6Z5Qbx2u9CFAsob Now you must install the Faraday Dispatcher inside the server you want to run the Agent on. You can do so running one of the following commands: $ git clone https://github.com/infobyte/faraday_agent_dispatcher $ git clone https://github.com/infobyte/faraday_agent_parameter__types $ pip3 install faraday_agent_dispatcher After this, you need to run the configuration wizard: $ faraday-dispatcher config-wizard Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : A Section: server host [ 127 .0.0.1 ] : server.faradaysec.com ssl [ True ] : ssl_port [ 443 ] : ssl_cert [] : Trying to save with empty value workspace [ workspace ] : Section: tokens registration [ ACorrectTokenHas25CharLen ] : ImalA8Cg1L6Z5Qbx2u9CFAsob Section: agent agent_name [ agent ] : nmap Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : E The actual configured executors are: [] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Name: nmap Is a custom executor? ( Y, N ) [ N ] : Y Command to execute [ exit 1 ] : python3 /home/faraday/faraday_agent_dispatcher/static/executors/official/nmap.py Max data sent to server [ 65536 ] : The actual nmap executor 's environment variables are: [] Do you want to [A]dd, [M]odify or [D]elete an environment variable? Do you want to [Q]uit? (A, M, D, Q) [Q]: The actual nmap executor' s arguments are: [] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an argument? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Argument name: port_list Is mandatory? ( Y, N ) : Y The actual nmap executor 's arguments are: [' port_list '] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to [Q]uit? (A, M, D, Q) [Q]: A Argument name: target Is mandatory? (Y, N): Y The actual nmap executor' s arguments are: [ 'port_list' , 'target' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an argument? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : Q The actual configured executors are: [ 'nmap' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Name: nmapOfficial Is a custom executor? ( Y, N ) [ N ] : The executors are: 1 : wpscan.py 2 : sublist3r.sh 3 : nmap.py 4 : nikto2.py 5 : nessus.py +: Next page Q: Don 't choose Choose one: 3 Max data sent to server [65536]: The actual configured executors are: [' nmap ', ' nmapOfficial ' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : All the information you added with the configuration wizard should appear on a new dispatcher.ini file at your /.faraday/config/ directory: $ cat $HOME /.faraday/config/dispatcher.ini [ server ] host = server.faradaysec.com ssl = True api_port = 443 websocket_port = 443 ssl_cert = workspace = agent_workspaces [ tokens ] registration = ImalA8Cg1L6Z5Qbx2u9CFAsob [ agent ] agent_name = nmap executors = nmap,nmapOfficial [ nmap ] cmd = python3 /Users/famato/dev/faraday_agent_dispatcher/contrib/nmap.py max_size = 65536 [ nmap_params ] port_list = True target = True [ nmap_varenvs ] [ nmapOfficial ] max_size = 65536 repo_executor = nmap.py [ nmapOfficial_params ] port_list = True target = True [ nmapOfficial_varenvs ] Now you have to run the dispatcher to register the Agent on your Faraday Server: $ faraday-dispatcher run 2020 -05-11 21 :14:01,061 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:91 - register ()] token_registration_url: https://server.faradaysec.com:443/_api/v2/ws/agent_workspaces/agent_registration/ 2020 -05-11 21 :14:01,977 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:115 - register ()] Registered successfully 2020 -05-11 21 :14:02,639 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:150 - connect ()] Connection to Faraday server succeeded After this, you\u2019ll see your new Agent on the Web UI: The last step is that you just run the nmap Agent: And the Dispatcher log will give you details about this action: 2020 -05-11 21 :16:33,691 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:260 - run_once ()] Running nmap executor { \"hosts\" : [{ \"ip\" : \"127.0.0.1\" , \"os\" : \"unknown\" , \"hostnames\" : [ \"localhost\" ] , \"description\" : \"\" , \"mac\" : \"00:00:00:00:00:00\" , \"credentials\" : [] , \"services\" : [{ \"name\" : \"http\" , \"protocol\" : \"tcp\" , \"port\" : 80 , \"status\" : \"open\" , \"version\" : \"\" , \"description\" : \"http\" , \"credentials\" : [] , \"vulnerabilities\" : []} , { \"name\" : \"https\" , \"protocol\" : \"tcp\" , \"port\" : 443 , \"status\" : \"open\" , \"version\" : \"\" , \"description\" : \"https\" , \"credentials\" : [] , \"vulnerabilities\" : []}] , \"vulnerabilities\" : []}] , \"command\" : { \"tool\" : \"Nmap\" , \"command\" : \"Nmap\" , \"params\" : \"\" , \"user\" : \"\" , \"hostname\" : \"\" , \"start_date\" : \"2020-05-11T21:16:33.867017\" , \"duration\" : 1029 , \"import_source\" : \"report\" }} stderr sent empty data, 2020 -05-11 21 :16:34,596 - faraday_agent_dispatcher - INFO { MainThread } [ executor_helper.py:97 - processing ()] Data sent to bulk create stdout sent empty data, 2020 -05-11 21 :16:34,596 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:281 - run_once ()] Executor nmap finished successfully Right after the Agent executes these actions, return to your Workspace and you can review all the information that was found. Now you are ready to deploy your own Faraday Agents through your network! The Dispatcher README file has more detailed documentation to run and build your Agents. Also, we recommend you to check our examples and official executors to get an idea of what a custom integration looks like. What's Next \u00b6 We will continue to improve Agents\u2019 features, usability, and adding new executors into the Dispatcher repository. In the next few releases we would also like to give some Agents read access to their Workspace, so they can benefit from the existing data in order to find more valuable information. We hope you enjoy this feature and find it useful!","title":"Agents"},{"location":"agents/#easier-integrations-with-faraday-agents-v3-deprecated","text":"Integrating systems is an elusive but mandatory job in any software product's life. Developers have to deal with languages they don't know, undocumented APIs or new paradigms. This leads to the fact that many product teams decide not to open the possibility to integrate to them. In Faraday\u2019s case, we are aware that integrations with other security tools are a critical part of our product. However, we\u2019ve realized that our existing Plugin system wasn\u2019t as easy as we expected to develop some integrations: it required some level of interactivity (either running a command from the console or importing a report), so it was hard to use on a periodic basis. It also forced integration developers to use our Python API, even when the tool to integrate with wasn\u2019t programmed in Python, making it harder for the developer. To solve this problem, we decided to implement the Agents feature in the already released Faraday v3.9. Since we expect this to be a core feature of our product, it will be available both in Community and commercial versions!.","title":"Easier integrations with Faraday Agents (V3 Deprecated)"},{"location":"agents/#architecture","text":"","title":"Architecture"},{"location":"agents/#overview-of-the-agents-feature","text":"An Agent represents a process running continuously in a machine (not necessary the same running the Faraday Server). When a user decides to run an Agent (typically done through the Faraday Web UI), it will execute a code and send data back to a Workspace. In the image above, you can see a workspace with many custom agents. They're in charge of finding hosts in the network with nmap, finding subdomains with sublist3r, and provision data from our Heroku-hosted services. In addition to running the agents manually with their \"Run\" button, you can also schedule them to run periodically. This can be done from the web if you have our Corporate version: Now you can Run an Agent for a single use! or with simple cronjobs if you are using the Community or Paid version.","title":"Overview of the Agents Feature"},{"location":"agents/#agents-technical-details","text":"To make integrations with Faraday as easy as possible, we developed a project we called Faraday Agent Dispatcher that is in charge of handling the communication between the Faraday Server and your own agents. The only thing you\u2019ll need to build your own integrations is a script (we call it an Executor) that prints to standard output all the data you want to send to Faraday (hosts info, vulnerabilities, etc.) encoded in JSON. There is no need to use complex APIs or communication methods, as all of this is abstracted by the Dispatcher. You just need to print JSON to standard out, and the Dispatcher will handle the rest! If you want to know a little bit about the idea behind build this project, one of our developers explain a little about it. This also means that you could use virtually any programming language you want to build your integrations, as long as they support printing data to standard output. We've already made agents in Python, Bash, and even a Brainfuckone! We have some official executors, which are ready to go with minimum configuration. If you want to develop and run your own executor, you can configure a custom one!","title":"Agents technical details"},{"location":"agents/#how-to-start-using-agents","text":"Lets try with an example with Nmap to check the Faraday Agents\u2019 capabilities both as a custom executor, and run an official one. First of all you have to get your Agent\u2019s token. On your Web UI go to Settings > Agents. Your token is: ImalA8Cg1L6Z5Qbx2u9CFAsob Now you must install the Faraday Dispatcher inside the server you want to run the Agent on. You can do so running one of the following commands: $ git clone https://github.com/infobyte/faraday_agent_dispatcher $ git clone https://github.com/infobyte/faraday_agent_parameter__types $ pip3 install faraday_agent_dispatcher After this, you need to run the configuration wizard: $ faraday-dispatcher config-wizard Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : A Section: server host [ 127 .0.0.1 ] : server.faradaysec.com ssl [ True ] : ssl_port [ 443 ] : ssl_cert [] : Trying to save with empty value workspace [ workspace ] : Section: tokens registration [ ACorrectTokenHas25CharLen ] : ImalA8Cg1L6Z5Qbx2u9CFAsob Section: agent agent_name [ agent ] : nmap Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : E The actual configured executors are: [] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Name: nmap Is a custom executor? ( Y, N ) [ N ] : Y Command to execute [ exit 1 ] : python3 /home/faraday/faraday_agent_dispatcher/static/executors/official/nmap.py Max data sent to server [ 65536 ] : The actual nmap executor 's environment variables are: [] Do you want to [A]dd, [M]odify or [D]elete an environment variable? Do you want to [Q]uit? (A, M, D, Q) [Q]: The actual nmap executor' s arguments are: [] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an argument? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Argument name: port_list Is mandatory? ( Y, N ) : Y The actual nmap executor 's arguments are: [' port_list '] Do you want to [A]dd, [M]odify or [D]elete an argument? Do you want to [Q]uit? (A, M, D, Q) [Q]: A Argument name: target Is mandatory? (Y, N): Y The actual nmap executor' s arguments are: [ 'port_list' , 'target' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an argument? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : Q The actual configured executors are: [ 'nmap' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : A Name: nmapOfficial Is a custom executor? ( Y, N ) [ N ] : The executors are: 1 : wpscan.py 2 : sublist3r.sh 3 : nmap.py 4 : nikto2.py 5 : nessus.py +: Next page Q: Don 't choose Choose one: 3 Max data sent to server [65536]: The actual configured executors are: [' nmap ', ' nmapOfficial ' ] Do you want to [ A ] dd, [ M ] odify or [ D ] elete an executor? Do you want to [ Q ] uit? ( A, M, D, Q ) [ Q ] : Do you want to edit the [ A ] gent or the [ E ] xecutors? Do you want to [ Q ] uit? ( A, E, Q ) [ Q ] : All the information you added with the configuration wizard should appear on a new dispatcher.ini file at your /.faraday/config/ directory: $ cat $HOME /.faraday/config/dispatcher.ini [ server ] host = server.faradaysec.com ssl = True api_port = 443 websocket_port = 443 ssl_cert = workspace = agent_workspaces [ tokens ] registration = ImalA8Cg1L6Z5Qbx2u9CFAsob [ agent ] agent_name = nmap executors = nmap,nmapOfficial [ nmap ] cmd = python3 /Users/famato/dev/faraday_agent_dispatcher/contrib/nmap.py max_size = 65536 [ nmap_params ] port_list = True target = True [ nmap_varenvs ] [ nmapOfficial ] max_size = 65536 repo_executor = nmap.py [ nmapOfficial_params ] port_list = True target = True [ nmapOfficial_varenvs ] Now you have to run the dispatcher to register the Agent on your Faraday Server: $ faraday-dispatcher run 2020 -05-11 21 :14:01,061 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:91 - register ()] token_registration_url: https://server.faradaysec.com:443/_api/v2/ws/agent_workspaces/agent_registration/ 2020 -05-11 21 :14:01,977 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:115 - register ()] Registered successfully 2020 -05-11 21 :14:02,639 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:150 - connect ()] Connection to Faraday server succeeded After this, you\u2019ll see your new Agent on the Web UI: The last step is that you just run the nmap Agent: And the Dispatcher log will give you details about this action: 2020 -05-11 21 :16:33,691 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:260 - run_once ()] Running nmap executor { \"hosts\" : [{ \"ip\" : \"127.0.0.1\" , \"os\" : \"unknown\" , \"hostnames\" : [ \"localhost\" ] , \"description\" : \"\" , \"mac\" : \"00:00:00:00:00:00\" , \"credentials\" : [] , \"services\" : [{ \"name\" : \"http\" , \"protocol\" : \"tcp\" , \"port\" : 80 , \"status\" : \"open\" , \"version\" : \"\" , \"description\" : \"http\" , \"credentials\" : [] , \"vulnerabilities\" : []} , { \"name\" : \"https\" , \"protocol\" : \"tcp\" , \"port\" : 443 , \"status\" : \"open\" , \"version\" : \"\" , \"description\" : \"https\" , \"credentials\" : [] , \"vulnerabilities\" : []}] , \"vulnerabilities\" : []}] , \"command\" : { \"tool\" : \"Nmap\" , \"command\" : \"Nmap\" , \"params\" : \"\" , \"user\" : \"\" , \"hostname\" : \"\" , \"start_date\" : \"2020-05-11T21:16:33.867017\" , \"duration\" : 1029 , \"import_source\" : \"report\" }} stderr sent empty data, 2020 -05-11 21 :16:34,596 - faraday_agent_dispatcher - INFO { MainThread } [ executor_helper.py:97 - processing ()] Data sent to bulk create stdout sent empty data, 2020 -05-11 21 :16:34,596 - faraday_agent_dispatcher - INFO { MainThread } [ dispatcher.py:281 - run_once ()] Executor nmap finished successfully Right after the Agent executes these actions, return to your Workspace and you can review all the information that was found. Now you are ready to deploy your own Faraday Agents through your network! The Dispatcher README file has more detailed documentation to run and build your Agents. Also, we recommend you to check our examples and official executors to get an idea of what a custom integration looks like.","title":"How to start using agents"},{"location":"agents/#whats-next","text":"We will continue to improve Agents\u2019 features, usability, and adding new executors into the Dispatcher repository. In the next few releases we would also like to give some Agents read access to their Workspace, so they can benefit from the existing data in order to find more valuable information. We hope you enjoy this feature and find it useful!","title":"What's Next"},{"location":"beef/","text":"This plugin can be set from Faraday's Plugin Configuration, where the information of the BeEF's server and RESTful AuthKey: [AuthKey] [Host] By default this plugin is disabled, change the enable boolean in order to use it The information required for connecting to BeEF is generated when you start it:","title":"Beef"},{"location":"faraday-cli/","text":"Faraday CLI \u00b6 Use Faraday directly from your favorite terminal. faraday-cli is the official client that make automating your security workflows, easier. Check our documentation to get more information.","title":"Faraday cli"},{"location":"faraday-cli/#faraday-cli","text":"Use Faraday directly from your favorite terminal. faraday-cli is the official client that make automating your security workflows, easier. Check our documentation to get more information.","title":"Faraday CLI"},{"location":"faraday-dispatcher-v4/","text":"Faraday Dispatcher \u00b6 Faraday Agents Dispatcher helps user develop integrations with Faraday written in any language. Integrating systems is an elusive but mandatory job in any software product's life. Developers have to deal with languages they don't know, undocumented APIs or new paradigms. This leads to the fact that many product teams decide not to open the possibility to integrate to them. The following documentation will allow the users to integrate using agents with other tools. Documentation \u00b6 For more info on how to use it, check our [documentation][doc] Doc API","title":"Faraday Dispatcher"},{"location":"faraday-dispatcher-v4/#faraday-dispatcher","text":"Faraday Agents Dispatcher helps user develop integrations with Faraday written in any language. Integrating systems is an elusive but mandatory job in any software product's life. Developers have to deal with languages they don't know, undocumented APIs or new paradigms. This leads to the fact that many product teams decide not to open the possibility to integrate to them. The following documentation will allow the users to integrate using agents with other tools.","title":"Faraday Dispatcher"},{"location":"faraday-dispatcher-v4/#documentation","text":"For more info on how to use it, check our [documentation][doc] Doc API","title":"Documentation"},{"location":"import/","text":"There are many ways to add vulnerabilities into Faraday, create them manually, import scan reports, with supported tools, Faraday Agents or using Faraday API. Import your tool Reports \u00b6 You can upload a scan report of your favorite tool to Faraday and have a nice look at your findings through the Vulns View. You can see a list of the tools that Faraday supports by clicking on this link In order to upload a report to Faraday, follow these instructions: Click on the button + Add Vulnerability . Click on the button Import from file and a prompt will be displayed. Click on Browse in order to select the report that you are going to upload, or just drag and drop the file into the box. Once you have selected the report, click on Upload and your file will be uploaded. Refresh the view with the top bar refresh icon. Supported File formats \u00b6 There is a variety of tools and they all have multiple export formats, to make it more simple we list the tool in order + the filetype Acunetix (REPORT) (XML, JSON) Appscan (REPORT) (XML, CSV) AppSpider (REPORT) (XML) Arachni (REPORT) (XML) AWS Prowler (REPORT) (JSON) Bandit (REPORT, XML) Brutexss (REPORT) Burp, BurpPro (REPORT, API) (XML) Core Impact, Core Impact (REPORT) (XML) Dirsearch (REPORT) (JSON) Fierce (REPORT, CONSOLE) Fortify (REPORT, XML) Goohost (REPORT) (XML) Hydra (REPORT) (XML) Ip360 (REPORT) (CSV) Junit (REPORT) (XML) Lynis (REPORT) (DAT) Maltego (REPORT) (MTGX & MTGL) Microsoft Baseline Security Analyzer (REPORT) (LOG) Metasploit , (REPORT) (XML) Naabu (REPORT) (JSON) Ncrack (REPORT) Nessus , (REPORT) (XML .nessus) Netsparker (REPORT) (XML) Netsparker Cloud (REPORT) Nexpose, Nexpose Enterprise , (REPORT) (simple XML, XML Export plugin (2.0)) Nikto (REPORT) (XML) Nipper (REPORT) Nmap (REPORT) (XML) Nuclei (REPORT) OpenScap (REPORT) Openvas (REPORT) (XML) Qualysguard (REPORT) (XML) QualysWebApp (REPORT) Recon-NG (REPORT) Retina (REPORT) (XML) Shodan (API) SonarQube (REPORT) SourceClear (REPORT) SSL Labs (REPORT) SSLyze (REPORT) (XML) Sublist3r (REPORT) W3af (REPORT) (XML) WebInspect (REPORT) WhatWebPlugin (REPORT) WhiteSource (REPORT) Xsssniper (REPORT) X1, Onapsis (REPORT) (XML) Zap (REPORT) (XML)","title":"Importing"},{"location":"import/#import-your-tool-reports","text":"You can upload a scan report of your favorite tool to Faraday and have a nice look at your findings through the Vulns View. You can see a list of the tools that Faraday supports by clicking on this link In order to upload a report to Faraday, follow these instructions: Click on the button + Add Vulnerability . Click on the button Import from file and a prompt will be displayed. Click on Browse in order to select the report that you are going to upload, or just drag and drop the file into the box. Once you have selected the report, click on Upload and your file will be uploaded. Refresh the view with the top bar refresh icon.","title":"Import your tool Reports"},{"location":"import/#supported-file-formats","text":"There is a variety of tools and they all have multiple export formats, to make it more simple we list the tool in order + the filetype Acunetix (REPORT) (XML, JSON) Appscan (REPORT) (XML, CSV) AppSpider (REPORT) (XML) Arachni (REPORT) (XML) AWS Prowler (REPORT) (JSON) Bandit (REPORT, XML) Brutexss (REPORT) Burp, BurpPro (REPORT, API) (XML) Core Impact, Core Impact (REPORT) (XML) Dirsearch (REPORT) (JSON) Fierce (REPORT, CONSOLE) Fortify (REPORT, XML) Goohost (REPORT) (XML) Hydra (REPORT) (XML) Ip360 (REPORT) (CSV) Junit (REPORT) (XML) Lynis (REPORT) (DAT) Maltego (REPORT) (MTGX & MTGL) Microsoft Baseline Security Analyzer (REPORT) (LOG) Metasploit , (REPORT) (XML) Naabu (REPORT) (JSON) Ncrack (REPORT) Nessus , (REPORT) (XML .nessus) Netsparker (REPORT) (XML) Netsparker Cloud (REPORT) Nexpose, Nexpose Enterprise , (REPORT) (simple XML, XML Export plugin (2.0)) Nikto (REPORT) (XML) Nipper (REPORT) Nmap (REPORT) (XML) Nuclei (REPORT) OpenScap (REPORT) Openvas (REPORT) (XML) Qualysguard (REPORT) (XML) QualysWebApp (REPORT) Recon-NG (REPORT) Retina (REPORT) (XML) Shodan (API) SonarQube (REPORT) SourceClear (REPORT) SSL Labs (REPORT) SSLyze (REPORT) (XML) Sublist3r (REPORT) W3af (REPORT) (XML) WebInspect (REPORT) WhatWebPlugin (REPORT) WhiteSource (REPORT) Xsssniper (REPORT) X1, Onapsis (REPORT) (XML) Zap (REPORT) (XML)","title":"Supported File formats"},{"location":"integration-gitlab/","text":"(V3 Deprecated) This is a feature that allows you to send vulnerabilities from Faraday to GitLab. Initial Configuration \u00b6 GitLab's Configuration \u00b6 Login into GitLab and navigate to Settings > Access Tokens Create a Personal Access Token with the API Scope active: Copy and keep your generated personal access token Now, select a Project from GitLab to connect with Faraday Faraday's Configuration \u00b6 Login into Faraday's Web UI and go to Setting clicking on your username at the top-rigth corner: Inside Settings, navigate to Ticketing Tools and Select GitLab from the dropdown menu: Now, complete those fields with your GitLab Project information. Access Token (example): 4WRurWXnftGRbqCbJVUG Project (example): TEST-PROJECT template : choose a template from the dropdown menu (templates should be inside Faraday's Server at /home/faraday/.faraday/integrations_templates/ ) Click here to download an example template. If everything is Ok, click on the green Save button and you should see a pop-up like this: Send vulnerability to GitLab \u00b6 Access your Faraday's Web UI and go to Manage > Vulns. Click on the dropdown menu Add columns and add the issuetracker column . Now, select the vulnerability you want to export and click on Tools > Gitlab Click Ok. You should see the word Gitlab appearing on the issuetracker column at your vuln, you can click on it to see the issue that has been created on gitlab!","title":"GitLab"},{"location":"integration-gitlab/#initial-configuration","text":"","title":"Initial Configuration"},{"location":"integration-gitlab/#gitlabs-configuration","text":"Login into GitLab and navigate to Settings > Access Tokens Create a Personal Access Token with the API Scope active: Copy and keep your generated personal access token Now, select a Project from GitLab to connect with Faraday","title":"GitLab's Configuration"},{"location":"integration-gitlab/#faradays-configuration","text":"Login into Faraday's Web UI and go to Setting clicking on your username at the top-rigth corner: Inside Settings, navigate to Ticketing Tools and Select GitLab from the dropdown menu: Now, complete those fields with your GitLab Project information. Access Token (example): 4WRurWXnftGRbqCbJVUG Project (example): TEST-PROJECT template : choose a template from the dropdown menu (templates should be inside Faraday's Server at /home/faraday/.faraday/integrations_templates/ ) Click here to download an example template. If everything is Ok, click on the green Save button and you should see a pop-up like this:","title":"Faraday's Configuration"},{"location":"integration-gitlab/#send-vulnerability-to-gitlab","text":"Access your Faraday's Web UI and go to Manage > Vulns. Click on the dropdown menu Add columns and add the issuetracker column . Now, select the vulnerability you want to export and click on Tools > Gitlab Click Ok. You should see the word Gitlab appearing on the issuetracker column at your vuln, you can click on it to see the issue that has been created on gitlab!","title":"Send vulnerability to GitLab"},{"location":"integration-jira/","text":"(V3 Deprecated) This is a feature that allows you to send vulnerabilities from Faraday to JIRA. Through this process you will see how to JIRA's Configuration \u00b6 1. Follow the instructions based on you JIRA Instance (On-prem or Cloud) \u00b6 JIRA Software Copy your instance URL and Project Key from your JIRA instance information: URL (example): https://localhost:8080/ Project Key (example): FARADAYPRO template : choose a template from the dropdown menu (templates should be inside Faraday's Server at /home/faraday/.faraday/integrations_templates/ ) Click here to download an example template. JIRA Cloud Copy your JIRA Instance URL and Project Key information: URL (example): https://example.atlassian.net/ Project Key (example): FARADAYPRO template : choose a template from the dropdown menu (templates should be inside Faraday's Server at /home/faraday/.faraday/integrations_templates/ ) Click here to download an example template. Now, we need to activate OAuth Authentication : Inside your JIRA Cloud click on the gear icon at the top-right corner (left side of your profile icon) and click on Products , then, on the left-side bar, click on Application links On the input bar at JIRA, enter your Faraday's URL (example: http://localhost:5985 ) If this message appears and the URL is correct, just click Continue Fill the application fields, in this case, Faraday as the Application Name, you must select the option Generic Application as the Application Type and Mark the option Create incoming link . Then, click Continue. Now, you will need to create a: Consumer Key : you should copy and save this for after configuration at Faraday. Consumer Name : In this case, we use Faraday. Public Key : To create this Public Key, you will need to execute the following command on your Faraday Server: faraday-manage generate-rsa-keys --integration jira you will receive something like this: -----BEGIN PUBLIC KEY----- 9YxXl4D/aL/iE94MsUc9t3FFoNCP97Sfel7o+1q5YOF79qlKGbP3mXgbel/LUaSj Vd91dnpg1OS1PH0p6YMDsCQfXSVBpC2OUY2hDkEwPUT/OKeAq+XE5sqEqoUeDdrS OOWVuEYlWZl6ghS2TABFN5VXPgWg30Ne4L0nlDqJh2BD7RACa+Wpzbr2b/HmIxSf WOj6mu7eK7Vx38CyrnOci8u59Mv/IXsEppU6nGgMZ7/Hw1ojaeSn0W6wF0Wsk3EG RY/wYngdCYQEQx0rDnannBnP6EuYaqwBtNjcPpp9zvsZt+d1qmOWbii4rbqfY4BR n42R05zamkSNqbwdoQ1JDyv90D6lrG+JLq/BjHaIJlAhnDIWfX6DtqgUOD3VUQfC GQvvguRA -----END PUBLIC KEY----- Just copy and paste it inside your Publick Key field at JIRA. Then, click Continue to generate the application. If everything is Ok, you should see this screen: Faraday authenticate to Jira using OAuth 1.0 A 2. Generate RSA Keys \u00b6 Run faraday-manage generate-rsa-keys --integration jira to generate the RSA key pair that Jira requests for the OAuth authentication process. Create Application Link (using the public key generated). When you\u2019re creating the Application Link, it will ask you for a Public Key. You need to paste there the public key that the command in the section above printed. Begin authentication Once you\u2019ve created the Application Link, go to Faraday\u2019s Settings and select the Ticketing Tools section. Once there, select JIRA and you will see a section named OAuth Authentication. Here, all you need to do is to type the Consumer Key that you specified in the Application Link and click on the button next to the input field to begin the authentication process. The text right next to the button will show you the status of the process. If everything goes well, the status will be Authenticated. Once you\u2019ve been authenticated to Jira using OAuth1.0a, you\u2019ll be able to send vulnerabilities to Jira without providing any credentials. RSA Keys Generate RSA keys: faraday-manage generate-rsa-keys --integration jira Show current RSA keys: faraday-manage show-rsa-keys --integration jira Remove current RSA keys: faraday-manage remove-rsa-keys --integration jira \u200b RSA Keys Commands Generate RSA keys: faraday-manage generate-rsa-keys --integration jira Show current RSA keys: faraday-manage show-rsa-keys --integration jira Remove current RSA keys: faraday-manage remove-rsa-keys --integration jira 3. Faraday's Configuration \u00b6 Login into Faraday's Web UI and go to Setting clicking on your username at the top-rigth corner: Inside Settings, navigate to Ticketing Tools and Select JIRA from the dropdown menu: JIRA Software Paste your JIRA instance information and paste it on the correct fields. If everything is Ok, click on the green Save button and you should see a pop-up like this: JIRA Cloud Inside the ticketing tool at Faraday, paste your instance URL and Project Key, then, add your Consumer Key into the OAuth Authentication field, after this, click the round button to authenticate! You should see this, click on Redirect to JIRA , once on JIRA website, click on Allow and wait until receive an Access Approved message, once received, close the tab. Once in Faraday, click on Authorized. 4. Send vulnerability to JIRA \u00b6 Navigate to the Manage > Vulns view inside Faraday's Web UI To send vulnerabilities to JIRA, select the desired vulnerabilities, click on the Tools button at the top-right corner and then click on JIRA. Click on the dropdown menu Add columns and add the issuetracker column . Now, select the vulnerability you want to export and click on Tools > JIRA Keep in mind that only confirmed vulnerabilities can be sent. Once the JIRA dialog opens, you have two options: You can use the default data saved in the Ticketing Tools section of Settings (see Save JIRA's Configuration for more information): You can overwrite JIRA default data by clicking on the checkbox button and then manually input your JIRA credentials. Then click OK: If you overwrite only one field, Faraday will fill the others fields with the default data. E.g: if you overwrite Project Key, Faraday will fill URL field with the information you have saved in Settings. Click Ok. You should see the word JIRA appearing on the issuetracker column at your vuln, you can click on it to see the issue that has been created on JIRA! Template The template's name where you'll define the issue's description. You can call any attribute of the vulnerability object using Jinja2 syntax. E.g., if you want your issue in JIRA to have as description the target, the hostnames, and the severity of the vulnerability, the template would be as follows: Target: {{target}} Hostnames: {%for hostname in hostnames%} - {{hostname}} {%endfor%} Severity: {{severity}} This template must be located inside the folder /home/faraday/.faraday/integrations_templates/ You can also link an issue to an Epic. To do so, look after the custom field Epic Link of your instance and add it to your issue\u2019s configuration (just as the example above). Once you add it, you need to type in the input field the issue keys of the epic.","title":"Jira"},{"location":"integration-jira/#jiras-configuration","text":"","title":"JIRA's Configuration"},{"location":"integration-jira/#1-follow-the-instructions-based-on-you-jira-instance-on-prem-or-cloud","text":"JIRA Software Copy your instance URL and Project Key from your JIRA instance information: URL (example): https://localhost:8080/ Project Key (example): FARADAYPRO template : choose a template from the dropdown menu (templates should be inside Faraday's Server at /home/faraday/.faraday/integrations_templates/ ) Click here to download an example template. JIRA Cloud Copy your JIRA Instance URL and Project Key information: URL (example): https://example.atlassian.net/ Project Key (example): FARADAYPRO template : choose a template from the dropdown menu (templates should be inside Faraday's Server at /home/faraday/.faraday/integrations_templates/ ) Click here to download an example template. Now, we need to activate OAuth Authentication : Inside your JIRA Cloud click on the gear icon at the top-right corner (left side of your profile icon) and click on Products , then, on the left-side bar, click on Application links On the input bar at JIRA, enter your Faraday's URL (example: http://localhost:5985 ) If this message appears and the URL is correct, just click Continue Fill the application fields, in this case, Faraday as the Application Name, you must select the option Generic Application as the Application Type and Mark the option Create incoming link . Then, click Continue. Now, you will need to create a: Consumer Key : you should copy and save this for after configuration at Faraday. Consumer Name : In this case, we use Faraday. Public Key : To create this Public Key, you will need to execute the following command on your Faraday Server: faraday-manage generate-rsa-keys --integration jira you will receive something like this: -----BEGIN PUBLIC KEY----- 9YxXl4D/aL/iE94MsUc9t3FFoNCP97Sfel7o+1q5YOF79qlKGbP3mXgbel/LUaSj Vd91dnpg1OS1PH0p6YMDsCQfXSVBpC2OUY2hDkEwPUT/OKeAq+XE5sqEqoUeDdrS OOWVuEYlWZl6ghS2TABFN5VXPgWg30Ne4L0nlDqJh2BD7RACa+Wpzbr2b/HmIxSf WOj6mu7eK7Vx38CyrnOci8u59Mv/IXsEppU6nGgMZ7/Hw1ojaeSn0W6wF0Wsk3EG RY/wYngdCYQEQx0rDnannBnP6EuYaqwBtNjcPpp9zvsZt+d1qmOWbii4rbqfY4BR n42R05zamkSNqbwdoQ1JDyv90D6lrG+JLq/BjHaIJlAhnDIWfX6DtqgUOD3VUQfC GQvvguRA -----END PUBLIC KEY----- Just copy and paste it inside your Publick Key field at JIRA. Then, click Continue to generate the application. If everything is Ok, you should see this screen: Faraday authenticate to Jira using OAuth 1.0 A","title":"1. Follow the instructions based on you JIRA Instance (On-prem or Cloud)"},{"location":"integration-jira/#2-generate-rsa-keys","text":"Run faraday-manage generate-rsa-keys --integration jira to generate the RSA key pair that Jira requests for the OAuth authentication process. Create Application Link (using the public key generated). When you\u2019re creating the Application Link, it will ask you for a Public Key. You need to paste there the public key that the command in the section above printed. Begin authentication Once you\u2019ve created the Application Link, go to Faraday\u2019s Settings and select the Ticketing Tools section. Once there, select JIRA and you will see a section named OAuth Authentication. Here, all you need to do is to type the Consumer Key that you specified in the Application Link and click on the button next to the input field to begin the authentication process. The text right next to the button will show you the status of the process. If everything goes well, the status will be Authenticated. Once you\u2019ve been authenticated to Jira using OAuth1.0a, you\u2019ll be able to send vulnerabilities to Jira without providing any credentials. RSA Keys Generate RSA keys: faraday-manage generate-rsa-keys --integration jira Show current RSA keys: faraday-manage show-rsa-keys --integration jira Remove current RSA keys: faraday-manage remove-rsa-keys --integration jira \u200b RSA Keys Commands Generate RSA keys: faraday-manage generate-rsa-keys --integration jira Show current RSA keys: faraday-manage show-rsa-keys --integration jira Remove current RSA keys: faraday-manage remove-rsa-keys --integration jira","title":"2. Generate RSA Keys"},{"location":"integration-jira/#3-faradays-configuration","text":"Login into Faraday's Web UI and go to Setting clicking on your username at the top-rigth corner: Inside Settings, navigate to Ticketing Tools and Select JIRA from the dropdown menu: JIRA Software Paste your JIRA instance information and paste it on the correct fields. If everything is Ok, click on the green Save button and you should see a pop-up like this: JIRA Cloud Inside the ticketing tool at Faraday, paste your instance URL and Project Key, then, add your Consumer Key into the OAuth Authentication field, after this, click the round button to authenticate! You should see this, click on Redirect to JIRA , once on JIRA website, click on Allow and wait until receive an Access Approved message, once received, close the tab. Once in Faraday, click on Authorized.","title":"3. Faraday's Configuration"},{"location":"integration-jira/#4-send-vulnerability-to-jira","text":"Navigate to the Manage > Vulns view inside Faraday's Web UI To send vulnerabilities to JIRA, select the desired vulnerabilities, click on the Tools button at the top-right corner and then click on JIRA. Click on the dropdown menu Add columns and add the issuetracker column . Now, select the vulnerability you want to export and click on Tools > JIRA Keep in mind that only confirmed vulnerabilities can be sent. Once the JIRA dialog opens, you have two options: You can use the default data saved in the Ticketing Tools section of Settings (see Save JIRA's Configuration for more information): You can overwrite JIRA default data by clicking on the checkbox button and then manually input your JIRA credentials. Then click OK: If you overwrite only one field, Faraday will fill the others fields with the default data. E.g: if you overwrite Project Key, Faraday will fill URL field with the information you have saved in Settings. Click Ok. You should see the word JIRA appearing on the issuetracker column at your vuln, you can click on it to see the issue that has been created on JIRA! Template The template's name where you'll define the issue's description. You can call any attribute of the vulnerability object using Jinja2 syntax. E.g., if you want your issue in JIRA to have as description the target, the hostnames, and the severity of the vulnerability, the template would be as follows: Target: {{target}} Hostnames: {%for hostname in hostnames%} - {{hostname}} {%endfor%} Severity: {{severity}} This template must be located inside the folder /home/faraday/.faraday/integrations_templates/ You can also link an issue to an Epic. To do so, look after the custom field Epic Link of your instance and add it to your issue\u2019s configuration (just as the example above). Once you add it, you need to type in the input field the issue keys of the epic.","title":"4. Send vulnerability to JIRA"},{"location":"integration-servicenow/","text":"ServiceNow (V3 Deprecated) \u00b6 This feature allows you to send vulnerabilities from Faraday to ServiceNow as an incident (using ServiceNow's Incident table). Send vulnerabilities to ServiceNow \u00b6 To send vulnerabilities to ServiceNow, go into our Status Report, select the desired vulnerabilities, click on the Tools button and then click on the ServiceNow option. Info Keep in mind that only confirmed vulnerabilities can be sent. Sending To ServiceNow \u00b6 Once the ServiceNow dialog opens, you have two options: 1: You can use the default data saved in the Ticketing Tools section of Settings (see Save ServiceNow's Configuration for more information): 2: You can overwrite ServiceNow default data by clicking on the checkbox button and then manually input your ServiceNow credentials. Then click OK: Issuetracker \u00b6 Once the vulnerability has been sent to ServiceNow, add the column issuetracker , so you can see a link that will lead you to the incident in ServiceNow. Issuetracker's JSON \u00b6 We added the issuetracker_json field which, if you\u2019re using our ServiceNow integration, will give you details about the issue you created from Faraday to your ticketing instance. You can also use this field on your Executive Reports, and can render either the URL of your issue or just the ID for it. Sending vulnerability\u2019s evidence \u00b6 You can send the vulnerability\u2019s evidence to ServiceNow. The evidence will be sent as an incident\u2019s attachments. Keep in mind the following considerations: You should have the right permissions to add attachments to an incident. The attachment size allowed by your ServiceNow\\'s instance must be greater than the size of the attachment that you want to send. Save ServiceNow's Configuration \u00b6 To save ServiceNow's configuration, go to Settings : Then go to the Ticketing Tools section: URL \u00b6 Use this field to save the URL of the ServiceNow's instance where you want the vulnerability to be sent. Incident's configuration \u00b6 In the Incident's Configuration section, you can set the way you want the vulnerabilities to be parsed as ServiceNow\u2019s incident. You can set the incident\u2019s category and subcategory in which the vulnerabilities will be sent or you can even use Jinja2 syntax to create your own templates to parse the vulnerabilities\u2019 information and use these templates as the incident\u2019s description in ServiceNow. Incident\u2019s category and subcategory \u00b6 In these dropdown menus, you can set the category and the subcategory of the incident. Once you send the vulnerability to ServiceNow, you\u2019ll see the same category and subcategory that you defined in Faraday. To check which category and subcategory you can choose, take a look at the following ServiceNow\u2019s link. Template \u00b6 The template's name where you'll define the incident\u2019s description. You can call any attribute of the vulnerability object using Jinja2 syntax. E.g., if you want your incident in ServiceNow to have as description the target, the hostnames, and the severity of the vulnerability, the template would be as follows: Target: {{target}} Hostnames: {%for hostname in hostnames%} - {{hostname}} {%endfor%} Severity: {{severity}} This template must be located inside the folder /home/faraday/.faraday/integrations_templates/","title":"ServiceNow"},{"location":"integration-servicenow/#servicenow-v3-deprecated","text":"This feature allows you to send vulnerabilities from Faraday to ServiceNow as an incident (using ServiceNow's Incident table).","title":"ServiceNow (V3 Deprecated)"},{"location":"integration-servicenow/#send-vulnerabilities-to-servicenow","text":"To send vulnerabilities to ServiceNow, go into our Status Report, select the desired vulnerabilities, click on the Tools button and then click on the ServiceNow option. Info Keep in mind that only confirmed vulnerabilities can be sent.","title":"Send vulnerabilities to ServiceNow"},{"location":"integration-servicenow/#sending-to-servicenow","text":"Once the ServiceNow dialog opens, you have two options: 1: You can use the default data saved in the Ticketing Tools section of Settings (see Save ServiceNow's Configuration for more information): 2: You can overwrite ServiceNow default data by clicking on the checkbox button and then manually input your ServiceNow credentials. Then click OK:","title":"Sending To ServiceNow"},{"location":"integration-servicenow/#issuetracker","text":"Once the vulnerability has been sent to ServiceNow, add the column issuetracker , so you can see a link that will lead you to the incident in ServiceNow.","title":"Issuetracker"},{"location":"integration-servicenow/#issuetrackers-json","text":"We added the issuetracker_json field which, if you\u2019re using our ServiceNow integration, will give you details about the issue you created from Faraday to your ticketing instance. You can also use this field on your Executive Reports, and can render either the URL of your issue or just the ID for it.","title":"Issuetracker's JSON"},{"location":"integration-servicenow/#sending-vulnerabilitys-evidence","text":"You can send the vulnerability\u2019s evidence to ServiceNow. The evidence will be sent as an incident\u2019s attachments. Keep in mind the following considerations: You should have the right permissions to add attachments to an incident. The attachment size allowed by your ServiceNow\\'s instance must be greater than the size of the attachment that you want to send.","title":"Sending vulnerability\u2019s evidence"},{"location":"integration-servicenow/#save-servicenows-configuration","text":"To save ServiceNow's configuration, go to Settings : Then go to the Ticketing Tools section:","title":"Save ServiceNow's Configuration"},{"location":"integration-servicenow/#url","text":"Use this field to save the URL of the ServiceNow's instance where you want the vulnerability to be sent.","title":"URL"},{"location":"integration-servicenow/#incidents-configuration","text":"In the Incident's Configuration section, you can set the way you want the vulnerabilities to be parsed as ServiceNow\u2019s incident. You can set the incident\u2019s category and subcategory in which the vulnerabilities will be sent or you can even use Jinja2 syntax to create your own templates to parse the vulnerabilities\u2019 information and use these templates as the incident\u2019s description in ServiceNow.","title":"Incident's configuration"},{"location":"integration-servicenow/#incidents-category-and-subcategory","text":"In these dropdown menus, you can set the category and the subcategory of the incident. Once you send the vulnerability to ServiceNow, you\u2019ll see the same category and subcategory that you defined in Faraday. To check which category and subcategory you can choose, take a look at the following ServiceNow\u2019s link.","title":"Incident\u2019s category and subcategory"},{"location":"integration-servicenow/#template","text":"The template's name where you'll define the incident\u2019s description. You can call any attribute of the vulnerability object using Jinja2 syntax. E.g., if you want your incident in ServiceNow to have as description the target, the hostnames, and the severity of the vulnerability, the template would be as follows: Target: {{target}} Hostnames: {%for hostname in hostnames%} - {{hostname}} {%endfor%} Severity: {{severity}} This template must be located inside the folder /home/faraday/.faraday/integrations_templates/","title":"Template"},{"location":"integration-solarwinds/","text":"WHD - SolarWinds (V3 Deprecated) \u00b6 This feature allows you to send vulnerabilities from Faraday to Web Help Desk from Solar Winds as an incident (using Web Help Desk from Solar Winds's Incident table). Send vulnerabilities to Web Help Desk from Solar Winds \u00b6 To send vulnerabilities to Web Help Desk from Solar Winds, go into our Vulnerability View, select the desired vulnerabilities, click on the Tools button and then click on the Web Help Desk from Solar Winds option. Info Keep in mind that only confirmed vulnerabilities can be sent. Sending To Web Help Desk from Solar Winds \u00b6 Once the Web Help Desk from Solar Winds dialog opens, you have two options: 1: You can use the default data saved in the Ticketing Tools section of Settings (see Save Web Help Desk from Solar Winds's Configuration for more information): 2: You can overwrite Web Help Desk from Solar Winds default data by clicking on the checkbox button and then manually input your Web Help Desk from Solar Winds credentials. Then click OK: Issuetracker \u00b6 Once the vulnerability has been sent to Web Help Desk from Solar Winds, add the column issuetracker , so you can see a link that will lead you to the incident in Web Help Desk. Issuetracker's JSON \u00b6 We added the issuetracker_json field which, if you\u2019re using our Web Help Desk from Solar Winds integration, will give you details about the issue you created from Faraday to your ticketing instance. You can also use this field on your Executive Reports, and can render either the URL of your issue or just the ID for it. Save Web Help Desk from Solar Winds's Configuration \u00b6 To save Web Help Desk from Solar Winds's configuration, go to Settings : Then go to the Ticketing Tools section: URL \u00b6 Use this field to save the URL of the Web Help Desk from Solar Winds's instance where you want the vulnerability to be sent. API Key \u00b6 Use the field to fill the Api key created in Solar Winds instance. Template \u00b6 Select The first Template, there is a default template already loaded in your faraday instance.","title":"SolarWinds"},{"location":"integration-solarwinds/#whd-solarwinds-v3-deprecated","text":"This feature allows you to send vulnerabilities from Faraday to Web Help Desk from Solar Winds as an incident (using Web Help Desk from Solar Winds's Incident table).","title":"WHD - SolarWinds (V3 Deprecated)"},{"location":"integration-solarwinds/#send-vulnerabilities-to-web-help-desk-from-solar-winds","text":"To send vulnerabilities to Web Help Desk from Solar Winds, go into our Vulnerability View, select the desired vulnerabilities, click on the Tools button and then click on the Web Help Desk from Solar Winds option. Info Keep in mind that only confirmed vulnerabilities can be sent.","title":"Send vulnerabilities to Web Help Desk from Solar Winds"},{"location":"integration-solarwinds/#sending-to-web-help-desk-from-solar-winds","text":"Once the Web Help Desk from Solar Winds dialog opens, you have two options: 1: You can use the default data saved in the Ticketing Tools section of Settings (see Save Web Help Desk from Solar Winds's Configuration for more information): 2: You can overwrite Web Help Desk from Solar Winds default data by clicking on the checkbox button and then manually input your Web Help Desk from Solar Winds credentials. Then click OK:","title":"Sending To Web Help Desk from Solar Winds"},{"location":"integration-solarwinds/#issuetracker","text":"Once the vulnerability has been sent to Web Help Desk from Solar Winds, add the column issuetracker , so you can see a link that will lead you to the incident in Web Help Desk.","title":"Issuetracker"},{"location":"integration-solarwinds/#issuetrackers-json","text":"We added the issuetracker_json field which, if you\u2019re using our Web Help Desk from Solar Winds integration, will give you details about the issue you created from Faraday to your ticketing instance. You can also use this field on your Executive Reports, and can render either the URL of your issue or just the ID for it.","title":"Issuetracker's JSON"},{"location":"integration-solarwinds/#save-web-help-desk-from-solar-windss-configuration","text":"To save Web Help Desk from Solar Winds's configuration, go to Settings : Then go to the Ticketing Tools section:","title":"Save Web Help Desk from Solar Winds's Configuration"},{"location":"integration-solarwinds/#url","text":"Use this field to save the URL of the Web Help Desk from Solar Winds's instance where you want the vulnerability to be sent.","title":"URL"},{"location":"integration-solarwinds/#api-key","text":"Use the field to fill the Api key created in Solar Winds instance.","title":"API Key"},{"location":"integration-solarwinds/#template","text":"Select The first Template, there is a default template already loaded in your faraday instance.","title":"Template"},{"location":"requirements/","text":"Before you install Faraday, check that your server meets below requirements Environment \u00b6 PostgreSQL v9.6 or higher Linux 64bits Operating system \u00b6 Ubuntu Kali Debian CentOS RedHat Specs \u00b6 Minimum Requirements Processor We require a DualCore 2Ghz Intel/AMD CPU Operating System We recommend using Ubuntu Server 18.04 (LTS) RAM 4 GB or more (8 GB recommended) Hard Disk Space 40 GB (depends on usage, PostgreSQL could consume 80 GB) Internet Internet connection is necessary for installation and license (Commercial)","title":"Requirements"},{"location":"requirements/#environment","text":"PostgreSQL v9.6 or higher Linux 64bits","title":"Environment"},{"location":"requirements/#operating-system","text":"Ubuntu Kali Debian CentOS RedHat","title":"Operating system"},{"location":"requirements/#specs","text":"Minimum Requirements Processor We require a DualCore 2Ghz Intel/AMD CPU Operating System We recommend using Ubuntu Server 18.04 (LTS) RAM 4 GB or more (8 GB recommended) Hard Disk Space 40 GB (depends on usage, PostgreSQL could consume 80 GB) Internet Internet connection is necessary for installation and license (Commercial)","title":"Specs"},{"location":"v4/Vulns-v4/","text":"To view a full list of yours findings you can access the Vulns view under Manage The Vulns View provides several options including vulnerability search, filtering and management Personalize this view by adding columms on the left side or removing columns with the x in the table. Also you can drag & drop some labels of columns and change their order on the table. These changes will be persisted in your browser from session to session, so you only have to apply them once There many different ways to add vulnerabilities into Faraday, create them manually, import scan reports, with sopported tools, Faraday Agents or using Faraday API Import Scan Reports \u00b6 You can upload a scan report of your favorite tool to Faraday and have a nice look at your findings through the Vulns View. You can see a list of the tools that Faraday supports by clicking on this link In order to upload a report to Faraday, follow these instructions: Click on the button + Add Vulnerability Click on the button Import from file and a prompt will be displayed. Click on Browse in order to select the report that you are going to upload, or just drop into the box. Once you have selected the report, click on Upload and your file will be uploaded Refresh the view with the top bar refresh icon Create a Vulnerability \u00b6 To create vulnerabilities manually, you can go to the Vulns View page and click the + Add Vulnerability button and then click on Manual Creation . You should see a dialog similar to this: The image above shows the tab General that allows you to select the target of your vulnerability, specify the name and description of your vulnerability. You also have another tabs in order to add more information to your vulnerability: Technical Details : allows you to add the field data to your vulnerability. If you create a web vulnerability, you will have more fields available such as path, method, request, response and so on. Custom Fields : allows you to add information to a field that you have created. For more information about Custom Fields, you can check its here . Evidence : allows you to add an evidence to the vulnerability. It can be a PNG or JPG image. Make sure you select a host (and a service if the vulnerability applies to it), a name and a description. These fields are mandatory to create a vulnerability Edit Vulnerabilities \u00b6 You can edit the vulnerabilities that you have created or imported. You have multiple ways to edit them From Vuln Preview \u00b6 You can see a preview of the vulnerability by click on the vuln's name. From here you can edit your vulnerability and it will be saved automatically. As you can see in the image above, there is a new tab named Comments where you can leave comments and mention other users to notify them about important events in real time. For more information about Comments, you can check its here Edit Button \u00b6 If you click on the Edit icon, the vulnerability edit mode will open Once you finish updating click on SAVE at the end of the section you are changing. Edit Multiple Vulnerabilities \u00b6 You can edit multiple vulnerabilities with just one click. Next to the edit button, you will find an arrow that will show a dropdown with the multiple values that you can edit at once or actions like, Create vulnerability templates (KB) Delete Vulnerabilities \u00b6 Select one or more vulnerabilities and click Delete icon Confirmed Vulnerabilities \u00b6 You can filter your vulnerabilities by confirmed, unconfirmed by clicking on the Flag icon button: Tags \u00b6 Tags allow you to organize your vulnerabilities by letting you make and edit categories: environment, technology, state, language, projects, etc You can also use Tags for Reports , allowing you to filter which vulnerablities you want to generate a report for How to Tag Vulnerabilities \u00b6 Select the vulnerabilities that you want to tag. Click on the \"Tags\" icon and select if you have a presetted tag or Create tag button if you need a new one. If you are going to create one just put a relevant name and a dialogue will be displayed. Now the vulnerabiliy has tags that you can use for filtering, searching or reporting Search and Filter Vulnerabilities \u00b6 Vulns View allows you to filter vulnerabilities so you can have a better workflow You can search or filter your data by specifying a keyword or multiple keywords Field values are not case-sensitive Filter by One Field \u00b6 In order to perform a search by one field, follow these steps: Enter the name of the field (e.g. severity ) Type a colon ( : ) right next to the name of the field specified above Type in the word that you want to find inside quotation marks ( \" ) Examples: You can also click on blue fields of the vulnerablity like Service, Hostnames, Target, Owner, etc to trigger a search on the specific field Filter by Many Fields \u00b6 In order to perform a search by many fields, you can use the logical operators and & or To perform a search, follow the next steps: Type a search for one field Type and or or Type a search for another field Examples: Filter Fields \u00b6 Now, let's take a look at which fields are available for filtering with an example. All of them are searched through the search field name:\"TCP timestamps\" description:\"Vulnerability testing\" severity:\"medium\" target_host_ip:\"127.0.0.1\" service:\"https\" easeofresolution:\"moderate\" references:\"cvss\" resolution:\"Resolution for testing vuln\" data:\"Search and filter\" request:\"POST\" response:\"OK\" method:\"POST\" pname:\"Parameter name\" params:\"Vulnerability parameters\" path:\"Vulnerability Path\" query:\"name:test\" website:\"Vulnerability website\" creator:\"Nessus\" type:\"vulnerability_web\" confirmed:\"true\" id:\"57448\" From the Vulns view you will be able to find the information using the tags parameter For example: tags:\"MY TAG\" as shown in the image below","title":"Vulns v4"},{"location":"v4/Vulns-v4/#import-scan-reports","text":"You can upload a scan report of your favorite tool to Faraday and have a nice look at your findings through the Vulns View. You can see a list of the tools that Faraday supports by clicking on this link In order to upload a report to Faraday, follow these instructions: Click on the button + Add Vulnerability Click on the button Import from file and a prompt will be displayed. Click on Browse in order to select the report that you are going to upload, or just drop into the box. Once you have selected the report, click on Upload and your file will be uploaded Refresh the view with the top bar refresh icon","title":"Import Scan Reports"},{"location":"v4/Vulns-v4/#create-a-vulnerability","text":"To create vulnerabilities manually, you can go to the Vulns View page and click the + Add Vulnerability button and then click on Manual Creation . You should see a dialog similar to this: The image above shows the tab General that allows you to select the target of your vulnerability, specify the name and description of your vulnerability. You also have another tabs in order to add more information to your vulnerability: Technical Details : allows you to add the field data to your vulnerability. If you create a web vulnerability, you will have more fields available such as path, method, request, response and so on. Custom Fields : allows you to add information to a field that you have created. For more information about Custom Fields, you can check its here . Evidence : allows you to add an evidence to the vulnerability. It can be a PNG or JPG image. Make sure you select a host (and a service if the vulnerability applies to it), a name and a description. These fields are mandatory to create a vulnerability","title":"Create a Vulnerability"},{"location":"v4/Vulns-v4/#edit-vulnerabilities","text":"You can edit the vulnerabilities that you have created or imported. You have multiple ways to edit them","title":"Edit Vulnerabilities"},{"location":"v4/Vulns-v4/#from-vuln-preview","text":"You can see a preview of the vulnerability by click on the vuln's name. From here you can edit your vulnerability and it will be saved automatically. As you can see in the image above, there is a new tab named Comments where you can leave comments and mention other users to notify them about important events in real time. For more information about Comments, you can check its here","title":"From Vuln Preview"},{"location":"v4/Vulns-v4/#edit-button","text":"If you click on the Edit icon, the vulnerability edit mode will open Once you finish updating click on SAVE at the end of the section you are changing.","title":"Edit Button"},{"location":"v4/Vulns-v4/#edit-multiple-vulnerabilities","text":"You can edit multiple vulnerabilities with just one click. Next to the edit button, you will find an arrow that will show a dropdown with the multiple values that you can edit at once or actions like, Create vulnerability templates (KB)","title":"Edit Multiple Vulnerabilities"},{"location":"v4/Vulns-v4/#delete-vulnerabilities","text":"Select one or more vulnerabilities and click Delete icon","title":"Delete Vulnerabilities"},{"location":"v4/Vulns-v4/#confirmed-vulnerabilities","text":"You can filter your vulnerabilities by confirmed, unconfirmed by clicking on the Flag icon button:","title":"Confirmed Vulnerabilities"},{"location":"v4/Vulns-v4/#tags","text":"Tags allow you to organize your vulnerabilities by letting you make and edit categories: environment, technology, state, language, projects, etc You can also use Tags for Reports , allowing you to filter which vulnerablities you want to generate a report for","title":"Tags"},{"location":"v4/Vulns-v4/#how-to-tag-vulnerabilities","text":"Select the vulnerabilities that you want to tag. Click on the \"Tags\" icon and select if you have a presetted tag or Create tag button if you need a new one. If you are going to create one just put a relevant name and a dialogue will be displayed. Now the vulnerabiliy has tags that you can use for filtering, searching or reporting","title":"How to Tag Vulnerabilities"},{"location":"v4/Vulns-v4/#search-and-filter-vulnerabilities","text":"Vulns View allows you to filter vulnerabilities so you can have a better workflow You can search or filter your data by specifying a keyword or multiple keywords Field values are not case-sensitive","title":"Search and Filter Vulnerabilities"},{"location":"v4/Vulns-v4/#filter-by-one-field","text":"In order to perform a search by one field, follow these steps: Enter the name of the field (e.g. severity ) Type a colon ( : ) right next to the name of the field specified above Type in the word that you want to find inside quotation marks ( \" ) Examples: You can also click on blue fields of the vulnerablity like Service, Hostnames, Target, Owner, etc to trigger a search on the specific field","title":"Filter by One Field"},{"location":"v4/Vulns-v4/#filter-by-many-fields","text":"In order to perform a search by many fields, you can use the logical operators and & or To perform a search, follow the next steps: Type a search for one field Type and or or Type a search for another field Examples:","title":"Filter by Many Fields"},{"location":"v4/Vulns-v4/#filter-fields","text":"Now, let's take a look at which fields are available for filtering with an example. All of them are searched through the search field name:\"TCP timestamps\" description:\"Vulnerability testing\" severity:\"medium\" target_host_ip:\"127.0.0.1\" service:\"https\" easeofresolution:\"moderate\" references:\"cvss\" resolution:\"Resolution for testing vuln\" data:\"Search and filter\" request:\"POST\" response:\"OK\" method:\"POST\" pname:\"Parameter name\" params:\"Vulnerability parameters\" path:\"Vulnerability Path\" query:\"name:test\" website:\"Vulnerability website\" creator:\"Nessus\" type:\"vulnerability_web\" confirmed:\"true\" id:\"57448\" From the Vulns view you will be able to find the information using the tags parameter For example: tags:\"MY TAG\" as shown in the image below","title":"Filter Fields"}]}